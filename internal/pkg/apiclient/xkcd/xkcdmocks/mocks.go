// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package xkcdmocks

import (
	"context"
	"sync"

	"github.com/hortbot/hortbot/internal/pkg/apiclient/xkcd"
)

// Ensure, that APIMock does implement xkcd.API.
// If this is not the case, regenerate this file with moq.
var _ xkcd.API = &APIMock{}

// APIMock is a mock implementation of xkcd.API.
//
//	func TestSomethingThatUsesAPI(t *testing.T) {
//
//		// make and configure a mocked xkcd.API
//		mockedAPI := &APIMock{
//			GetComicFunc: func(ctx context.Context, id int) (*xkcd.Comic, error) {
//				panic("mock out the GetComic method")
//			},
//		}
//
//		// use mockedAPI in code that requires xkcd.API
//		// and then make assertions.
//
//	}
type APIMock struct {
	// GetComicFunc mocks the GetComic method.
	GetComicFunc func(ctx context.Context, id int) (*xkcd.Comic, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetComic holds details about calls to the GetComic method.
		GetComic []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
	}
	lockGetComic sync.RWMutex
}

// GetComic calls GetComicFunc.
func (mock *APIMock) GetComic(ctx context.Context, id int) (*xkcd.Comic, error) {
	if mock.GetComicFunc == nil {
		panic("APIMock.GetComicFunc: method is nil but API.GetComic was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetComic.Lock()
	mock.calls.GetComic = append(mock.calls.GetComic, callInfo)
	mock.lockGetComic.Unlock()
	return mock.GetComicFunc(ctx, id)
}

// GetComicCalls gets all the calls that were made to GetComic.
// Check the length with:
//
//	len(mockedAPI.GetComicCalls())
func (mock *APIMock) GetComicCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockGetComic.RLock()
	calls = mock.calls.GetComic
	mock.lockGetComic.RUnlock()
	return calls
}
