// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package steammocks

import (
	"context"
	"sync"

	"github.com/hortbot/hortbot/internal/pkg/apiclient/steam"
)

// Ensure, that APIMock does implement steam.API.
// If this is not the case, regenerate this file with moq.
var _ steam.API = &APIMock{}

// APIMock is a mock implementation of steam.API.
//
//	func TestSomethingThatUsesAPI(t *testing.T) {
//
//		// make and configure a mocked steam.API
//		mockedAPI := &APIMock{
//			GetOwnedGamesFunc: func(ctx context.Context, id string) ([]*steam.Game, error) {
//				panic("mock out the GetOwnedGames method")
//			},
//			GetPlayerSummaryFunc: func(ctx context.Context, id string) (*steam.Summary, error) {
//				panic("mock out the GetPlayerSummary method")
//			},
//		}
//
//		// use mockedAPI in code that requires steam.API
//		// and then make assertions.
//
//	}
type APIMock struct {
	// GetOwnedGamesFunc mocks the GetOwnedGames method.
	GetOwnedGamesFunc func(ctx context.Context, id string) ([]*steam.Game, error)

	// GetPlayerSummaryFunc mocks the GetPlayerSummary method.
	GetPlayerSummaryFunc func(ctx context.Context, id string) (*steam.Summary, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetOwnedGames holds details about calls to the GetOwnedGames method.
		GetOwnedGames []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetPlayerSummary holds details about calls to the GetPlayerSummary method.
		GetPlayerSummary []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
	}
	lockGetOwnedGames    sync.RWMutex
	lockGetPlayerSummary sync.RWMutex
}

// GetOwnedGames calls GetOwnedGamesFunc.
func (mock *APIMock) GetOwnedGames(ctx context.Context, id string) ([]*steam.Game, error) {
	if mock.GetOwnedGamesFunc == nil {
		panic("APIMock.GetOwnedGamesFunc: method is nil but API.GetOwnedGames was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetOwnedGames.Lock()
	mock.calls.GetOwnedGames = append(mock.calls.GetOwnedGames, callInfo)
	mock.lockGetOwnedGames.Unlock()
	return mock.GetOwnedGamesFunc(ctx, id)
}

// GetOwnedGamesCalls gets all the calls that were made to GetOwnedGames.
// Check the length with:
//
//	len(mockedAPI.GetOwnedGamesCalls())
func (mock *APIMock) GetOwnedGamesCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetOwnedGames.RLock()
	calls = mock.calls.GetOwnedGames
	mock.lockGetOwnedGames.RUnlock()
	return calls
}

// GetPlayerSummary calls GetPlayerSummaryFunc.
func (mock *APIMock) GetPlayerSummary(ctx context.Context, id string) (*steam.Summary, error) {
	if mock.GetPlayerSummaryFunc == nil {
		panic("APIMock.GetPlayerSummaryFunc: method is nil but API.GetPlayerSummary was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetPlayerSummary.Lock()
	mock.calls.GetPlayerSummary = append(mock.calls.GetPlayerSummary, callInfo)
	mock.lockGetPlayerSummary.Unlock()
	return mock.GetPlayerSummaryFunc(ctx, id)
}

// GetPlayerSummaryCalls gets all the calls that were made to GetPlayerSummary.
// Check the length with:
//
//	len(mockedAPI.GetPlayerSummaryCalls())
func (mock *APIMock) GetPlayerSummaryCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetPlayerSummary.RLock()
	calls = mock.calls.GetPlayerSummary
	mock.lockGetPlayerSummary.RUnlock()
	return calls
}
