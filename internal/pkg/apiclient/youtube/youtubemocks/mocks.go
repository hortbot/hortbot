// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package youtubemocks

import (
	"context"
	"net/url"
	"sync"

	"github.com/hortbot/hortbot/internal/pkg/apiclient/youtube"
)

// Ensure, that APIMock does implement youtube.API.
// If this is not the case, regenerate this file with moq.
var _ youtube.API = &APIMock{}

// APIMock is a mock implementation of youtube.API.
//
//	func TestSomethingThatUsesAPI(t *testing.T) {
//
//		// make and configure a mocked youtube.API
//		mockedAPI := &APIMock{
//			VideoTitleFunc: func(ctx context.Context, u *url.URL) string {
//				panic("mock out the VideoTitle method")
//			},
//		}
//
//		// use mockedAPI in code that requires youtube.API
//		// and then make assertions.
//
//	}
type APIMock struct {
	// VideoTitleFunc mocks the VideoTitle method.
	VideoTitleFunc func(ctx context.Context, u *url.URL) string

	// calls tracks calls to the methods.
	calls struct {
		// VideoTitle holds details about calls to the VideoTitle method.
		VideoTitle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// U is the u argument value.
			U *url.URL
		}
	}
	lockVideoTitle sync.RWMutex
}

// VideoTitle calls VideoTitleFunc.
func (mock *APIMock) VideoTitle(ctx context.Context, u *url.URL) string {
	if mock.VideoTitleFunc == nil {
		panic("APIMock.VideoTitleFunc: method is nil but API.VideoTitle was just called")
	}
	callInfo := struct {
		Ctx context.Context
		U   *url.URL
	}{
		Ctx: ctx,
		U:   u,
	}
	mock.lockVideoTitle.Lock()
	mock.calls.VideoTitle = append(mock.calls.VideoTitle, callInfo)
	mock.lockVideoTitle.Unlock()
	return mock.VideoTitleFunc(ctx, u)
}

// VideoTitleCalls gets all the calls that were made to VideoTitle.
// Check the length with:
//
//	len(mockedAPI.VideoTitleCalls())
func (mock *APIMock) VideoTitleCalls() []struct {
	Ctx context.Context
	U   *url.URL
} {
	var calls []struct {
		Ctx context.Context
		U   *url.URL
	}
	mock.lockVideoTitle.RLock()
	calls = mock.calls.VideoTitle
	mock.lockVideoTitle.RUnlock()
	return calls
}
