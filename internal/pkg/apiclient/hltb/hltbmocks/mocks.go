// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package hltbmocks

import (
	"context"
	"sync"

	"github.com/hortbot/hortbot/internal/pkg/apiclient/hltb"
)

// Ensure, that APIMock does implement hltb.API.
// If this is not the case, regenerate this file with moq.
var _ hltb.API = &APIMock{}

// APIMock is a mock implementation of hltb.API.
//
//	func TestSomethingThatUsesAPI(t *testing.T) {
//
//		// make and configure a mocked hltb.API
//		mockedAPI := &APIMock{
//			SearchGameFunc: func(ctx context.Context, query string) (*hltb.Game, error) {
//				panic("mock out the SearchGame method")
//			},
//		}
//
//		// use mockedAPI in code that requires hltb.API
//		// and then make assertions.
//
//	}
type APIMock struct {
	// SearchGameFunc mocks the SearchGame method.
	SearchGameFunc func(ctx context.Context, query string) (*hltb.Game, error)

	// calls tracks calls to the methods.
	calls struct {
		// SearchGame holds details about calls to the SearchGame method.
		SearchGame []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query string
		}
	}
	lockSearchGame sync.RWMutex
}

// SearchGame calls SearchGameFunc.
func (mock *APIMock) SearchGame(ctx context.Context, query string) (*hltb.Game, error) {
	if mock.SearchGameFunc == nil {
		panic("APIMock.SearchGameFunc: method is nil but API.SearchGame was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query string
	}{
		Ctx:   ctx,
		Query: query,
	}
	mock.lockSearchGame.Lock()
	mock.calls.SearchGame = append(mock.calls.SearchGame, callInfo)
	mock.lockSearchGame.Unlock()
	return mock.SearchGameFunc(ctx, query)
}

// SearchGameCalls gets all the calls that were made to SearchGame.
// Check the length with:
//
//	len(mockedAPI.SearchGameCalls())
func (mock *APIMock) SearchGameCalls() []struct {
	Ctx   context.Context
	Query string
} {
	var calls []struct {
		Ctx   context.Context
		Query string
	}
	mock.lockSearchGame.RLock()
	calls = mock.calls.SearchGame
	mock.lockSearchGame.RUnlock()
	return calls
}
