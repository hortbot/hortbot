// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package urbanmocks

import (
	"context"
	"sync"

	"github.com/hortbot/hortbot/internal/pkg/apiclient/urban"
)

// Ensure, that APIMock does implement urban.API.
// If this is not the case, regenerate this file with moq.
var _ urban.API = &APIMock{}

// APIMock is a mock implementation of urban.API.
//
//	func TestSomethingThatUsesAPI(t *testing.T) {
//
//		// make and configure a mocked urban.API
//		mockedAPI := &APIMock{
//			DefineFunc: func(ctx context.Context, s string) (string, error) {
//				panic("mock out the Define method")
//			},
//		}
//
//		// use mockedAPI in code that requires urban.API
//		// and then make assertions.
//
//	}
type APIMock struct {
	// DefineFunc mocks the Define method.
	DefineFunc func(ctx context.Context, s string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Define holds details about calls to the Define method.
		Define []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// S is the s argument value.
			S string
		}
	}
	lockDefine sync.RWMutex
}

// Define calls DefineFunc.
func (mock *APIMock) Define(ctx context.Context, s string) (string, error) {
	if mock.DefineFunc == nil {
		panic("APIMock.DefineFunc: method is nil but API.Define was just called")
	}
	callInfo := struct {
		Ctx context.Context
		S   string
	}{
		Ctx: ctx,
		S:   s,
	}
	mock.lockDefine.Lock()
	mock.calls.Define = append(mock.calls.Define, callInfo)
	mock.lockDefine.Unlock()
	return mock.DefineFunc(ctx, s)
}

// DefineCalls gets all the calls that were made to Define.
// Check the length with:
//
//	len(mockedAPI.DefineCalls())
func (mock *APIMock) DefineCalls() []struct {
	Ctx context.Context
	S   string
} {
	var calls []struct {
		Ctx context.Context
		S   string
	}
	mock.lockDefine.RLock()
	calls = mock.calls.Define
	mock.lockDefine.RUnlock()
	return calls
}
