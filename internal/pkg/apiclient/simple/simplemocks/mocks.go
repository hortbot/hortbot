// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package simplemocks

import (
	"context"
	"sync"

	"github.com/hortbot/hortbot/internal/pkg/apiclient/simple"
)

// Ensure, that APIMock does implement simple.API.
// If this is not the case, regenerate this file with moq.
var _ simple.API = &APIMock{}

// APIMock is a mock implementation of simple.API.
//
//	func TestSomethingThatUsesAPI(t *testing.T) {
//
//		// make and configure a mocked simple.API
//		mockedAPI := &APIMock{
//			PlaintextFunc: func(ctx context.Context, u string) (string, error) {
//				panic("mock out the Plaintext method")
//			},
//		}
//
//		// use mockedAPI in code that requires simple.API
//		// and then make assertions.
//
//	}
type APIMock struct {
	// PlaintextFunc mocks the Plaintext method.
	PlaintextFunc func(ctx context.Context, u string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Plaintext holds details about calls to the Plaintext method.
		Plaintext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// U is the u argument value.
			U string
		}
	}
	lockPlaintext sync.RWMutex
}

// Plaintext calls PlaintextFunc.
func (mock *APIMock) Plaintext(ctx context.Context, u string) (string, error) {
	if mock.PlaintextFunc == nil {
		panic("APIMock.PlaintextFunc: method is nil but API.Plaintext was just called")
	}
	callInfo := struct {
		Ctx context.Context
		U   string
	}{
		Ctx: ctx,
		U:   u,
	}
	mock.lockPlaintext.Lock()
	mock.calls.Plaintext = append(mock.calls.Plaintext, callInfo)
	mock.lockPlaintext.Unlock()
	return mock.PlaintextFunc(ctx, u)
}

// PlaintextCalls gets all the calls that were made to Plaintext.
// Check the length with:
//
//	len(mockedAPI.PlaintextCalls())
func (mock *APIMock) PlaintextCalls() []struct {
	Ctx context.Context
	U   string
} {
	var calls []struct {
		Ctx context.Context
		U   string
	}
	mock.lockPlaintext.RLock()
	calls = mock.calls.Plaintext
	mock.lockPlaintext.RUnlock()
	return calls
}
