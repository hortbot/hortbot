// Code generated by counterfeiter. DO NOT EDIT.
package twitchfakes

import (
	"context"
	"sync"

	"github.com/hortbot/hortbot/internal/pkg/apiclient/twitch"
	"golang.org/x/oauth2"
)

type FakeAPI struct {
	AnnounceStub        func(context.Context, int64, int64, *oauth2.Token, string, string) (*oauth2.Token, error)
	announceMutex       sync.RWMutex
	announceArgsForCall []struct {
		arg1 context.Context
		arg2 int64
		arg3 int64
		arg4 *oauth2.Token
		arg5 string
		arg6 string
	}
	announceReturns struct {
		result1 *oauth2.Token
		result2 error
	}
	announceReturnsOnCall map[int]struct {
		result1 *oauth2.Token
		result2 error
	}
	AuthCodeURLStub        func(string, ...string) string
	authCodeURLMutex       sync.RWMutex
	authCodeURLArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	authCodeURLReturns struct {
		result1 string
	}
	authCodeURLReturnsOnCall map[int]struct {
		result1 string
	}
	BanStub        func(context.Context, int64, int64, *oauth2.Token, *twitch.BanRequest) (*oauth2.Token, error)
	banMutex       sync.RWMutex
	banArgsForCall []struct {
		arg1 context.Context
		arg2 int64
		arg3 int64
		arg4 *oauth2.Token
		arg5 *twitch.BanRequest
	}
	banReturns struct {
		result1 *oauth2.Token
		result2 error
	}
	banReturnsOnCall map[int]struct {
		result1 *oauth2.Token
		result2 error
	}
	ClearChatStub        func(context.Context, int64, int64, *oauth2.Token) (*oauth2.Token, error)
	clearChatMutex       sync.RWMutex
	clearChatArgsForCall []struct {
		arg1 context.Context
		arg2 int64
		arg3 int64
		arg4 *oauth2.Token
	}
	clearChatReturns struct {
		result1 *oauth2.Token
		result2 error
	}
	clearChatReturnsOnCall map[int]struct {
		result1 *oauth2.Token
		result2 error
	}
	DeleteChatMessageStub        func(context.Context, int64, int64, *oauth2.Token, string) (*oauth2.Token, error)
	deleteChatMessageMutex       sync.RWMutex
	deleteChatMessageArgsForCall []struct {
		arg1 context.Context
		arg2 int64
		arg3 int64
		arg4 *oauth2.Token
		arg5 string
	}
	deleteChatMessageReturns struct {
		result1 *oauth2.Token
		result2 error
	}
	deleteChatMessageReturnsOnCall map[int]struct {
		result1 *oauth2.Token
		result2 error
	}
	ExchangeStub        func(context.Context, string) (*oauth2.Token, error)
	exchangeMutex       sync.RWMutex
	exchangeArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	exchangeReturns struct {
		result1 *oauth2.Token
		result2 error
	}
	exchangeReturnsOnCall map[int]struct {
		result1 *oauth2.Token
		result2 error
	}
	GetChannelByIDStub        func(context.Context, int64) (*twitch.Channel, error)
	getChannelByIDMutex       sync.RWMutex
	getChannelByIDArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	getChannelByIDReturns struct {
		result1 *twitch.Channel
		result2 error
	}
	getChannelByIDReturnsOnCall map[int]struct {
		result1 *twitch.Channel
		result2 error
	}
	GetChannelModeratorsStub        func(context.Context, int64, *oauth2.Token) ([]*twitch.ChannelModerator, *oauth2.Token, error)
	getChannelModeratorsMutex       sync.RWMutex
	getChannelModeratorsArgsForCall []struct {
		arg1 context.Context
		arg2 int64
		arg3 *oauth2.Token
	}
	getChannelModeratorsReturns struct {
		result1 []*twitch.ChannelModerator
		result2 *oauth2.Token
		result3 error
	}
	getChannelModeratorsReturnsOnCall map[int]struct {
		result1 []*twitch.ChannelModerator
		result2 *oauth2.Token
		result3 error
	}
	GetGameByIDStub        func(context.Context, int64) (*twitch.Category, error)
	getGameByIDMutex       sync.RWMutex
	getGameByIDArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	getGameByIDReturns struct {
		result1 *twitch.Category
		result2 error
	}
	getGameByIDReturnsOnCall map[int]struct {
		result1 *twitch.Category
		result2 error
	}
	GetGameByNameStub        func(context.Context, string) (*twitch.Category, error)
	getGameByNameMutex       sync.RWMutex
	getGameByNameArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getGameByNameReturns struct {
		result1 *twitch.Category
		result2 error
	}
	getGameByNameReturnsOnCall map[int]struct {
		result1 *twitch.Category
		result2 error
	}
	GetGameLinksStub        func(context.Context, int64) ([]twitch.GameLink, error)
	getGameLinksMutex       sync.RWMutex
	getGameLinksArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	getGameLinksReturns struct {
		result1 []twitch.GameLink
		result2 error
	}
	getGameLinksReturnsOnCall map[int]struct {
		result1 []twitch.GameLink
		result2 error
	}
	GetStreamByUserIDStub        func(context.Context, int64) (*twitch.Stream, error)
	getStreamByUserIDMutex       sync.RWMutex
	getStreamByUserIDArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	getStreamByUserIDReturns struct {
		result1 *twitch.Stream
		result2 error
	}
	getStreamByUserIDReturnsOnCall map[int]struct {
		result1 *twitch.Stream
		result2 error
	}
	GetStreamByUsernameStub        func(context.Context, string) (*twitch.Stream, error)
	getStreamByUsernameMutex       sync.RWMutex
	getStreamByUsernameArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getStreamByUsernameReturns struct {
		result1 *twitch.Stream
		result2 error
	}
	getStreamByUsernameReturnsOnCall map[int]struct {
		result1 *twitch.Stream
		result2 error
	}
	GetUserByIDStub        func(context.Context, int64) (*twitch.User, error)
	getUserByIDMutex       sync.RWMutex
	getUserByIDArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	getUserByIDReturns struct {
		result1 *twitch.User
		result2 error
	}
	getUserByIDReturnsOnCall map[int]struct {
		result1 *twitch.User
		result2 error
	}
	GetUserByTokenStub        func(context.Context, *oauth2.Token) (*twitch.User, *oauth2.Token, error)
	getUserByTokenMutex       sync.RWMutex
	getUserByTokenArgsForCall []struct {
		arg1 context.Context
		arg2 *oauth2.Token
	}
	getUserByTokenReturns struct {
		result1 *twitch.User
		result2 *oauth2.Token
		result3 error
	}
	getUserByTokenReturnsOnCall map[int]struct {
		result1 *twitch.User
		result2 *oauth2.Token
		result3 error
	}
	GetUserByUsernameStub        func(context.Context, string) (*twitch.User, error)
	getUserByUsernameMutex       sync.RWMutex
	getUserByUsernameArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getUserByUsernameReturns struct {
		result1 *twitch.User
		result2 error
	}
	getUserByUsernameReturnsOnCall map[int]struct {
		result1 *twitch.User
		result2 error
	}
	ModifyChannelStub        func(context.Context, int64, *oauth2.Token, *string, *int64) (*oauth2.Token, error)
	modifyChannelMutex       sync.RWMutex
	modifyChannelArgsForCall []struct {
		arg1 context.Context
		arg2 int64
		arg3 *oauth2.Token
		arg4 *string
		arg5 *int64
	}
	modifyChannelReturns struct {
		result1 *oauth2.Token
		result2 error
	}
	modifyChannelReturnsOnCall map[int]struct {
		result1 *oauth2.Token
		result2 error
	}
	SearchCategoriesStub        func(context.Context, string) ([]*twitch.Category, error)
	searchCategoriesMutex       sync.RWMutex
	searchCategoriesArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	searchCategoriesReturns struct {
		result1 []*twitch.Category
		result2 error
	}
	searchCategoriesReturnsOnCall map[int]struct {
		result1 []*twitch.Category
		result2 error
	}
	SetChatColorStub        func(context.Context, int64, *oauth2.Token, string) (*oauth2.Token, error)
	setChatColorMutex       sync.RWMutex
	setChatColorArgsForCall []struct {
		arg1 context.Context
		arg2 int64
		arg3 *oauth2.Token
		arg4 string
	}
	setChatColorReturns struct {
		result1 *oauth2.Token
		result2 error
	}
	setChatColorReturnsOnCall map[int]struct {
		result1 *oauth2.Token
		result2 error
	}
	UnbanStub        func(context.Context, int64, int64, *oauth2.Token, int64) (*oauth2.Token, error)
	unbanMutex       sync.RWMutex
	unbanArgsForCall []struct {
		arg1 context.Context
		arg2 int64
		arg3 int64
		arg4 *oauth2.Token
		arg5 int64
	}
	unbanReturns struct {
		result1 *oauth2.Token
		result2 error
	}
	unbanReturnsOnCall map[int]struct {
		result1 *oauth2.Token
		result2 error
	}
	UpdateChatSettingsStub        func(context.Context, int64, int64, *oauth2.Token, *twitch.ChatSettingsPatch) (*oauth2.Token, error)
	updateChatSettingsMutex       sync.RWMutex
	updateChatSettingsArgsForCall []struct {
		arg1 context.Context
		arg2 int64
		arg3 int64
		arg4 *oauth2.Token
		arg5 *twitch.ChatSettingsPatch
	}
	updateChatSettingsReturns struct {
		result1 *oauth2.Token
		result2 error
	}
	updateChatSettingsReturnsOnCall map[int]struct {
		result1 *oauth2.Token
		result2 error
	}
	ValidateStub        func(context.Context, *oauth2.Token) (*twitch.Validation, *oauth2.Token, error)
	validateMutex       sync.RWMutex
	validateArgsForCall []struct {
		arg1 context.Context
		arg2 *oauth2.Token
	}
	validateReturns struct {
		result1 *twitch.Validation
		result2 *oauth2.Token
		result3 error
	}
	validateReturnsOnCall map[int]struct {
		result1 *twitch.Validation
		result2 *oauth2.Token
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPI) Announce(arg1 context.Context, arg2 int64, arg3 int64, arg4 *oauth2.Token, arg5 string, arg6 string) (*oauth2.Token, error) {
	fake.announceMutex.Lock()
	ret, specificReturn := fake.announceReturnsOnCall[len(fake.announceArgsForCall)]
	fake.announceArgsForCall = append(fake.announceArgsForCall, struct {
		arg1 context.Context
		arg2 int64
		arg3 int64
		arg4 *oauth2.Token
		arg5 string
		arg6 string
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	stub := fake.AnnounceStub
	fakeReturns := fake.announceReturns
	fake.recordInvocation("Announce", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.announceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) AnnounceCallCount() int {
	fake.announceMutex.RLock()
	defer fake.announceMutex.RUnlock()
	return len(fake.announceArgsForCall)
}

func (fake *FakeAPI) AnnounceCalls(stub func(context.Context, int64, int64, *oauth2.Token, string, string) (*oauth2.Token, error)) {
	fake.announceMutex.Lock()
	defer fake.announceMutex.Unlock()
	fake.AnnounceStub = stub
}

func (fake *FakeAPI) AnnounceArgsForCall(i int) (context.Context, int64, int64, *oauth2.Token, string, string) {
	fake.announceMutex.RLock()
	defer fake.announceMutex.RUnlock()
	argsForCall := fake.announceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeAPI) AnnounceReturns(result1 *oauth2.Token, result2 error) {
	fake.announceMutex.Lock()
	defer fake.announceMutex.Unlock()
	fake.AnnounceStub = nil
	fake.announceReturns = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) AnnounceReturnsOnCall(i int, result1 *oauth2.Token, result2 error) {
	fake.announceMutex.Lock()
	defer fake.announceMutex.Unlock()
	fake.AnnounceStub = nil
	if fake.announceReturnsOnCall == nil {
		fake.announceReturnsOnCall = make(map[int]struct {
			result1 *oauth2.Token
			result2 error
		})
	}
	fake.announceReturnsOnCall[i] = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) AuthCodeURL(arg1 string, arg2 ...string) string {
	fake.authCodeURLMutex.Lock()
	ret, specificReturn := fake.authCodeURLReturnsOnCall[len(fake.authCodeURLArgsForCall)]
	fake.authCodeURLArgsForCall = append(fake.authCodeURLArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2})
	stub := fake.AuthCodeURLStub
	fakeReturns := fake.authCodeURLReturns
	fake.recordInvocation("AuthCodeURL", []interface{}{arg1, arg2})
	fake.authCodeURLMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAPI) AuthCodeURLCallCount() int {
	fake.authCodeURLMutex.RLock()
	defer fake.authCodeURLMutex.RUnlock()
	return len(fake.authCodeURLArgsForCall)
}

func (fake *FakeAPI) AuthCodeURLCalls(stub func(string, ...string) string) {
	fake.authCodeURLMutex.Lock()
	defer fake.authCodeURLMutex.Unlock()
	fake.AuthCodeURLStub = stub
}

func (fake *FakeAPI) AuthCodeURLArgsForCall(i int) (string, []string) {
	fake.authCodeURLMutex.RLock()
	defer fake.authCodeURLMutex.RUnlock()
	argsForCall := fake.authCodeURLArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) AuthCodeURLReturns(result1 string) {
	fake.authCodeURLMutex.Lock()
	defer fake.authCodeURLMutex.Unlock()
	fake.AuthCodeURLStub = nil
	fake.authCodeURLReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeAPI) AuthCodeURLReturnsOnCall(i int, result1 string) {
	fake.authCodeURLMutex.Lock()
	defer fake.authCodeURLMutex.Unlock()
	fake.AuthCodeURLStub = nil
	if fake.authCodeURLReturnsOnCall == nil {
		fake.authCodeURLReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.authCodeURLReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeAPI) Ban(arg1 context.Context, arg2 int64, arg3 int64, arg4 *oauth2.Token, arg5 *twitch.BanRequest) (*oauth2.Token, error) {
	fake.banMutex.Lock()
	ret, specificReturn := fake.banReturnsOnCall[len(fake.banArgsForCall)]
	fake.banArgsForCall = append(fake.banArgsForCall, struct {
		arg1 context.Context
		arg2 int64
		arg3 int64
		arg4 *oauth2.Token
		arg5 *twitch.BanRequest
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.BanStub
	fakeReturns := fake.banReturns
	fake.recordInvocation("Ban", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.banMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) BanCallCount() int {
	fake.banMutex.RLock()
	defer fake.banMutex.RUnlock()
	return len(fake.banArgsForCall)
}

func (fake *FakeAPI) BanCalls(stub func(context.Context, int64, int64, *oauth2.Token, *twitch.BanRequest) (*oauth2.Token, error)) {
	fake.banMutex.Lock()
	defer fake.banMutex.Unlock()
	fake.BanStub = stub
}

func (fake *FakeAPI) BanArgsForCall(i int) (context.Context, int64, int64, *oauth2.Token, *twitch.BanRequest) {
	fake.banMutex.RLock()
	defer fake.banMutex.RUnlock()
	argsForCall := fake.banArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeAPI) BanReturns(result1 *oauth2.Token, result2 error) {
	fake.banMutex.Lock()
	defer fake.banMutex.Unlock()
	fake.BanStub = nil
	fake.banReturns = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) BanReturnsOnCall(i int, result1 *oauth2.Token, result2 error) {
	fake.banMutex.Lock()
	defer fake.banMutex.Unlock()
	fake.BanStub = nil
	if fake.banReturnsOnCall == nil {
		fake.banReturnsOnCall = make(map[int]struct {
			result1 *oauth2.Token
			result2 error
		})
	}
	fake.banReturnsOnCall[i] = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ClearChat(arg1 context.Context, arg2 int64, arg3 int64, arg4 *oauth2.Token) (*oauth2.Token, error) {
	fake.clearChatMutex.Lock()
	ret, specificReturn := fake.clearChatReturnsOnCall[len(fake.clearChatArgsForCall)]
	fake.clearChatArgsForCall = append(fake.clearChatArgsForCall, struct {
		arg1 context.Context
		arg2 int64
		arg3 int64
		arg4 *oauth2.Token
	}{arg1, arg2, arg3, arg4})
	stub := fake.ClearChatStub
	fakeReturns := fake.clearChatReturns
	fake.recordInvocation("ClearChat", []interface{}{arg1, arg2, arg3, arg4})
	fake.clearChatMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) ClearChatCallCount() int {
	fake.clearChatMutex.RLock()
	defer fake.clearChatMutex.RUnlock()
	return len(fake.clearChatArgsForCall)
}

func (fake *FakeAPI) ClearChatCalls(stub func(context.Context, int64, int64, *oauth2.Token) (*oauth2.Token, error)) {
	fake.clearChatMutex.Lock()
	defer fake.clearChatMutex.Unlock()
	fake.ClearChatStub = stub
}

func (fake *FakeAPI) ClearChatArgsForCall(i int) (context.Context, int64, int64, *oauth2.Token) {
	fake.clearChatMutex.RLock()
	defer fake.clearChatMutex.RUnlock()
	argsForCall := fake.clearChatArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeAPI) ClearChatReturns(result1 *oauth2.Token, result2 error) {
	fake.clearChatMutex.Lock()
	defer fake.clearChatMutex.Unlock()
	fake.ClearChatStub = nil
	fake.clearChatReturns = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ClearChatReturnsOnCall(i int, result1 *oauth2.Token, result2 error) {
	fake.clearChatMutex.Lock()
	defer fake.clearChatMutex.Unlock()
	fake.ClearChatStub = nil
	if fake.clearChatReturnsOnCall == nil {
		fake.clearChatReturnsOnCall = make(map[int]struct {
			result1 *oauth2.Token
			result2 error
		})
	}
	fake.clearChatReturnsOnCall[i] = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) DeleteChatMessage(arg1 context.Context, arg2 int64, arg3 int64, arg4 *oauth2.Token, arg5 string) (*oauth2.Token, error) {
	fake.deleteChatMessageMutex.Lock()
	ret, specificReturn := fake.deleteChatMessageReturnsOnCall[len(fake.deleteChatMessageArgsForCall)]
	fake.deleteChatMessageArgsForCall = append(fake.deleteChatMessageArgsForCall, struct {
		arg1 context.Context
		arg2 int64
		arg3 int64
		arg4 *oauth2.Token
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.DeleteChatMessageStub
	fakeReturns := fake.deleteChatMessageReturns
	fake.recordInvocation("DeleteChatMessage", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.deleteChatMessageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) DeleteChatMessageCallCount() int {
	fake.deleteChatMessageMutex.RLock()
	defer fake.deleteChatMessageMutex.RUnlock()
	return len(fake.deleteChatMessageArgsForCall)
}

func (fake *FakeAPI) DeleteChatMessageCalls(stub func(context.Context, int64, int64, *oauth2.Token, string) (*oauth2.Token, error)) {
	fake.deleteChatMessageMutex.Lock()
	defer fake.deleteChatMessageMutex.Unlock()
	fake.DeleteChatMessageStub = stub
}

func (fake *FakeAPI) DeleteChatMessageArgsForCall(i int) (context.Context, int64, int64, *oauth2.Token, string) {
	fake.deleteChatMessageMutex.RLock()
	defer fake.deleteChatMessageMutex.RUnlock()
	argsForCall := fake.deleteChatMessageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeAPI) DeleteChatMessageReturns(result1 *oauth2.Token, result2 error) {
	fake.deleteChatMessageMutex.Lock()
	defer fake.deleteChatMessageMutex.Unlock()
	fake.DeleteChatMessageStub = nil
	fake.deleteChatMessageReturns = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) DeleteChatMessageReturnsOnCall(i int, result1 *oauth2.Token, result2 error) {
	fake.deleteChatMessageMutex.Lock()
	defer fake.deleteChatMessageMutex.Unlock()
	fake.DeleteChatMessageStub = nil
	if fake.deleteChatMessageReturnsOnCall == nil {
		fake.deleteChatMessageReturnsOnCall = make(map[int]struct {
			result1 *oauth2.Token
			result2 error
		})
	}
	fake.deleteChatMessageReturnsOnCall[i] = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) Exchange(arg1 context.Context, arg2 string) (*oauth2.Token, error) {
	fake.exchangeMutex.Lock()
	ret, specificReturn := fake.exchangeReturnsOnCall[len(fake.exchangeArgsForCall)]
	fake.exchangeArgsForCall = append(fake.exchangeArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ExchangeStub
	fakeReturns := fake.exchangeReturns
	fake.recordInvocation("Exchange", []interface{}{arg1, arg2})
	fake.exchangeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) ExchangeCallCount() int {
	fake.exchangeMutex.RLock()
	defer fake.exchangeMutex.RUnlock()
	return len(fake.exchangeArgsForCall)
}

func (fake *FakeAPI) ExchangeCalls(stub func(context.Context, string) (*oauth2.Token, error)) {
	fake.exchangeMutex.Lock()
	defer fake.exchangeMutex.Unlock()
	fake.ExchangeStub = stub
}

func (fake *FakeAPI) ExchangeArgsForCall(i int) (context.Context, string) {
	fake.exchangeMutex.RLock()
	defer fake.exchangeMutex.RUnlock()
	argsForCall := fake.exchangeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) ExchangeReturns(result1 *oauth2.Token, result2 error) {
	fake.exchangeMutex.Lock()
	defer fake.exchangeMutex.Unlock()
	fake.ExchangeStub = nil
	fake.exchangeReturns = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ExchangeReturnsOnCall(i int, result1 *oauth2.Token, result2 error) {
	fake.exchangeMutex.Lock()
	defer fake.exchangeMutex.Unlock()
	fake.ExchangeStub = nil
	if fake.exchangeReturnsOnCall == nil {
		fake.exchangeReturnsOnCall = make(map[int]struct {
			result1 *oauth2.Token
			result2 error
		})
	}
	fake.exchangeReturnsOnCall[i] = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetChannelByID(arg1 context.Context, arg2 int64) (*twitch.Channel, error) {
	fake.getChannelByIDMutex.Lock()
	ret, specificReturn := fake.getChannelByIDReturnsOnCall[len(fake.getChannelByIDArgsForCall)]
	fake.getChannelByIDArgsForCall = append(fake.getChannelByIDArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.GetChannelByIDStub
	fakeReturns := fake.getChannelByIDReturns
	fake.recordInvocation("GetChannelByID", []interface{}{arg1, arg2})
	fake.getChannelByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetChannelByIDCallCount() int {
	fake.getChannelByIDMutex.RLock()
	defer fake.getChannelByIDMutex.RUnlock()
	return len(fake.getChannelByIDArgsForCall)
}

func (fake *FakeAPI) GetChannelByIDCalls(stub func(context.Context, int64) (*twitch.Channel, error)) {
	fake.getChannelByIDMutex.Lock()
	defer fake.getChannelByIDMutex.Unlock()
	fake.GetChannelByIDStub = stub
}

func (fake *FakeAPI) GetChannelByIDArgsForCall(i int) (context.Context, int64) {
	fake.getChannelByIDMutex.RLock()
	defer fake.getChannelByIDMutex.RUnlock()
	argsForCall := fake.getChannelByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetChannelByIDReturns(result1 *twitch.Channel, result2 error) {
	fake.getChannelByIDMutex.Lock()
	defer fake.getChannelByIDMutex.Unlock()
	fake.GetChannelByIDStub = nil
	fake.getChannelByIDReturns = struct {
		result1 *twitch.Channel
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetChannelByIDReturnsOnCall(i int, result1 *twitch.Channel, result2 error) {
	fake.getChannelByIDMutex.Lock()
	defer fake.getChannelByIDMutex.Unlock()
	fake.GetChannelByIDStub = nil
	if fake.getChannelByIDReturnsOnCall == nil {
		fake.getChannelByIDReturnsOnCall = make(map[int]struct {
			result1 *twitch.Channel
			result2 error
		})
	}
	fake.getChannelByIDReturnsOnCall[i] = struct {
		result1 *twitch.Channel
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetChannelModerators(arg1 context.Context, arg2 int64, arg3 *oauth2.Token) ([]*twitch.ChannelModerator, *oauth2.Token, error) {
	fake.getChannelModeratorsMutex.Lock()
	ret, specificReturn := fake.getChannelModeratorsReturnsOnCall[len(fake.getChannelModeratorsArgsForCall)]
	fake.getChannelModeratorsArgsForCall = append(fake.getChannelModeratorsArgsForCall, struct {
		arg1 context.Context
		arg2 int64
		arg3 *oauth2.Token
	}{arg1, arg2, arg3})
	stub := fake.GetChannelModeratorsStub
	fakeReturns := fake.getChannelModeratorsReturns
	fake.recordInvocation("GetChannelModerators", []interface{}{arg1, arg2, arg3})
	fake.getChannelModeratorsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAPI) GetChannelModeratorsCallCount() int {
	fake.getChannelModeratorsMutex.RLock()
	defer fake.getChannelModeratorsMutex.RUnlock()
	return len(fake.getChannelModeratorsArgsForCall)
}

func (fake *FakeAPI) GetChannelModeratorsCalls(stub func(context.Context, int64, *oauth2.Token) ([]*twitch.ChannelModerator, *oauth2.Token, error)) {
	fake.getChannelModeratorsMutex.Lock()
	defer fake.getChannelModeratorsMutex.Unlock()
	fake.GetChannelModeratorsStub = stub
}

func (fake *FakeAPI) GetChannelModeratorsArgsForCall(i int) (context.Context, int64, *oauth2.Token) {
	fake.getChannelModeratorsMutex.RLock()
	defer fake.getChannelModeratorsMutex.RUnlock()
	argsForCall := fake.getChannelModeratorsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAPI) GetChannelModeratorsReturns(result1 []*twitch.ChannelModerator, result2 *oauth2.Token, result3 error) {
	fake.getChannelModeratorsMutex.Lock()
	defer fake.getChannelModeratorsMutex.Unlock()
	fake.GetChannelModeratorsStub = nil
	fake.getChannelModeratorsReturns = struct {
		result1 []*twitch.ChannelModerator
		result2 *oauth2.Token
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAPI) GetChannelModeratorsReturnsOnCall(i int, result1 []*twitch.ChannelModerator, result2 *oauth2.Token, result3 error) {
	fake.getChannelModeratorsMutex.Lock()
	defer fake.getChannelModeratorsMutex.Unlock()
	fake.GetChannelModeratorsStub = nil
	if fake.getChannelModeratorsReturnsOnCall == nil {
		fake.getChannelModeratorsReturnsOnCall = make(map[int]struct {
			result1 []*twitch.ChannelModerator
			result2 *oauth2.Token
			result3 error
		})
	}
	fake.getChannelModeratorsReturnsOnCall[i] = struct {
		result1 []*twitch.ChannelModerator
		result2 *oauth2.Token
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAPI) GetGameByID(arg1 context.Context, arg2 int64) (*twitch.Category, error) {
	fake.getGameByIDMutex.Lock()
	ret, specificReturn := fake.getGameByIDReturnsOnCall[len(fake.getGameByIDArgsForCall)]
	fake.getGameByIDArgsForCall = append(fake.getGameByIDArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.GetGameByIDStub
	fakeReturns := fake.getGameByIDReturns
	fake.recordInvocation("GetGameByID", []interface{}{arg1, arg2})
	fake.getGameByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetGameByIDCallCount() int {
	fake.getGameByIDMutex.RLock()
	defer fake.getGameByIDMutex.RUnlock()
	return len(fake.getGameByIDArgsForCall)
}

func (fake *FakeAPI) GetGameByIDCalls(stub func(context.Context, int64) (*twitch.Category, error)) {
	fake.getGameByIDMutex.Lock()
	defer fake.getGameByIDMutex.Unlock()
	fake.GetGameByIDStub = stub
}

func (fake *FakeAPI) GetGameByIDArgsForCall(i int) (context.Context, int64) {
	fake.getGameByIDMutex.RLock()
	defer fake.getGameByIDMutex.RUnlock()
	argsForCall := fake.getGameByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetGameByIDReturns(result1 *twitch.Category, result2 error) {
	fake.getGameByIDMutex.Lock()
	defer fake.getGameByIDMutex.Unlock()
	fake.GetGameByIDStub = nil
	fake.getGameByIDReturns = struct {
		result1 *twitch.Category
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetGameByIDReturnsOnCall(i int, result1 *twitch.Category, result2 error) {
	fake.getGameByIDMutex.Lock()
	defer fake.getGameByIDMutex.Unlock()
	fake.GetGameByIDStub = nil
	if fake.getGameByIDReturnsOnCall == nil {
		fake.getGameByIDReturnsOnCall = make(map[int]struct {
			result1 *twitch.Category
			result2 error
		})
	}
	fake.getGameByIDReturnsOnCall[i] = struct {
		result1 *twitch.Category
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetGameByName(arg1 context.Context, arg2 string) (*twitch.Category, error) {
	fake.getGameByNameMutex.Lock()
	ret, specificReturn := fake.getGameByNameReturnsOnCall[len(fake.getGameByNameArgsForCall)]
	fake.getGameByNameArgsForCall = append(fake.getGameByNameArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetGameByNameStub
	fakeReturns := fake.getGameByNameReturns
	fake.recordInvocation("GetGameByName", []interface{}{arg1, arg2})
	fake.getGameByNameMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetGameByNameCallCount() int {
	fake.getGameByNameMutex.RLock()
	defer fake.getGameByNameMutex.RUnlock()
	return len(fake.getGameByNameArgsForCall)
}

func (fake *FakeAPI) GetGameByNameCalls(stub func(context.Context, string) (*twitch.Category, error)) {
	fake.getGameByNameMutex.Lock()
	defer fake.getGameByNameMutex.Unlock()
	fake.GetGameByNameStub = stub
}

func (fake *FakeAPI) GetGameByNameArgsForCall(i int) (context.Context, string) {
	fake.getGameByNameMutex.RLock()
	defer fake.getGameByNameMutex.RUnlock()
	argsForCall := fake.getGameByNameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetGameByNameReturns(result1 *twitch.Category, result2 error) {
	fake.getGameByNameMutex.Lock()
	defer fake.getGameByNameMutex.Unlock()
	fake.GetGameByNameStub = nil
	fake.getGameByNameReturns = struct {
		result1 *twitch.Category
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetGameByNameReturnsOnCall(i int, result1 *twitch.Category, result2 error) {
	fake.getGameByNameMutex.Lock()
	defer fake.getGameByNameMutex.Unlock()
	fake.GetGameByNameStub = nil
	if fake.getGameByNameReturnsOnCall == nil {
		fake.getGameByNameReturnsOnCall = make(map[int]struct {
			result1 *twitch.Category
			result2 error
		})
	}
	fake.getGameByNameReturnsOnCall[i] = struct {
		result1 *twitch.Category
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetGameLinks(arg1 context.Context, arg2 int64) ([]twitch.GameLink, error) {
	fake.getGameLinksMutex.Lock()
	ret, specificReturn := fake.getGameLinksReturnsOnCall[len(fake.getGameLinksArgsForCall)]
	fake.getGameLinksArgsForCall = append(fake.getGameLinksArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.GetGameLinksStub
	fakeReturns := fake.getGameLinksReturns
	fake.recordInvocation("GetGameLinks", []interface{}{arg1, arg2})
	fake.getGameLinksMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetGameLinksCallCount() int {
	fake.getGameLinksMutex.RLock()
	defer fake.getGameLinksMutex.RUnlock()
	return len(fake.getGameLinksArgsForCall)
}

func (fake *FakeAPI) GetGameLinksCalls(stub func(context.Context, int64) ([]twitch.GameLink, error)) {
	fake.getGameLinksMutex.Lock()
	defer fake.getGameLinksMutex.Unlock()
	fake.GetGameLinksStub = stub
}

func (fake *FakeAPI) GetGameLinksArgsForCall(i int) (context.Context, int64) {
	fake.getGameLinksMutex.RLock()
	defer fake.getGameLinksMutex.RUnlock()
	argsForCall := fake.getGameLinksArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetGameLinksReturns(result1 []twitch.GameLink, result2 error) {
	fake.getGameLinksMutex.Lock()
	defer fake.getGameLinksMutex.Unlock()
	fake.GetGameLinksStub = nil
	fake.getGameLinksReturns = struct {
		result1 []twitch.GameLink
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetGameLinksReturnsOnCall(i int, result1 []twitch.GameLink, result2 error) {
	fake.getGameLinksMutex.Lock()
	defer fake.getGameLinksMutex.Unlock()
	fake.GetGameLinksStub = nil
	if fake.getGameLinksReturnsOnCall == nil {
		fake.getGameLinksReturnsOnCall = make(map[int]struct {
			result1 []twitch.GameLink
			result2 error
		})
	}
	fake.getGameLinksReturnsOnCall[i] = struct {
		result1 []twitch.GameLink
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetStreamByUserID(arg1 context.Context, arg2 int64) (*twitch.Stream, error) {
	fake.getStreamByUserIDMutex.Lock()
	ret, specificReturn := fake.getStreamByUserIDReturnsOnCall[len(fake.getStreamByUserIDArgsForCall)]
	fake.getStreamByUserIDArgsForCall = append(fake.getStreamByUserIDArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.GetStreamByUserIDStub
	fakeReturns := fake.getStreamByUserIDReturns
	fake.recordInvocation("GetStreamByUserID", []interface{}{arg1, arg2})
	fake.getStreamByUserIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetStreamByUserIDCallCount() int {
	fake.getStreamByUserIDMutex.RLock()
	defer fake.getStreamByUserIDMutex.RUnlock()
	return len(fake.getStreamByUserIDArgsForCall)
}

func (fake *FakeAPI) GetStreamByUserIDCalls(stub func(context.Context, int64) (*twitch.Stream, error)) {
	fake.getStreamByUserIDMutex.Lock()
	defer fake.getStreamByUserIDMutex.Unlock()
	fake.GetStreamByUserIDStub = stub
}

func (fake *FakeAPI) GetStreamByUserIDArgsForCall(i int) (context.Context, int64) {
	fake.getStreamByUserIDMutex.RLock()
	defer fake.getStreamByUserIDMutex.RUnlock()
	argsForCall := fake.getStreamByUserIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetStreamByUserIDReturns(result1 *twitch.Stream, result2 error) {
	fake.getStreamByUserIDMutex.Lock()
	defer fake.getStreamByUserIDMutex.Unlock()
	fake.GetStreamByUserIDStub = nil
	fake.getStreamByUserIDReturns = struct {
		result1 *twitch.Stream
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetStreamByUserIDReturnsOnCall(i int, result1 *twitch.Stream, result2 error) {
	fake.getStreamByUserIDMutex.Lock()
	defer fake.getStreamByUserIDMutex.Unlock()
	fake.GetStreamByUserIDStub = nil
	if fake.getStreamByUserIDReturnsOnCall == nil {
		fake.getStreamByUserIDReturnsOnCall = make(map[int]struct {
			result1 *twitch.Stream
			result2 error
		})
	}
	fake.getStreamByUserIDReturnsOnCall[i] = struct {
		result1 *twitch.Stream
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetStreamByUsername(arg1 context.Context, arg2 string) (*twitch.Stream, error) {
	fake.getStreamByUsernameMutex.Lock()
	ret, specificReturn := fake.getStreamByUsernameReturnsOnCall[len(fake.getStreamByUsernameArgsForCall)]
	fake.getStreamByUsernameArgsForCall = append(fake.getStreamByUsernameArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetStreamByUsernameStub
	fakeReturns := fake.getStreamByUsernameReturns
	fake.recordInvocation("GetStreamByUsername", []interface{}{arg1, arg2})
	fake.getStreamByUsernameMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetStreamByUsernameCallCount() int {
	fake.getStreamByUsernameMutex.RLock()
	defer fake.getStreamByUsernameMutex.RUnlock()
	return len(fake.getStreamByUsernameArgsForCall)
}

func (fake *FakeAPI) GetStreamByUsernameCalls(stub func(context.Context, string) (*twitch.Stream, error)) {
	fake.getStreamByUsernameMutex.Lock()
	defer fake.getStreamByUsernameMutex.Unlock()
	fake.GetStreamByUsernameStub = stub
}

func (fake *FakeAPI) GetStreamByUsernameArgsForCall(i int) (context.Context, string) {
	fake.getStreamByUsernameMutex.RLock()
	defer fake.getStreamByUsernameMutex.RUnlock()
	argsForCall := fake.getStreamByUsernameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetStreamByUsernameReturns(result1 *twitch.Stream, result2 error) {
	fake.getStreamByUsernameMutex.Lock()
	defer fake.getStreamByUsernameMutex.Unlock()
	fake.GetStreamByUsernameStub = nil
	fake.getStreamByUsernameReturns = struct {
		result1 *twitch.Stream
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetStreamByUsernameReturnsOnCall(i int, result1 *twitch.Stream, result2 error) {
	fake.getStreamByUsernameMutex.Lock()
	defer fake.getStreamByUsernameMutex.Unlock()
	fake.GetStreamByUsernameStub = nil
	if fake.getStreamByUsernameReturnsOnCall == nil {
		fake.getStreamByUsernameReturnsOnCall = make(map[int]struct {
			result1 *twitch.Stream
			result2 error
		})
	}
	fake.getStreamByUsernameReturnsOnCall[i] = struct {
		result1 *twitch.Stream
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetUserByID(arg1 context.Context, arg2 int64) (*twitch.User, error) {
	fake.getUserByIDMutex.Lock()
	ret, specificReturn := fake.getUserByIDReturnsOnCall[len(fake.getUserByIDArgsForCall)]
	fake.getUserByIDArgsForCall = append(fake.getUserByIDArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.GetUserByIDStub
	fakeReturns := fake.getUserByIDReturns
	fake.recordInvocation("GetUserByID", []interface{}{arg1, arg2})
	fake.getUserByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetUserByIDCallCount() int {
	fake.getUserByIDMutex.RLock()
	defer fake.getUserByIDMutex.RUnlock()
	return len(fake.getUserByIDArgsForCall)
}

func (fake *FakeAPI) GetUserByIDCalls(stub func(context.Context, int64) (*twitch.User, error)) {
	fake.getUserByIDMutex.Lock()
	defer fake.getUserByIDMutex.Unlock()
	fake.GetUserByIDStub = stub
}

func (fake *FakeAPI) GetUserByIDArgsForCall(i int) (context.Context, int64) {
	fake.getUserByIDMutex.RLock()
	defer fake.getUserByIDMutex.RUnlock()
	argsForCall := fake.getUserByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetUserByIDReturns(result1 *twitch.User, result2 error) {
	fake.getUserByIDMutex.Lock()
	defer fake.getUserByIDMutex.Unlock()
	fake.GetUserByIDStub = nil
	fake.getUserByIDReturns = struct {
		result1 *twitch.User
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetUserByIDReturnsOnCall(i int, result1 *twitch.User, result2 error) {
	fake.getUserByIDMutex.Lock()
	defer fake.getUserByIDMutex.Unlock()
	fake.GetUserByIDStub = nil
	if fake.getUserByIDReturnsOnCall == nil {
		fake.getUserByIDReturnsOnCall = make(map[int]struct {
			result1 *twitch.User
			result2 error
		})
	}
	fake.getUserByIDReturnsOnCall[i] = struct {
		result1 *twitch.User
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetUserByToken(arg1 context.Context, arg2 *oauth2.Token) (*twitch.User, *oauth2.Token, error) {
	fake.getUserByTokenMutex.Lock()
	ret, specificReturn := fake.getUserByTokenReturnsOnCall[len(fake.getUserByTokenArgsForCall)]
	fake.getUserByTokenArgsForCall = append(fake.getUserByTokenArgsForCall, struct {
		arg1 context.Context
		arg2 *oauth2.Token
	}{arg1, arg2})
	stub := fake.GetUserByTokenStub
	fakeReturns := fake.getUserByTokenReturns
	fake.recordInvocation("GetUserByToken", []interface{}{arg1, arg2})
	fake.getUserByTokenMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAPI) GetUserByTokenCallCount() int {
	fake.getUserByTokenMutex.RLock()
	defer fake.getUserByTokenMutex.RUnlock()
	return len(fake.getUserByTokenArgsForCall)
}

func (fake *FakeAPI) GetUserByTokenCalls(stub func(context.Context, *oauth2.Token) (*twitch.User, *oauth2.Token, error)) {
	fake.getUserByTokenMutex.Lock()
	defer fake.getUserByTokenMutex.Unlock()
	fake.GetUserByTokenStub = stub
}

func (fake *FakeAPI) GetUserByTokenArgsForCall(i int) (context.Context, *oauth2.Token) {
	fake.getUserByTokenMutex.RLock()
	defer fake.getUserByTokenMutex.RUnlock()
	argsForCall := fake.getUserByTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetUserByTokenReturns(result1 *twitch.User, result2 *oauth2.Token, result3 error) {
	fake.getUserByTokenMutex.Lock()
	defer fake.getUserByTokenMutex.Unlock()
	fake.GetUserByTokenStub = nil
	fake.getUserByTokenReturns = struct {
		result1 *twitch.User
		result2 *oauth2.Token
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAPI) GetUserByTokenReturnsOnCall(i int, result1 *twitch.User, result2 *oauth2.Token, result3 error) {
	fake.getUserByTokenMutex.Lock()
	defer fake.getUserByTokenMutex.Unlock()
	fake.GetUserByTokenStub = nil
	if fake.getUserByTokenReturnsOnCall == nil {
		fake.getUserByTokenReturnsOnCall = make(map[int]struct {
			result1 *twitch.User
			result2 *oauth2.Token
			result3 error
		})
	}
	fake.getUserByTokenReturnsOnCall[i] = struct {
		result1 *twitch.User
		result2 *oauth2.Token
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAPI) GetUserByUsername(arg1 context.Context, arg2 string) (*twitch.User, error) {
	fake.getUserByUsernameMutex.Lock()
	ret, specificReturn := fake.getUserByUsernameReturnsOnCall[len(fake.getUserByUsernameArgsForCall)]
	fake.getUserByUsernameArgsForCall = append(fake.getUserByUsernameArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetUserByUsernameStub
	fakeReturns := fake.getUserByUsernameReturns
	fake.recordInvocation("GetUserByUsername", []interface{}{arg1, arg2})
	fake.getUserByUsernameMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetUserByUsernameCallCount() int {
	fake.getUserByUsernameMutex.RLock()
	defer fake.getUserByUsernameMutex.RUnlock()
	return len(fake.getUserByUsernameArgsForCall)
}

func (fake *FakeAPI) GetUserByUsernameCalls(stub func(context.Context, string) (*twitch.User, error)) {
	fake.getUserByUsernameMutex.Lock()
	defer fake.getUserByUsernameMutex.Unlock()
	fake.GetUserByUsernameStub = stub
}

func (fake *FakeAPI) GetUserByUsernameArgsForCall(i int) (context.Context, string) {
	fake.getUserByUsernameMutex.RLock()
	defer fake.getUserByUsernameMutex.RUnlock()
	argsForCall := fake.getUserByUsernameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetUserByUsernameReturns(result1 *twitch.User, result2 error) {
	fake.getUserByUsernameMutex.Lock()
	defer fake.getUserByUsernameMutex.Unlock()
	fake.GetUserByUsernameStub = nil
	fake.getUserByUsernameReturns = struct {
		result1 *twitch.User
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetUserByUsernameReturnsOnCall(i int, result1 *twitch.User, result2 error) {
	fake.getUserByUsernameMutex.Lock()
	defer fake.getUserByUsernameMutex.Unlock()
	fake.GetUserByUsernameStub = nil
	if fake.getUserByUsernameReturnsOnCall == nil {
		fake.getUserByUsernameReturnsOnCall = make(map[int]struct {
			result1 *twitch.User
			result2 error
		})
	}
	fake.getUserByUsernameReturnsOnCall[i] = struct {
		result1 *twitch.User
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ModifyChannel(arg1 context.Context, arg2 int64, arg3 *oauth2.Token, arg4 *string, arg5 *int64) (*oauth2.Token, error) {
	fake.modifyChannelMutex.Lock()
	ret, specificReturn := fake.modifyChannelReturnsOnCall[len(fake.modifyChannelArgsForCall)]
	fake.modifyChannelArgsForCall = append(fake.modifyChannelArgsForCall, struct {
		arg1 context.Context
		arg2 int64
		arg3 *oauth2.Token
		arg4 *string
		arg5 *int64
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.ModifyChannelStub
	fakeReturns := fake.modifyChannelReturns
	fake.recordInvocation("ModifyChannel", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.modifyChannelMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) ModifyChannelCallCount() int {
	fake.modifyChannelMutex.RLock()
	defer fake.modifyChannelMutex.RUnlock()
	return len(fake.modifyChannelArgsForCall)
}

func (fake *FakeAPI) ModifyChannelCalls(stub func(context.Context, int64, *oauth2.Token, *string, *int64) (*oauth2.Token, error)) {
	fake.modifyChannelMutex.Lock()
	defer fake.modifyChannelMutex.Unlock()
	fake.ModifyChannelStub = stub
}

func (fake *FakeAPI) ModifyChannelArgsForCall(i int) (context.Context, int64, *oauth2.Token, *string, *int64) {
	fake.modifyChannelMutex.RLock()
	defer fake.modifyChannelMutex.RUnlock()
	argsForCall := fake.modifyChannelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeAPI) ModifyChannelReturns(result1 *oauth2.Token, result2 error) {
	fake.modifyChannelMutex.Lock()
	defer fake.modifyChannelMutex.Unlock()
	fake.ModifyChannelStub = nil
	fake.modifyChannelReturns = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ModifyChannelReturnsOnCall(i int, result1 *oauth2.Token, result2 error) {
	fake.modifyChannelMutex.Lock()
	defer fake.modifyChannelMutex.Unlock()
	fake.ModifyChannelStub = nil
	if fake.modifyChannelReturnsOnCall == nil {
		fake.modifyChannelReturnsOnCall = make(map[int]struct {
			result1 *oauth2.Token
			result2 error
		})
	}
	fake.modifyChannelReturnsOnCall[i] = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) SearchCategories(arg1 context.Context, arg2 string) ([]*twitch.Category, error) {
	fake.searchCategoriesMutex.Lock()
	ret, specificReturn := fake.searchCategoriesReturnsOnCall[len(fake.searchCategoriesArgsForCall)]
	fake.searchCategoriesArgsForCall = append(fake.searchCategoriesArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.SearchCategoriesStub
	fakeReturns := fake.searchCategoriesReturns
	fake.recordInvocation("SearchCategories", []interface{}{arg1, arg2})
	fake.searchCategoriesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) SearchCategoriesCallCount() int {
	fake.searchCategoriesMutex.RLock()
	defer fake.searchCategoriesMutex.RUnlock()
	return len(fake.searchCategoriesArgsForCall)
}

func (fake *FakeAPI) SearchCategoriesCalls(stub func(context.Context, string) ([]*twitch.Category, error)) {
	fake.searchCategoriesMutex.Lock()
	defer fake.searchCategoriesMutex.Unlock()
	fake.SearchCategoriesStub = stub
}

func (fake *FakeAPI) SearchCategoriesArgsForCall(i int) (context.Context, string) {
	fake.searchCategoriesMutex.RLock()
	defer fake.searchCategoriesMutex.RUnlock()
	argsForCall := fake.searchCategoriesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) SearchCategoriesReturns(result1 []*twitch.Category, result2 error) {
	fake.searchCategoriesMutex.Lock()
	defer fake.searchCategoriesMutex.Unlock()
	fake.SearchCategoriesStub = nil
	fake.searchCategoriesReturns = struct {
		result1 []*twitch.Category
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) SearchCategoriesReturnsOnCall(i int, result1 []*twitch.Category, result2 error) {
	fake.searchCategoriesMutex.Lock()
	defer fake.searchCategoriesMutex.Unlock()
	fake.SearchCategoriesStub = nil
	if fake.searchCategoriesReturnsOnCall == nil {
		fake.searchCategoriesReturnsOnCall = make(map[int]struct {
			result1 []*twitch.Category
			result2 error
		})
	}
	fake.searchCategoriesReturnsOnCall[i] = struct {
		result1 []*twitch.Category
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) SetChatColor(arg1 context.Context, arg2 int64, arg3 *oauth2.Token, arg4 string) (*oauth2.Token, error) {
	fake.setChatColorMutex.Lock()
	ret, specificReturn := fake.setChatColorReturnsOnCall[len(fake.setChatColorArgsForCall)]
	fake.setChatColorArgsForCall = append(fake.setChatColorArgsForCall, struct {
		arg1 context.Context
		arg2 int64
		arg3 *oauth2.Token
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.SetChatColorStub
	fakeReturns := fake.setChatColorReturns
	fake.recordInvocation("SetChatColor", []interface{}{arg1, arg2, arg3, arg4})
	fake.setChatColorMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) SetChatColorCallCount() int {
	fake.setChatColorMutex.RLock()
	defer fake.setChatColorMutex.RUnlock()
	return len(fake.setChatColorArgsForCall)
}

func (fake *FakeAPI) SetChatColorCalls(stub func(context.Context, int64, *oauth2.Token, string) (*oauth2.Token, error)) {
	fake.setChatColorMutex.Lock()
	defer fake.setChatColorMutex.Unlock()
	fake.SetChatColorStub = stub
}

func (fake *FakeAPI) SetChatColorArgsForCall(i int) (context.Context, int64, *oauth2.Token, string) {
	fake.setChatColorMutex.RLock()
	defer fake.setChatColorMutex.RUnlock()
	argsForCall := fake.setChatColorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeAPI) SetChatColorReturns(result1 *oauth2.Token, result2 error) {
	fake.setChatColorMutex.Lock()
	defer fake.setChatColorMutex.Unlock()
	fake.SetChatColorStub = nil
	fake.setChatColorReturns = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) SetChatColorReturnsOnCall(i int, result1 *oauth2.Token, result2 error) {
	fake.setChatColorMutex.Lock()
	defer fake.setChatColorMutex.Unlock()
	fake.SetChatColorStub = nil
	if fake.setChatColorReturnsOnCall == nil {
		fake.setChatColorReturnsOnCall = make(map[int]struct {
			result1 *oauth2.Token
			result2 error
		})
	}
	fake.setChatColorReturnsOnCall[i] = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) Unban(arg1 context.Context, arg2 int64, arg3 int64, arg4 *oauth2.Token, arg5 int64) (*oauth2.Token, error) {
	fake.unbanMutex.Lock()
	ret, specificReturn := fake.unbanReturnsOnCall[len(fake.unbanArgsForCall)]
	fake.unbanArgsForCall = append(fake.unbanArgsForCall, struct {
		arg1 context.Context
		arg2 int64
		arg3 int64
		arg4 *oauth2.Token
		arg5 int64
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.UnbanStub
	fakeReturns := fake.unbanReturns
	fake.recordInvocation("Unban", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.unbanMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) UnbanCallCount() int {
	fake.unbanMutex.RLock()
	defer fake.unbanMutex.RUnlock()
	return len(fake.unbanArgsForCall)
}

func (fake *FakeAPI) UnbanCalls(stub func(context.Context, int64, int64, *oauth2.Token, int64) (*oauth2.Token, error)) {
	fake.unbanMutex.Lock()
	defer fake.unbanMutex.Unlock()
	fake.UnbanStub = stub
}

func (fake *FakeAPI) UnbanArgsForCall(i int) (context.Context, int64, int64, *oauth2.Token, int64) {
	fake.unbanMutex.RLock()
	defer fake.unbanMutex.RUnlock()
	argsForCall := fake.unbanArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeAPI) UnbanReturns(result1 *oauth2.Token, result2 error) {
	fake.unbanMutex.Lock()
	defer fake.unbanMutex.Unlock()
	fake.UnbanStub = nil
	fake.unbanReturns = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) UnbanReturnsOnCall(i int, result1 *oauth2.Token, result2 error) {
	fake.unbanMutex.Lock()
	defer fake.unbanMutex.Unlock()
	fake.UnbanStub = nil
	if fake.unbanReturnsOnCall == nil {
		fake.unbanReturnsOnCall = make(map[int]struct {
			result1 *oauth2.Token
			result2 error
		})
	}
	fake.unbanReturnsOnCall[i] = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) UpdateChatSettings(arg1 context.Context, arg2 int64, arg3 int64, arg4 *oauth2.Token, arg5 *twitch.ChatSettingsPatch) (*oauth2.Token, error) {
	fake.updateChatSettingsMutex.Lock()
	ret, specificReturn := fake.updateChatSettingsReturnsOnCall[len(fake.updateChatSettingsArgsForCall)]
	fake.updateChatSettingsArgsForCall = append(fake.updateChatSettingsArgsForCall, struct {
		arg1 context.Context
		arg2 int64
		arg3 int64
		arg4 *oauth2.Token
		arg5 *twitch.ChatSettingsPatch
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.UpdateChatSettingsStub
	fakeReturns := fake.updateChatSettingsReturns
	fake.recordInvocation("UpdateChatSettings", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.updateChatSettingsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) UpdateChatSettingsCallCount() int {
	fake.updateChatSettingsMutex.RLock()
	defer fake.updateChatSettingsMutex.RUnlock()
	return len(fake.updateChatSettingsArgsForCall)
}

func (fake *FakeAPI) UpdateChatSettingsCalls(stub func(context.Context, int64, int64, *oauth2.Token, *twitch.ChatSettingsPatch) (*oauth2.Token, error)) {
	fake.updateChatSettingsMutex.Lock()
	defer fake.updateChatSettingsMutex.Unlock()
	fake.UpdateChatSettingsStub = stub
}

func (fake *FakeAPI) UpdateChatSettingsArgsForCall(i int) (context.Context, int64, int64, *oauth2.Token, *twitch.ChatSettingsPatch) {
	fake.updateChatSettingsMutex.RLock()
	defer fake.updateChatSettingsMutex.RUnlock()
	argsForCall := fake.updateChatSettingsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeAPI) UpdateChatSettingsReturns(result1 *oauth2.Token, result2 error) {
	fake.updateChatSettingsMutex.Lock()
	defer fake.updateChatSettingsMutex.Unlock()
	fake.UpdateChatSettingsStub = nil
	fake.updateChatSettingsReturns = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) UpdateChatSettingsReturnsOnCall(i int, result1 *oauth2.Token, result2 error) {
	fake.updateChatSettingsMutex.Lock()
	defer fake.updateChatSettingsMutex.Unlock()
	fake.UpdateChatSettingsStub = nil
	if fake.updateChatSettingsReturnsOnCall == nil {
		fake.updateChatSettingsReturnsOnCall = make(map[int]struct {
			result1 *oauth2.Token
			result2 error
		})
	}
	fake.updateChatSettingsReturnsOnCall[i] = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) Validate(arg1 context.Context, arg2 *oauth2.Token) (*twitch.Validation, *oauth2.Token, error) {
	fake.validateMutex.Lock()
	ret, specificReturn := fake.validateReturnsOnCall[len(fake.validateArgsForCall)]
	fake.validateArgsForCall = append(fake.validateArgsForCall, struct {
		arg1 context.Context
		arg2 *oauth2.Token
	}{arg1, arg2})
	stub := fake.ValidateStub
	fakeReturns := fake.validateReturns
	fake.recordInvocation("Validate", []interface{}{arg1, arg2})
	fake.validateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAPI) ValidateCallCount() int {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return len(fake.validateArgsForCall)
}

func (fake *FakeAPI) ValidateCalls(stub func(context.Context, *oauth2.Token) (*twitch.Validation, *oauth2.Token, error)) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = stub
}

func (fake *FakeAPI) ValidateArgsForCall(i int) (context.Context, *oauth2.Token) {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	argsForCall := fake.validateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) ValidateReturns(result1 *twitch.Validation, result2 *oauth2.Token, result3 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	fake.validateReturns = struct {
		result1 *twitch.Validation
		result2 *oauth2.Token
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAPI) ValidateReturnsOnCall(i int, result1 *twitch.Validation, result2 *oauth2.Token, result3 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	if fake.validateReturnsOnCall == nil {
		fake.validateReturnsOnCall = make(map[int]struct {
			result1 *twitch.Validation
			result2 *oauth2.Token
			result3 error
		})
	}
	fake.validateReturnsOnCall[i] = struct {
		result1 *twitch.Validation
		result2 *oauth2.Token
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.announceMutex.RLock()
	defer fake.announceMutex.RUnlock()
	fake.authCodeURLMutex.RLock()
	defer fake.authCodeURLMutex.RUnlock()
	fake.banMutex.RLock()
	defer fake.banMutex.RUnlock()
	fake.clearChatMutex.RLock()
	defer fake.clearChatMutex.RUnlock()
	fake.deleteChatMessageMutex.RLock()
	defer fake.deleteChatMessageMutex.RUnlock()
	fake.exchangeMutex.RLock()
	defer fake.exchangeMutex.RUnlock()
	fake.getChannelByIDMutex.RLock()
	defer fake.getChannelByIDMutex.RUnlock()
	fake.getChannelModeratorsMutex.RLock()
	defer fake.getChannelModeratorsMutex.RUnlock()
	fake.getGameByIDMutex.RLock()
	defer fake.getGameByIDMutex.RUnlock()
	fake.getGameByNameMutex.RLock()
	defer fake.getGameByNameMutex.RUnlock()
	fake.getGameLinksMutex.RLock()
	defer fake.getGameLinksMutex.RUnlock()
	fake.getStreamByUserIDMutex.RLock()
	defer fake.getStreamByUserIDMutex.RUnlock()
	fake.getStreamByUsernameMutex.RLock()
	defer fake.getStreamByUsernameMutex.RUnlock()
	fake.getUserByIDMutex.RLock()
	defer fake.getUserByIDMutex.RUnlock()
	fake.getUserByTokenMutex.RLock()
	defer fake.getUserByTokenMutex.RUnlock()
	fake.getUserByUsernameMutex.RLock()
	defer fake.getUserByUsernameMutex.RUnlock()
	fake.modifyChannelMutex.RLock()
	defer fake.modifyChannelMutex.RUnlock()
	fake.searchCategoriesMutex.RLock()
	defer fake.searchCategoriesMutex.RUnlock()
	fake.setChatColorMutex.RLock()
	defer fake.setChatColorMutex.RUnlock()
	fake.unbanMutex.RLock()
	defer fake.unbanMutex.RUnlock()
	fake.updateChatSettingsMutex.RLock()
	defer fake.updateChatSettingsMutex.RUnlock()
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ twitch.API = new(FakeAPI)
