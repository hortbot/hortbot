// Code generated by counterfeiter. DO NOT EDIT.
package twitchfakes

import (
	"context"
	"sync"

	"github.com/hortbot/hortbot/internal/pkg/apiclient/twitch"
	"golang.org/x/oauth2"
)

type FakeAPI struct {
	AuthCodeURLStub        func(string, ...string) string
	authCodeURLMutex       sync.RWMutex
	authCodeURLArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	authCodeURLReturns struct {
		result1 string
	}
	authCodeURLReturnsOnCall map[int]struct {
		result1 string
	}
	ExchangeStub        func(context.Context, string) (*oauth2.Token, error)
	exchangeMutex       sync.RWMutex
	exchangeArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	exchangeReturns struct {
		result1 *oauth2.Token
		result2 error
	}
	exchangeReturnsOnCall map[int]struct {
		result1 *oauth2.Token
		result2 error
	}
	GetChannelByIDStub        func(context.Context, int64) (*twitch.Channel, error)
	getChannelByIDMutex       sync.RWMutex
	getChannelByIDArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	getChannelByIDReturns struct {
		result1 *twitch.Channel
		result2 error
	}
	getChannelByIDReturnsOnCall map[int]struct {
		result1 *twitch.Channel
		result2 error
	}
	GetChannelModeratorsStub        func(context.Context, int64, *oauth2.Token) ([]*twitch.ChannelModerator, *oauth2.Token, error)
	getChannelModeratorsMutex       sync.RWMutex
	getChannelModeratorsArgsForCall []struct {
		arg1 context.Context
		arg2 int64
		arg3 *oauth2.Token
	}
	getChannelModeratorsReturns struct {
		result1 []*twitch.ChannelModerator
		result2 *oauth2.Token
		result3 error
	}
	getChannelModeratorsReturnsOnCall map[int]struct {
		result1 []*twitch.ChannelModerator
		result2 *oauth2.Token
		result3 error
	}
	GetChattersStub        func(context.Context, string) (*twitch.Chatters, error)
	getChattersMutex       sync.RWMutex
	getChattersArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getChattersReturns struct {
		result1 *twitch.Chatters
		result2 error
	}
	getChattersReturnsOnCall map[int]struct {
		result1 *twitch.Chatters
		result2 error
	}
	GetGameByIDStub        func(context.Context, int64) (*twitch.Category, error)
	getGameByIDMutex       sync.RWMutex
	getGameByIDArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	getGameByIDReturns struct {
		result1 *twitch.Category
		result2 error
	}
	getGameByIDReturnsOnCall map[int]struct {
		result1 *twitch.Category
		result2 error
	}
	GetGameByNameStub        func(context.Context, string) (*twitch.Category, error)
	getGameByNameMutex       sync.RWMutex
	getGameByNameArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getGameByNameReturns struct {
		result1 *twitch.Category
		result2 error
	}
	getGameByNameReturnsOnCall map[int]struct {
		result1 *twitch.Category
		result2 error
	}
	GetGameLinksStub        func(context.Context, int64) ([]twitch.GameLink, error)
	getGameLinksMutex       sync.RWMutex
	getGameLinksArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	getGameLinksReturns struct {
		result1 []twitch.GameLink
		result2 error
	}
	getGameLinksReturnsOnCall map[int]struct {
		result1 []twitch.GameLink
		result2 error
	}
	GetStreamByUserIDStub        func(context.Context, int64) (*twitch.Stream, error)
	getStreamByUserIDMutex       sync.RWMutex
	getStreamByUserIDArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	getStreamByUserIDReturns struct {
		result1 *twitch.Stream
		result2 error
	}
	getStreamByUserIDReturnsOnCall map[int]struct {
		result1 *twitch.Stream
		result2 error
	}
	GetStreamByUsernameStub        func(context.Context, string) (*twitch.Stream, error)
	getStreamByUsernameMutex       sync.RWMutex
	getStreamByUsernameArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getStreamByUsernameReturns struct {
		result1 *twitch.Stream
		result2 error
	}
	getStreamByUsernameReturnsOnCall map[int]struct {
		result1 *twitch.Stream
		result2 error
	}
	GetUserByIDStub        func(context.Context, int64) (*twitch.User, error)
	getUserByIDMutex       sync.RWMutex
	getUserByIDArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	getUserByIDReturns struct {
		result1 *twitch.User
		result2 error
	}
	getUserByIDReturnsOnCall map[int]struct {
		result1 *twitch.User
		result2 error
	}
	GetUserByTokenStub        func(context.Context, *oauth2.Token) (*twitch.User, *oauth2.Token, error)
	getUserByTokenMutex       sync.RWMutex
	getUserByTokenArgsForCall []struct {
		arg1 context.Context
		arg2 *oauth2.Token
	}
	getUserByTokenReturns struct {
		result1 *twitch.User
		result2 *oauth2.Token
		result3 error
	}
	getUserByTokenReturnsOnCall map[int]struct {
		result1 *twitch.User
		result2 *oauth2.Token
		result3 error
	}
	GetUserByUsernameStub        func(context.Context, string) (*twitch.User, error)
	getUserByUsernameMutex       sync.RWMutex
	getUserByUsernameArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getUserByUsernameReturns struct {
		result1 *twitch.User
		result2 error
	}
	getUserByUsernameReturnsOnCall map[int]struct {
		result1 *twitch.User
		result2 error
	}
	ModifyChannelStub        func(context.Context, int64, *oauth2.Token, *string, *int64) (*oauth2.Token, error)
	modifyChannelMutex       sync.RWMutex
	modifyChannelArgsForCall []struct {
		arg1 context.Context
		arg2 int64
		arg3 *oauth2.Token
		arg4 *string
		arg5 *int64
	}
	modifyChannelReturns struct {
		result1 *oauth2.Token
		result2 error
	}
	modifyChannelReturnsOnCall map[int]struct {
		result1 *oauth2.Token
		result2 error
	}
	SearchCategoriesStub        func(context.Context, string) ([]*twitch.Category, error)
	searchCategoriesMutex       sync.RWMutex
	searchCategoriesArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	searchCategoriesReturns struct {
		result1 []*twitch.Category
		result2 error
	}
	searchCategoriesReturnsOnCall map[int]struct {
		result1 []*twitch.Category
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPI) AuthCodeURL(arg1 string, arg2 ...string) string {
	fake.authCodeURLMutex.Lock()
	ret, specificReturn := fake.authCodeURLReturnsOnCall[len(fake.authCodeURLArgsForCall)]
	fake.authCodeURLArgsForCall = append(fake.authCodeURLArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2})
	stub := fake.AuthCodeURLStub
	fakeReturns := fake.authCodeURLReturns
	fake.recordInvocation("AuthCodeURL", []interface{}{arg1, arg2})
	fake.authCodeURLMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAPI) AuthCodeURLCallCount() int {
	fake.authCodeURLMutex.RLock()
	defer fake.authCodeURLMutex.RUnlock()
	return len(fake.authCodeURLArgsForCall)
}

func (fake *FakeAPI) AuthCodeURLCalls(stub func(string, ...string) string) {
	fake.authCodeURLMutex.Lock()
	defer fake.authCodeURLMutex.Unlock()
	fake.AuthCodeURLStub = stub
}

func (fake *FakeAPI) AuthCodeURLArgsForCall(i int) (string, []string) {
	fake.authCodeURLMutex.RLock()
	defer fake.authCodeURLMutex.RUnlock()
	argsForCall := fake.authCodeURLArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) AuthCodeURLReturns(result1 string) {
	fake.authCodeURLMutex.Lock()
	defer fake.authCodeURLMutex.Unlock()
	fake.AuthCodeURLStub = nil
	fake.authCodeURLReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeAPI) AuthCodeURLReturnsOnCall(i int, result1 string) {
	fake.authCodeURLMutex.Lock()
	defer fake.authCodeURLMutex.Unlock()
	fake.AuthCodeURLStub = nil
	if fake.authCodeURLReturnsOnCall == nil {
		fake.authCodeURLReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.authCodeURLReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeAPI) Exchange(arg1 context.Context, arg2 string) (*oauth2.Token, error) {
	fake.exchangeMutex.Lock()
	ret, specificReturn := fake.exchangeReturnsOnCall[len(fake.exchangeArgsForCall)]
	fake.exchangeArgsForCall = append(fake.exchangeArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ExchangeStub
	fakeReturns := fake.exchangeReturns
	fake.recordInvocation("Exchange", []interface{}{arg1, arg2})
	fake.exchangeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) ExchangeCallCount() int {
	fake.exchangeMutex.RLock()
	defer fake.exchangeMutex.RUnlock()
	return len(fake.exchangeArgsForCall)
}

func (fake *FakeAPI) ExchangeCalls(stub func(context.Context, string) (*oauth2.Token, error)) {
	fake.exchangeMutex.Lock()
	defer fake.exchangeMutex.Unlock()
	fake.ExchangeStub = stub
}

func (fake *FakeAPI) ExchangeArgsForCall(i int) (context.Context, string) {
	fake.exchangeMutex.RLock()
	defer fake.exchangeMutex.RUnlock()
	argsForCall := fake.exchangeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) ExchangeReturns(result1 *oauth2.Token, result2 error) {
	fake.exchangeMutex.Lock()
	defer fake.exchangeMutex.Unlock()
	fake.ExchangeStub = nil
	fake.exchangeReturns = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ExchangeReturnsOnCall(i int, result1 *oauth2.Token, result2 error) {
	fake.exchangeMutex.Lock()
	defer fake.exchangeMutex.Unlock()
	fake.ExchangeStub = nil
	if fake.exchangeReturnsOnCall == nil {
		fake.exchangeReturnsOnCall = make(map[int]struct {
			result1 *oauth2.Token
			result2 error
		})
	}
	fake.exchangeReturnsOnCall[i] = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetChannelByID(arg1 context.Context, arg2 int64) (*twitch.Channel, error) {
	fake.getChannelByIDMutex.Lock()
	ret, specificReturn := fake.getChannelByIDReturnsOnCall[len(fake.getChannelByIDArgsForCall)]
	fake.getChannelByIDArgsForCall = append(fake.getChannelByIDArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.GetChannelByIDStub
	fakeReturns := fake.getChannelByIDReturns
	fake.recordInvocation("GetChannelByID", []interface{}{arg1, arg2})
	fake.getChannelByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetChannelByIDCallCount() int {
	fake.getChannelByIDMutex.RLock()
	defer fake.getChannelByIDMutex.RUnlock()
	return len(fake.getChannelByIDArgsForCall)
}

func (fake *FakeAPI) GetChannelByIDCalls(stub func(context.Context, int64) (*twitch.Channel, error)) {
	fake.getChannelByIDMutex.Lock()
	defer fake.getChannelByIDMutex.Unlock()
	fake.GetChannelByIDStub = stub
}

func (fake *FakeAPI) GetChannelByIDArgsForCall(i int) (context.Context, int64) {
	fake.getChannelByIDMutex.RLock()
	defer fake.getChannelByIDMutex.RUnlock()
	argsForCall := fake.getChannelByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetChannelByIDReturns(result1 *twitch.Channel, result2 error) {
	fake.getChannelByIDMutex.Lock()
	defer fake.getChannelByIDMutex.Unlock()
	fake.GetChannelByIDStub = nil
	fake.getChannelByIDReturns = struct {
		result1 *twitch.Channel
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetChannelByIDReturnsOnCall(i int, result1 *twitch.Channel, result2 error) {
	fake.getChannelByIDMutex.Lock()
	defer fake.getChannelByIDMutex.Unlock()
	fake.GetChannelByIDStub = nil
	if fake.getChannelByIDReturnsOnCall == nil {
		fake.getChannelByIDReturnsOnCall = make(map[int]struct {
			result1 *twitch.Channel
			result2 error
		})
	}
	fake.getChannelByIDReturnsOnCall[i] = struct {
		result1 *twitch.Channel
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetChannelModerators(arg1 context.Context, arg2 int64, arg3 *oauth2.Token) ([]*twitch.ChannelModerator, *oauth2.Token, error) {
	fake.getChannelModeratorsMutex.Lock()
	ret, specificReturn := fake.getChannelModeratorsReturnsOnCall[len(fake.getChannelModeratorsArgsForCall)]
	fake.getChannelModeratorsArgsForCall = append(fake.getChannelModeratorsArgsForCall, struct {
		arg1 context.Context
		arg2 int64
		arg3 *oauth2.Token
	}{arg1, arg2, arg3})
	stub := fake.GetChannelModeratorsStub
	fakeReturns := fake.getChannelModeratorsReturns
	fake.recordInvocation("GetChannelModerators", []interface{}{arg1, arg2, arg3})
	fake.getChannelModeratorsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAPI) GetChannelModeratorsCallCount() int {
	fake.getChannelModeratorsMutex.RLock()
	defer fake.getChannelModeratorsMutex.RUnlock()
	return len(fake.getChannelModeratorsArgsForCall)
}

func (fake *FakeAPI) GetChannelModeratorsCalls(stub func(context.Context, int64, *oauth2.Token) ([]*twitch.ChannelModerator, *oauth2.Token, error)) {
	fake.getChannelModeratorsMutex.Lock()
	defer fake.getChannelModeratorsMutex.Unlock()
	fake.GetChannelModeratorsStub = stub
}

func (fake *FakeAPI) GetChannelModeratorsArgsForCall(i int) (context.Context, int64, *oauth2.Token) {
	fake.getChannelModeratorsMutex.RLock()
	defer fake.getChannelModeratorsMutex.RUnlock()
	argsForCall := fake.getChannelModeratorsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAPI) GetChannelModeratorsReturns(result1 []*twitch.ChannelModerator, result2 *oauth2.Token, result3 error) {
	fake.getChannelModeratorsMutex.Lock()
	defer fake.getChannelModeratorsMutex.Unlock()
	fake.GetChannelModeratorsStub = nil
	fake.getChannelModeratorsReturns = struct {
		result1 []*twitch.ChannelModerator
		result2 *oauth2.Token
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAPI) GetChannelModeratorsReturnsOnCall(i int, result1 []*twitch.ChannelModerator, result2 *oauth2.Token, result3 error) {
	fake.getChannelModeratorsMutex.Lock()
	defer fake.getChannelModeratorsMutex.Unlock()
	fake.GetChannelModeratorsStub = nil
	if fake.getChannelModeratorsReturnsOnCall == nil {
		fake.getChannelModeratorsReturnsOnCall = make(map[int]struct {
			result1 []*twitch.ChannelModerator
			result2 *oauth2.Token
			result3 error
		})
	}
	fake.getChannelModeratorsReturnsOnCall[i] = struct {
		result1 []*twitch.ChannelModerator
		result2 *oauth2.Token
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAPI) GetChatters(arg1 context.Context, arg2 string) (*twitch.Chatters, error) {
	fake.getChattersMutex.Lock()
	ret, specificReturn := fake.getChattersReturnsOnCall[len(fake.getChattersArgsForCall)]
	fake.getChattersArgsForCall = append(fake.getChattersArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetChattersStub
	fakeReturns := fake.getChattersReturns
	fake.recordInvocation("GetChatters", []interface{}{arg1, arg2})
	fake.getChattersMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetChattersCallCount() int {
	fake.getChattersMutex.RLock()
	defer fake.getChattersMutex.RUnlock()
	return len(fake.getChattersArgsForCall)
}

func (fake *FakeAPI) GetChattersCalls(stub func(context.Context, string) (*twitch.Chatters, error)) {
	fake.getChattersMutex.Lock()
	defer fake.getChattersMutex.Unlock()
	fake.GetChattersStub = stub
}

func (fake *FakeAPI) GetChattersArgsForCall(i int) (context.Context, string) {
	fake.getChattersMutex.RLock()
	defer fake.getChattersMutex.RUnlock()
	argsForCall := fake.getChattersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetChattersReturns(result1 *twitch.Chatters, result2 error) {
	fake.getChattersMutex.Lock()
	defer fake.getChattersMutex.Unlock()
	fake.GetChattersStub = nil
	fake.getChattersReturns = struct {
		result1 *twitch.Chatters
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetChattersReturnsOnCall(i int, result1 *twitch.Chatters, result2 error) {
	fake.getChattersMutex.Lock()
	defer fake.getChattersMutex.Unlock()
	fake.GetChattersStub = nil
	if fake.getChattersReturnsOnCall == nil {
		fake.getChattersReturnsOnCall = make(map[int]struct {
			result1 *twitch.Chatters
			result2 error
		})
	}
	fake.getChattersReturnsOnCall[i] = struct {
		result1 *twitch.Chatters
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetGameByID(arg1 context.Context, arg2 int64) (*twitch.Category, error) {
	fake.getGameByIDMutex.Lock()
	ret, specificReturn := fake.getGameByIDReturnsOnCall[len(fake.getGameByIDArgsForCall)]
	fake.getGameByIDArgsForCall = append(fake.getGameByIDArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.GetGameByIDStub
	fakeReturns := fake.getGameByIDReturns
	fake.recordInvocation("GetGameByID", []interface{}{arg1, arg2})
	fake.getGameByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetGameByIDCallCount() int {
	fake.getGameByIDMutex.RLock()
	defer fake.getGameByIDMutex.RUnlock()
	return len(fake.getGameByIDArgsForCall)
}

func (fake *FakeAPI) GetGameByIDCalls(stub func(context.Context, int64) (*twitch.Category, error)) {
	fake.getGameByIDMutex.Lock()
	defer fake.getGameByIDMutex.Unlock()
	fake.GetGameByIDStub = stub
}

func (fake *FakeAPI) GetGameByIDArgsForCall(i int) (context.Context, int64) {
	fake.getGameByIDMutex.RLock()
	defer fake.getGameByIDMutex.RUnlock()
	argsForCall := fake.getGameByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetGameByIDReturns(result1 *twitch.Category, result2 error) {
	fake.getGameByIDMutex.Lock()
	defer fake.getGameByIDMutex.Unlock()
	fake.GetGameByIDStub = nil
	fake.getGameByIDReturns = struct {
		result1 *twitch.Category
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetGameByIDReturnsOnCall(i int, result1 *twitch.Category, result2 error) {
	fake.getGameByIDMutex.Lock()
	defer fake.getGameByIDMutex.Unlock()
	fake.GetGameByIDStub = nil
	if fake.getGameByIDReturnsOnCall == nil {
		fake.getGameByIDReturnsOnCall = make(map[int]struct {
			result1 *twitch.Category
			result2 error
		})
	}
	fake.getGameByIDReturnsOnCall[i] = struct {
		result1 *twitch.Category
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetGameByName(arg1 context.Context, arg2 string) (*twitch.Category, error) {
	fake.getGameByNameMutex.Lock()
	ret, specificReturn := fake.getGameByNameReturnsOnCall[len(fake.getGameByNameArgsForCall)]
	fake.getGameByNameArgsForCall = append(fake.getGameByNameArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetGameByNameStub
	fakeReturns := fake.getGameByNameReturns
	fake.recordInvocation("GetGameByName", []interface{}{arg1, arg2})
	fake.getGameByNameMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetGameByNameCallCount() int {
	fake.getGameByNameMutex.RLock()
	defer fake.getGameByNameMutex.RUnlock()
	return len(fake.getGameByNameArgsForCall)
}

func (fake *FakeAPI) GetGameByNameCalls(stub func(context.Context, string) (*twitch.Category, error)) {
	fake.getGameByNameMutex.Lock()
	defer fake.getGameByNameMutex.Unlock()
	fake.GetGameByNameStub = stub
}

func (fake *FakeAPI) GetGameByNameArgsForCall(i int) (context.Context, string) {
	fake.getGameByNameMutex.RLock()
	defer fake.getGameByNameMutex.RUnlock()
	argsForCall := fake.getGameByNameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetGameByNameReturns(result1 *twitch.Category, result2 error) {
	fake.getGameByNameMutex.Lock()
	defer fake.getGameByNameMutex.Unlock()
	fake.GetGameByNameStub = nil
	fake.getGameByNameReturns = struct {
		result1 *twitch.Category
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetGameByNameReturnsOnCall(i int, result1 *twitch.Category, result2 error) {
	fake.getGameByNameMutex.Lock()
	defer fake.getGameByNameMutex.Unlock()
	fake.GetGameByNameStub = nil
	if fake.getGameByNameReturnsOnCall == nil {
		fake.getGameByNameReturnsOnCall = make(map[int]struct {
			result1 *twitch.Category
			result2 error
		})
	}
	fake.getGameByNameReturnsOnCall[i] = struct {
		result1 *twitch.Category
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetGameLinks(arg1 context.Context, arg2 int64) ([]twitch.GameLink, error) {
	fake.getGameLinksMutex.Lock()
	ret, specificReturn := fake.getGameLinksReturnsOnCall[len(fake.getGameLinksArgsForCall)]
	fake.getGameLinksArgsForCall = append(fake.getGameLinksArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.GetGameLinksStub
	fakeReturns := fake.getGameLinksReturns
	fake.recordInvocation("GetGameLinks", []interface{}{arg1, arg2})
	fake.getGameLinksMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetGameLinksCallCount() int {
	fake.getGameLinksMutex.RLock()
	defer fake.getGameLinksMutex.RUnlock()
	return len(fake.getGameLinksArgsForCall)
}

func (fake *FakeAPI) GetGameLinksCalls(stub func(context.Context, int64) ([]twitch.GameLink, error)) {
	fake.getGameLinksMutex.Lock()
	defer fake.getGameLinksMutex.Unlock()
	fake.GetGameLinksStub = stub
}

func (fake *FakeAPI) GetGameLinksArgsForCall(i int) (context.Context, int64) {
	fake.getGameLinksMutex.RLock()
	defer fake.getGameLinksMutex.RUnlock()
	argsForCall := fake.getGameLinksArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetGameLinksReturns(result1 []twitch.GameLink, result2 error) {
	fake.getGameLinksMutex.Lock()
	defer fake.getGameLinksMutex.Unlock()
	fake.GetGameLinksStub = nil
	fake.getGameLinksReturns = struct {
		result1 []twitch.GameLink
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetGameLinksReturnsOnCall(i int, result1 []twitch.GameLink, result2 error) {
	fake.getGameLinksMutex.Lock()
	defer fake.getGameLinksMutex.Unlock()
	fake.GetGameLinksStub = nil
	if fake.getGameLinksReturnsOnCall == nil {
		fake.getGameLinksReturnsOnCall = make(map[int]struct {
			result1 []twitch.GameLink
			result2 error
		})
	}
	fake.getGameLinksReturnsOnCall[i] = struct {
		result1 []twitch.GameLink
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetStreamByUserID(arg1 context.Context, arg2 int64) (*twitch.Stream, error) {
	fake.getStreamByUserIDMutex.Lock()
	ret, specificReturn := fake.getStreamByUserIDReturnsOnCall[len(fake.getStreamByUserIDArgsForCall)]
	fake.getStreamByUserIDArgsForCall = append(fake.getStreamByUserIDArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.GetStreamByUserIDStub
	fakeReturns := fake.getStreamByUserIDReturns
	fake.recordInvocation("GetStreamByUserID", []interface{}{arg1, arg2})
	fake.getStreamByUserIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetStreamByUserIDCallCount() int {
	fake.getStreamByUserIDMutex.RLock()
	defer fake.getStreamByUserIDMutex.RUnlock()
	return len(fake.getStreamByUserIDArgsForCall)
}

func (fake *FakeAPI) GetStreamByUserIDCalls(stub func(context.Context, int64) (*twitch.Stream, error)) {
	fake.getStreamByUserIDMutex.Lock()
	defer fake.getStreamByUserIDMutex.Unlock()
	fake.GetStreamByUserIDStub = stub
}

func (fake *FakeAPI) GetStreamByUserIDArgsForCall(i int) (context.Context, int64) {
	fake.getStreamByUserIDMutex.RLock()
	defer fake.getStreamByUserIDMutex.RUnlock()
	argsForCall := fake.getStreamByUserIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetStreamByUserIDReturns(result1 *twitch.Stream, result2 error) {
	fake.getStreamByUserIDMutex.Lock()
	defer fake.getStreamByUserIDMutex.Unlock()
	fake.GetStreamByUserIDStub = nil
	fake.getStreamByUserIDReturns = struct {
		result1 *twitch.Stream
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetStreamByUserIDReturnsOnCall(i int, result1 *twitch.Stream, result2 error) {
	fake.getStreamByUserIDMutex.Lock()
	defer fake.getStreamByUserIDMutex.Unlock()
	fake.GetStreamByUserIDStub = nil
	if fake.getStreamByUserIDReturnsOnCall == nil {
		fake.getStreamByUserIDReturnsOnCall = make(map[int]struct {
			result1 *twitch.Stream
			result2 error
		})
	}
	fake.getStreamByUserIDReturnsOnCall[i] = struct {
		result1 *twitch.Stream
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetStreamByUsername(arg1 context.Context, arg2 string) (*twitch.Stream, error) {
	fake.getStreamByUsernameMutex.Lock()
	ret, specificReturn := fake.getStreamByUsernameReturnsOnCall[len(fake.getStreamByUsernameArgsForCall)]
	fake.getStreamByUsernameArgsForCall = append(fake.getStreamByUsernameArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetStreamByUsernameStub
	fakeReturns := fake.getStreamByUsernameReturns
	fake.recordInvocation("GetStreamByUsername", []interface{}{arg1, arg2})
	fake.getStreamByUsernameMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetStreamByUsernameCallCount() int {
	fake.getStreamByUsernameMutex.RLock()
	defer fake.getStreamByUsernameMutex.RUnlock()
	return len(fake.getStreamByUsernameArgsForCall)
}

func (fake *FakeAPI) GetStreamByUsernameCalls(stub func(context.Context, string) (*twitch.Stream, error)) {
	fake.getStreamByUsernameMutex.Lock()
	defer fake.getStreamByUsernameMutex.Unlock()
	fake.GetStreamByUsernameStub = stub
}

func (fake *FakeAPI) GetStreamByUsernameArgsForCall(i int) (context.Context, string) {
	fake.getStreamByUsernameMutex.RLock()
	defer fake.getStreamByUsernameMutex.RUnlock()
	argsForCall := fake.getStreamByUsernameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetStreamByUsernameReturns(result1 *twitch.Stream, result2 error) {
	fake.getStreamByUsernameMutex.Lock()
	defer fake.getStreamByUsernameMutex.Unlock()
	fake.GetStreamByUsernameStub = nil
	fake.getStreamByUsernameReturns = struct {
		result1 *twitch.Stream
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetStreamByUsernameReturnsOnCall(i int, result1 *twitch.Stream, result2 error) {
	fake.getStreamByUsernameMutex.Lock()
	defer fake.getStreamByUsernameMutex.Unlock()
	fake.GetStreamByUsernameStub = nil
	if fake.getStreamByUsernameReturnsOnCall == nil {
		fake.getStreamByUsernameReturnsOnCall = make(map[int]struct {
			result1 *twitch.Stream
			result2 error
		})
	}
	fake.getStreamByUsernameReturnsOnCall[i] = struct {
		result1 *twitch.Stream
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetUserByID(arg1 context.Context, arg2 int64) (*twitch.User, error) {
	fake.getUserByIDMutex.Lock()
	ret, specificReturn := fake.getUserByIDReturnsOnCall[len(fake.getUserByIDArgsForCall)]
	fake.getUserByIDArgsForCall = append(fake.getUserByIDArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.GetUserByIDStub
	fakeReturns := fake.getUserByIDReturns
	fake.recordInvocation("GetUserByID", []interface{}{arg1, arg2})
	fake.getUserByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetUserByIDCallCount() int {
	fake.getUserByIDMutex.RLock()
	defer fake.getUserByIDMutex.RUnlock()
	return len(fake.getUserByIDArgsForCall)
}

func (fake *FakeAPI) GetUserByIDCalls(stub func(context.Context, int64) (*twitch.User, error)) {
	fake.getUserByIDMutex.Lock()
	defer fake.getUserByIDMutex.Unlock()
	fake.GetUserByIDStub = stub
}

func (fake *FakeAPI) GetUserByIDArgsForCall(i int) (context.Context, int64) {
	fake.getUserByIDMutex.RLock()
	defer fake.getUserByIDMutex.RUnlock()
	argsForCall := fake.getUserByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetUserByIDReturns(result1 *twitch.User, result2 error) {
	fake.getUserByIDMutex.Lock()
	defer fake.getUserByIDMutex.Unlock()
	fake.GetUserByIDStub = nil
	fake.getUserByIDReturns = struct {
		result1 *twitch.User
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetUserByIDReturnsOnCall(i int, result1 *twitch.User, result2 error) {
	fake.getUserByIDMutex.Lock()
	defer fake.getUserByIDMutex.Unlock()
	fake.GetUserByIDStub = nil
	if fake.getUserByIDReturnsOnCall == nil {
		fake.getUserByIDReturnsOnCall = make(map[int]struct {
			result1 *twitch.User
			result2 error
		})
	}
	fake.getUserByIDReturnsOnCall[i] = struct {
		result1 *twitch.User
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetUserByToken(arg1 context.Context, arg2 *oauth2.Token) (*twitch.User, *oauth2.Token, error) {
	fake.getUserByTokenMutex.Lock()
	ret, specificReturn := fake.getUserByTokenReturnsOnCall[len(fake.getUserByTokenArgsForCall)]
	fake.getUserByTokenArgsForCall = append(fake.getUserByTokenArgsForCall, struct {
		arg1 context.Context
		arg2 *oauth2.Token
	}{arg1, arg2})
	stub := fake.GetUserByTokenStub
	fakeReturns := fake.getUserByTokenReturns
	fake.recordInvocation("GetUserByToken", []interface{}{arg1, arg2})
	fake.getUserByTokenMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAPI) GetUserByTokenCallCount() int {
	fake.getUserByTokenMutex.RLock()
	defer fake.getUserByTokenMutex.RUnlock()
	return len(fake.getUserByTokenArgsForCall)
}

func (fake *FakeAPI) GetUserByTokenCalls(stub func(context.Context, *oauth2.Token) (*twitch.User, *oauth2.Token, error)) {
	fake.getUserByTokenMutex.Lock()
	defer fake.getUserByTokenMutex.Unlock()
	fake.GetUserByTokenStub = stub
}

func (fake *FakeAPI) GetUserByTokenArgsForCall(i int) (context.Context, *oauth2.Token) {
	fake.getUserByTokenMutex.RLock()
	defer fake.getUserByTokenMutex.RUnlock()
	argsForCall := fake.getUserByTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetUserByTokenReturns(result1 *twitch.User, result2 *oauth2.Token, result3 error) {
	fake.getUserByTokenMutex.Lock()
	defer fake.getUserByTokenMutex.Unlock()
	fake.GetUserByTokenStub = nil
	fake.getUserByTokenReturns = struct {
		result1 *twitch.User
		result2 *oauth2.Token
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAPI) GetUserByTokenReturnsOnCall(i int, result1 *twitch.User, result2 *oauth2.Token, result3 error) {
	fake.getUserByTokenMutex.Lock()
	defer fake.getUserByTokenMutex.Unlock()
	fake.GetUserByTokenStub = nil
	if fake.getUserByTokenReturnsOnCall == nil {
		fake.getUserByTokenReturnsOnCall = make(map[int]struct {
			result1 *twitch.User
			result2 *oauth2.Token
			result3 error
		})
	}
	fake.getUserByTokenReturnsOnCall[i] = struct {
		result1 *twitch.User
		result2 *oauth2.Token
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAPI) GetUserByUsername(arg1 context.Context, arg2 string) (*twitch.User, error) {
	fake.getUserByUsernameMutex.Lock()
	ret, specificReturn := fake.getUserByUsernameReturnsOnCall[len(fake.getUserByUsernameArgsForCall)]
	fake.getUserByUsernameArgsForCall = append(fake.getUserByUsernameArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetUserByUsernameStub
	fakeReturns := fake.getUserByUsernameReturns
	fake.recordInvocation("GetUserByUsername", []interface{}{arg1, arg2})
	fake.getUserByUsernameMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetUserByUsernameCallCount() int {
	fake.getUserByUsernameMutex.RLock()
	defer fake.getUserByUsernameMutex.RUnlock()
	return len(fake.getUserByUsernameArgsForCall)
}

func (fake *FakeAPI) GetUserByUsernameCalls(stub func(context.Context, string) (*twitch.User, error)) {
	fake.getUserByUsernameMutex.Lock()
	defer fake.getUserByUsernameMutex.Unlock()
	fake.GetUserByUsernameStub = stub
}

func (fake *FakeAPI) GetUserByUsernameArgsForCall(i int) (context.Context, string) {
	fake.getUserByUsernameMutex.RLock()
	defer fake.getUserByUsernameMutex.RUnlock()
	argsForCall := fake.getUserByUsernameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetUserByUsernameReturns(result1 *twitch.User, result2 error) {
	fake.getUserByUsernameMutex.Lock()
	defer fake.getUserByUsernameMutex.Unlock()
	fake.GetUserByUsernameStub = nil
	fake.getUserByUsernameReturns = struct {
		result1 *twitch.User
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetUserByUsernameReturnsOnCall(i int, result1 *twitch.User, result2 error) {
	fake.getUserByUsernameMutex.Lock()
	defer fake.getUserByUsernameMutex.Unlock()
	fake.GetUserByUsernameStub = nil
	if fake.getUserByUsernameReturnsOnCall == nil {
		fake.getUserByUsernameReturnsOnCall = make(map[int]struct {
			result1 *twitch.User
			result2 error
		})
	}
	fake.getUserByUsernameReturnsOnCall[i] = struct {
		result1 *twitch.User
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ModifyChannel(arg1 context.Context, arg2 int64, arg3 *oauth2.Token, arg4 *string, arg5 *int64) (*oauth2.Token, error) {
	fake.modifyChannelMutex.Lock()
	ret, specificReturn := fake.modifyChannelReturnsOnCall[len(fake.modifyChannelArgsForCall)]
	fake.modifyChannelArgsForCall = append(fake.modifyChannelArgsForCall, struct {
		arg1 context.Context
		arg2 int64
		arg3 *oauth2.Token
		arg4 *string
		arg5 *int64
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.ModifyChannelStub
	fakeReturns := fake.modifyChannelReturns
	fake.recordInvocation("ModifyChannel", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.modifyChannelMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) ModifyChannelCallCount() int {
	fake.modifyChannelMutex.RLock()
	defer fake.modifyChannelMutex.RUnlock()
	return len(fake.modifyChannelArgsForCall)
}

func (fake *FakeAPI) ModifyChannelCalls(stub func(context.Context, int64, *oauth2.Token, *string, *int64) (*oauth2.Token, error)) {
	fake.modifyChannelMutex.Lock()
	defer fake.modifyChannelMutex.Unlock()
	fake.ModifyChannelStub = stub
}

func (fake *FakeAPI) ModifyChannelArgsForCall(i int) (context.Context, int64, *oauth2.Token, *string, *int64) {
	fake.modifyChannelMutex.RLock()
	defer fake.modifyChannelMutex.RUnlock()
	argsForCall := fake.modifyChannelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeAPI) ModifyChannelReturns(result1 *oauth2.Token, result2 error) {
	fake.modifyChannelMutex.Lock()
	defer fake.modifyChannelMutex.Unlock()
	fake.ModifyChannelStub = nil
	fake.modifyChannelReturns = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ModifyChannelReturnsOnCall(i int, result1 *oauth2.Token, result2 error) {
	fake.modifyChannelMutex.Lock()
	defer fake.modifyChannelMutex.Unlock()
	fake.ModifyChannelStub = nil
	if fake.modifyChannelReturnsOnCall == nil {
		fake.modifyChannelReturnsOnCall = make(map[int]struct {
			result1 *oauth2.Token
			result2 error
		})
	}
	fake.modifyChannelReturnsOnCall[i] = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) SearchCategories(arg1 context.Context, arg2 string) ([]*twitch.Category, error) {
	fake.searchCategoriesMutex.Lock()
	ret, specificReturn := fake.searchCategoriesReturnsOnCall[len(fake.searchCategoriesArgsForCall)]
	fake.searchCategoriesArgsForCall = append(fake.searchCategoriesArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.SearchCategoriesStub
	fakeReturns := fake.searchCategoriesReturns
	fake.recordInvocation("SearchCategories", []interface{}{arg1, arg2})
	fake.searchCategoriesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) SearchCategoriesCallCount() int {
	fake.searchCategoriesMutex.RLock()
	defer fake.searchCategoriesMutex.RUnlock()
	return len(fake.searchCategoriesArgsForCall)
}

func (fake *FakeAPI) SearchCategoriesCalls(stub func(context.Context, string) ([]*twitch.Category, error)) {
	fake.searchCategoriesMutex.Lock()
	defer fake.searchCategoriesMutex.Unlock()
	fake.SearchCategoriesStub = stub
}

func (fake *FakeAPI) SearchCategoriesArgsForCall(i int) (context.Context, string) {
	fake.searchCategoriesMutex.RLock()
	defer fake.searchCategoriesMutex.RUnlock()
	argsForCall := fake.searchCategoriesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) SearchCategoriesReturns(result1 []*twitch.Category, result2 error) {
	fake.searchCategoriesMutex.Lock()
	defer fake.searchCategoriesMutex.Unlock()
	fake.SearchCategoriesStub = nil
	fake.searchCategoriesReturns = struct {
		result1 []*twitch.Category
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) SearchCategoriesReturnsOnCall(i int, result1 []*twitch.Category, result2 error) {
	fake.searchCategoriesMutex.Lock()
	defer fake.searchCategoriesMutex.Unlock()
	fake.SearchCategoriesStub = nil
	if fake.searchCategoriesReturnsOnCall == nil {
		fake.searchCategoriesReturnsOnCall = make(map[int]struct {
			result1 []*twitch.Category
			result2 error
		})
	}
	fake.searchCategoriesReturnsOnCall[i] = struct {
		result1 []*twitch.Category
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.authCodeURLMutex.RLock()
	defer fake.authCodeURLMutex.RUnlock()
	fake.exchangeMutex.RLock()
	defer fake.exchangeMutex.RUnlock()
	fake.getChannelByIDMutex.RLock()
	defer fake.getChannelByIDMutex.RUnlock()
	fake.getChannelModeratorsMutex.RLock()
	defer fake.getChannelModeratorsMutex.RUnlock()
	fake.getChattersMutex.RLock()
	defer fake.getChattersMutex.RUnlock()
	fake.getGameByIDMutex.RLock()
	defer fake.getGameByIDMutex.RUnlock()
	fake.getGameByNameMutex.RLock()
	defer fake.getGameByNameMutex.RUnlock()
	fake.getGameLinksMutex.RLock()
	defer fake.getGameLinksMutex.RUnlock()
	fake.getStreamByUserIDMutex.RLock()
	defer fake.getStreamByUserIDMutex.RUnlock()
	fake.getStreamByUsernameMutex.RLock()
	defer fake.getStreamByUsernameMutex.RUnlock()
	fake.getUserByIDMutex.RLock()
	defer fake.getUserByIDMutex.RUnlock()
	fake.getUserByTokenMutex.RLock()
	defer fake.getUserByTokenMutex.RUnlock()
	fake.getUserByUsernameMutex.RLock()
	defer fake.getUserByUsernameMutex.RUnlock()
	fake.modifyChannelMutex.RLock()
	defer fake.modifyChannelMutex.RUnlock()
	fake.searchCategoriesMutex.RLock()
	defer fake.searchCategoriesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ twitch.API = new(FakeAPI)
