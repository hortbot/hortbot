// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package twitchmocks

import (
	"context"
	"sync"

	"github.com/hortbot/hortbot/internal/pkg/apiclient/twitch"
	"golang.org/x/oauth2"
)

// Ensure, that APIMock does implement twitch.API.
// If this is not the case, regenerate this file with moq.
var _ twitch.API = &APIMock{}

// APIMock is a mock implementation of twitch.API.
//
//	func TestSomethingThatUsesAPI(t *testing.T) {
//
//		// make and configure a mocked twitch.API
//		mockedAPI := &APIMock{
//			AnnounceFunc: func(ctx context.Context, broadcasterID int64, modID int64, modToken *oauth2.Token, message string, color string) (*oauth2.Token, error) {
//				panic("mock out the Announce method")
//			},
//			AuthCodeURLFunc: func(state string, scopes []string) string {
//				panic("mock out the AuthCodeURL method")
//			},
//			BanFunc: func(ctx context.Context, broadcasterID int64, modID int64, modToken *oauth2.Token, req *twitch.BanRequest) (*oauth2.Token, error) {
//				panic("mock out the Ban method")
//			},
//			ClearChatFunc: func(ctx context.Context, broadcasterID int64, modID int64, modToken *oauth2.Token) (*oauth2.Token, error) {
//				panic("mock out the ClearChat method")
//			},
//			DeleteChatMessageFunc: func(ctx context.Context, broadcasterID int64, modID int64, modToken *oauth2.Token, id string) (*oauth2.Token, error) {
//				panic("mock out the DeleteChatMessage method")
//			},
//			ExchangeFunc: func(ctx context.Context, code string) (*oauth2.Token, error) {
//				panic("mock out the Exchange method")
//			},
//			GetChannelByIDFunc: func(ctx context.Context, id int64) (*twitch.Channel, error) {
//				panic("mock out the GetChannelByID method")
//			},
//			GetChannelModeratorsFunc: func(ctx context.Context, id int64, userToken *oauth2.Token) ([]*twitch.ChannelModerator, *oauth2.Token, error) {
//				panic("mock out the GetChannelModerators method")
//			},
//			GetGameByIDFunc: func(ctx context.Context, id int64) (*twitch.Category, error) {
//				panic("mock out the GetGameByID method")
//			},
//			GetGameByNameFunc: func(ctx context.Context, name string) (*twitch.Category, error) {
//				panic("mock out the GetGameByName method")
//			},
//			GetGameLinksFunc: func(ctx context.Context, twitchCategory int64) ([]twitch.GameLink, error) {
//				panic("mock out the GetGameLinks method")
//			},
//			GetModeratedChannelsFunc: func(ctx context.Context, modID int64, modToken *oauth2.Token) ([]*twitch.ModeratedChannel, *oauth2.Token, error) {
//				panic("mock out the GetModeratedChannels method")
//			},
//			GetStreamByUserIDFunc: func(ctx context.Context, id int64) (*twitch.Stream, error) {
//				panic("mock out the GetStreamByUserID method")
//			},
//			GetStreamByUsernameFunc: func(ctx context.Context, username string) (*twitch.Stream, error) {
//				panic("mock out the GetStreamByUsername method")
//			},
//			GetUserByIDFunc: func(ctx context.Context, id int64) (*twitch.User, error) {
//				panic("mock out the GetUserByID method")
//			},
//			GetUserByTokenFunc: func(ctx context.Context, userToken *oauth2.Token) (*twitch.User, *oauth2.Token, error) {
//				panic("mock out the GetUserByToken method")
//			},
//			GetUserByUsernameFunc: func(ctx context.Context, username string) (*twitch.User, error) {
//				panic("mock out the GetUserByUsername method")
//			},
//			ModifyChannelFunc: func(ctx context.Context, broadcasterID int64, userToken *oauth2.Token, title *string, gameID *int64) (*oauth2.Token, error) {
//				panic("mock out the ModifyChannel method")
//			},
//			SearchCategoriesFunc: func(ctx context.Context, query string) ([]*twitch.Category, error) {
//				panic("mock out the SearchCategories method")
//			},
//			SendChatMessageFunc: func(ctx context.Context, broadcasterID int64, senderID int64, senderToken *oauth2.Token, message string) (*oauth2.Token, error) {
//				panic("mock out the SendChatMessage method")
//			},
//			SetChatColorFunc: func(ctx context.Context, userID int64, userToken *oauth2.Token, color string) (*oauth2.Token, error) {
//				panic("mock out the SetChatColor method")
//			},
//			UnbanFunc: func(ctx context.Context, broadcasterID int64, modID int64, modToken *oauth2.Token, userID int64) (*oauth2.Token, error) {
//				panic("mock out the Unban method")
//			},
//			UpdateChatSettingsFunc: func(ctx context.Context, broadcasterID int64, modID int64, modToken *oauth2.Token, patch *twitch.ChatSettingsPatch) (*oauth2.Token, error) {
//				panic("mock out the UpdateChatSettings method")
//			},
//			ValidateFunc: func(ctx context.Context, tok *oauth2.Token) (*twitch.Validation, *oauth2.Token, error) {
//				panic("mock out the Validate method")
//			},
//		}
//
//		// use mockedAPI in code that requires twitch.API
//		// and then make assertions.
//
//	}
type APIMock struct {
	// AnnounceFunc mocks the Announce method.
	AnnounceFunc func(ctx context.Context, broadcasterID int64, modID int64, modToken *oauth2.Token, message string, color string) (*oauth2.Token, error)

	// AuthCodeURLFunc mocks the AuthCodeURL method.
	AuthCodeURLFunc func(state string, scopes []string) string

	// BanFunc mocks the Ban method.
	BanFunc func(ctx context.Context, broadcasterID int64, modID int64, modToken *oauth2.Token, req *twitch.BanRequest) (*oauth2.Token, error)

	// ClearChatFunc mocks the ClearChat method.
	ClearChatFunc func(ctx context.Context, broadcasterID int64, modID int64, modToken *oauth2.Token) (*oauth2.Token, error)

	// DeleteChatMessageFunc mocks the DeleteChatMessage method.
	DeleteChatMessageFunc func(ctx context.Context, broadcasterID int64, modID int64, modToken *oauth2.Token, id string) (*oauth2.Token, error)

	// ExchangeFunc mocks the Exchange method.
	ExchangeFunc func(ctx context.Context, code string) (*oauth2.Token, error)

	// GetChannelByIDFunc mocks the GetChannelByID method.
	GetChannelByIDFunc func(ctx context.Context, id int64) (*twitch.Channel, error)

	// GetChannelModeratorsFunc mocks the GetChannelModerators method.
	GetChannelModeratorsFunc func(ctx context.Context, id int64, userToken *oauth2.Token) ([]*twitch.ChannelModerator, *oauth2.Token, error)

	// GetGameByIDFunc mocks the GetGameByID method.
	GetGameByIDFunc func(ctx context.Context, id int64) (*twitch.Category, error)

	// GetGameByNameFunc mocks the GetGameByName method.
	GetGameByNameFunc func(ctx context.Context, name string) (*twitch.Category, error)

	// GetGameLinksFunc mocks the GetGameLinks method.
	GetGameLinksFunc func(ctx context.Context, twitchCategory int64) ([]twitch.GameLink, error)

	// GetModeratedChannelsFunc mocks the GetModeratedChannels method.
	GetModeratedChannelsFunc func(ctx context.Context, modID int64, modToken *oauth2.Token) ([]*twitch.ModeratedChannel, *oauth2.Token, error)

	// GetStreamByUserIDFunc mocks the GetStreamByUserID method.
	GetStreamByUserIDFunc func(ctx context.Context, id int64) (*twitch.Stream, error)

	// GetStreamByUsernameFunc mocks the GetStreamByUsername method.
	GetStreamByUsernameFunc func(ctx context.Context, username string) (*twitch.Stream, error)

	// GetUserByIDFunc mocks the GetUserByID method.
	GetUserByIDFunc func(ctx context.Context, id int64) (*twitch.User, error)

	// GetUserByTokenFunc mocks the GetUserByToken method.
	GetUserByTokenFunc func(ctx context.Context, userToken *oauth2.Token) (*twitch.User, *oauth2.Token, error)

	// GetUserByUsernameFunc mocks the GetUserByUsername method.
	GetUserByUsernameFunc func(ctx context.Context, username string) (*twitch.User, error)

	// ModifyChannelFunc mocks the ModifyChannel method.
	ModifyChannelFunc func(ctx context.Context, broadcasterID int64, userToken *oauth2.Token, title *string, gameID *int64) (*oauth2.Token, error)

	// SearchCategoriesFunc mocks the SearchCategories method.
	SearchCategoriesFunc func(ctx context.Context, query string) ([]*twitch.Category, error)

	// SendChatMessageFunc mocks the SendChatMessage method.
	SendChatMessageFunc func(ctx context.Context, broadcasterID int64, senderID int64, senderToken *oauth2.Token, message string) (*oauth2.Token, error)

	// SetChatColorFunc mocks the SetChatColor method.
	SetChatColorFunc func(ctx context.Context, userID int64, userToken *oauth2.Token, color string) (*oauth2.Token, error)

	// UnbanFunc mocks the Unban method.
	UnbanFunc func(ctx context.Context, broadcasterID int64, modID int64, modToken *oauth2.Token, userID int64) (*oauth2.Token, error)

	// UpdateChatSettingsFunc mocks the UpdateChatSettings method.
	UpdateChatSettingsFunc func(ctx context.Context, broadcasterID int64, modID int64, modToken *oauth2.Token, patch *twitch.ChatSettingsPatch) (*oauth2.Token, error)

	// ValidateFunc mocks the Validate method.
	ValidateFunc func(ctx context.Context, tok *oauth2.Token) (*twitch.Validation, *oauth2.Token, error)

	// calls tracks calls to the methods.
	calls struct {
		// Announce holds details about calls to the Announce method.
		Announce []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BroadcasterID is the broadcasterID argument value.
			BroadcasterID int64
			// ModID is the modID argument value.
			ModID int64
			// ModToken is the modToken argument value.
			ModToken *oauth2.Token
			// Message is the message argument value.
			Message string
			// Color is the color argument value.
			Color string
		}
		// AuthCodeURL holds details about calls to the AuthCodeURL method.
		AuthCodeURL []struct {
			// State is the state argument value.
			State string
			// Scopes is the scopes argument value.
			Scopes []string
		}
		// Ban holds details about calls to the Ban method.
		Ban []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BroadcasterID is the broadcasterID argument value.
			BroadcasterID int64
			// ModID is the modID argument value.
			ModID int64
			// ModToken is the modToken argument value.
			ModToken *oauth2.Token
			// Req is the req argument value.
			Req *twitch.BanRequest
		}
		// ClearChat holds details about calls to the ClearChat method.
		ClearChat []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BroadcasterID is the broadcasterID argument value.
			BroadcasterID int64
			// ModID is the modID argument value.
			ModID int64
			// ModToken is the modToken argument value.
			ModToken *oauth2.Token
		}
		// DeleteChatMessage holds details about calls to the DeleteChatMessage method.
		DeleteChatMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BroadcasterID is the broadcasterID argument value.
			BroadcasterID int64
			// ModID is the modID argument value.
			ModID int64
			// ModToken is the modToken argument value.
			ModToken *oauth2.Token
			// ID is the id argument value.
			ID string
		}
		// Exchange holds details about calls to the Exchange method.
		Exchange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Code is the code argument value.
			Code string
		}
		// GetChannelByID holds details about calls to the GetChannelByID method.
		GetChannelByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetChannelModerators holds details about calls to the GetChannelModerators method.
		GetChannelModerators []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
			// UserToken is the userToken argument value.
			UserToken *oauth2.Token
		}
		// GetGameByID holds details about calls to the GetGameByID method.
		GetGameByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetGameByName holds details about calls to the GetGameByName method.
		GetGameByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// GetGameLinks holds details about calls to the GetGameLinks method.
		GetGameLinks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TwitchCategory is the twitchCategory argument value.
			TwitchCategory int64
		}
		// GetModeratedChannels holds details about calls to the GetModeratedChannels method.
		GetModeratedChannels []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ModID is the modID argument value.
			ModID int64
			// ModToken is the modToken argument value.
			ModToken *oauth2.Token
		}
		// GetStreamByUserID holds details about calls to the GetStreamByUserID method.
		GetStreamByUserID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetStreamByUsername holds details about calls to the GetStreamByUsername method.
		GetStreamByUsername []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
		}
		// GetUserByID holds details about calls to the GetUserByID method.
		GetUserByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetUserByToken holds details about calls to the GetUserByToken method.
		GetUserByToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserToken is the userToken argument value.
			UserToken *oauth2.Token
		}
		// GetUserByUsername holds details about calls to the GetUserByUsername method.
		GetUserByUsername []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
		}
		// ModifyChannel holds details about calls to the ModifyChannel method.
		ModifyChannel []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BroadcasterID is the broadcasterID argument value.
			BroadcasterID int64
			// UserToken is the userToken argument value.
			UserToken *oauth2.Token
			// Title is the title argument value.
			Title *string
			// GameID is the gameID argument value.
			GameID *int64
		}
		// SearchCategories holds details about calls to the SearchCategories method.
		SearchCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query string
		}
		// SendChatMessage holds details about calls to the SendChatMessage method.
		SendChatMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BroadcasterID is the broadcasterID argument value.
			BroadcasterID int64
			// SenderID is the senderID argument value.
			SenderID int64
			// SenderToken is the senderToken argument value.
			SenderToken *oauth2.Token
			// Message is the message argument value.
			Message string
		}
		// SetChatColor holds details about calls to the SetChatColor method.
		SetChatColor []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID int64
			// UserToken is the userToken argument value.
			UserToken *oauth2.Token
			// Color is the color argument value.
			Color string
		}
		// Unban holds details about calls to the Unban method.
		Unban []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BroadcasterID is the broadcasterID argument value.
			BroadcasterID int64
			// ModID is the modID argument value.
			ModID int64
			// ModToken is the modToken argument value.
			ModToken *oauth2.Token
			// UserID is the userID argument value.
			UserID int64
		}
		// UpdateChatSettings holds details about calls to the UpdateChatSettings method.
		UpdateChatSettings []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BroadcasterID is the broadcasterID argument value.
			BroadcasterID int64
			// ModID is the modID argument value.
			ModID int64
			// ModToken is the modToken argument value.
			ModToken *oauth2.Token
			// Patch is the patch argument value.
			Patch *twitch.ChatSettingsPatch
		}
		// Validate holds details about calls to the Validate method.
		Validate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tok is the tok argument value.
			Tok *oauth2.Token
		}
	}
	lockAnnounce             sync.RWMutex
	lockAuthCodeURL          sync.RWMutex
	lockBan                  sync.RWMutex
	lockClearChat            sync.RWMutex
	lockDeleteChatMessage    sync.RWMutex
	lockExchange             sync.RWMutex
	lockGetChannelByID       sync.RWMutex
	lockGetChannelModerators sync.RWMutex
	lockGetGameByID          sync.RWMutex
	lockGetGameByName        sync.RWMutex
	lockGetGameLinks         sync.RWMutex
	lockGetModeratedChannels sync.RWMutex
	lockGetStreamByUserID    sync.RWMutex
	lockGetStreamByUsername  sync.RWMutex
	lockGetUserByID          sync.RWMutex
	lockGetUserByToken       sync.RWMutex
	lockGetUserByUsername    sync.RWMutex
	lockModifyChannel        sync.RWMutex
	lockSearchCategories     sync.RWMutex
	lockSendChatMessage      sync.RWMutex
	lockSetChatColor         sync.RWMutex
	lockUnban                sync.RWMutex
	lockUpdateChatSettings   sync.RWMutex
	lockValidate             sync.RWMutex
}

// Announce calls AnnounceFunc.
func (mock *APIMock) Announce(ctx context.Context, broadcasterID int64, modID int64, modToken *oauth2.Token, message string, color string) (*oauth2.Token, error) {
	if mock.AnnounceFunc == nil {
		panic("APIMock.AnnounceFunc: method is nil but API.Announce was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		BroadcasterID int64
		ModID         int64
		ModToken      *oauth2.Token
		Message       string
		Color         string
	}{
		Ctx:           ctx,
		BroadcasterID: broadcasterID,
		ModID:         modID,
		ModToken:      modToken,
		Message:       message,
		Color:         color,
	}
	mock.lockAnnounce.Lock()
	mock.calls.Announce = append(mock.calls.Announce, callInfo)
	mock.lockAnnounce.Unlock()
	return mock.AnnounceFunc(ctx, broadcasterID, modID, modToken, message, color)
}

// AnnounceCalls gets all the calls that were made to Announce.
// Check the length with:
//
//	len(mockedAPI.AnnounceCalls())
func (mock *APIMock) AnnounceCalls() []struct {
	Ctx           context.Context
	BroadcasterID int64
	ModID         int64
	ModToken      *oauth2.Token
	Message       string
	Color         string
} {
	var calls []struct {
		Ctx           context.Context
		BroadcasterID int64
		ModID         int64
		ModToken      *oauth2.Token
		Message       string
		Color         string
	}
	mock.lockAnnounce.RLock()
	calls = mock.calls.Announce
	mock.lockAnnounce.RUnlock()
	return calls
}

// AuthCodeURL calls AuthCodeURLFunc.
func (mock *APIMock) AuthCodeURL(state string, scopes []string) string {
	if mock.AuthCodeURLFunc == nil {
		panic("APIMock.AuthCodeURLFunc: method is nil but API.AuthCodeURL was just called")
	}
	callInfo := struct {
		State  string
		Scopes []string
	}{
		State:  state,
		Scopes: scopes,
	}
	mock.lockAuthCodeURL.Lock()
	mock.calls.AuthCodeURL = append(mock.calls.AuthCodeURL, callInfo)
	mock.lockAuthCodeURL.Unlock()
	return mock.AuthCodeURLFunc(state, scopes)
}

// AuthCodeURLCalls gets all the calls that were made to AuthCodeURL.
// Check the length with:
//
//	len(mockedAPI.AuthCodeURLCalls())
func (mock *APIMock) AuthCodeURLCalls() []struct {
	State  string
	Scopes []string
} {
	var calls []struct {
		State  string
		Scopes []string
	}
	mock.lockAuthCodeURL.RLock()
	calls = mock.calls.AuthCodeURL
	mock.lockAuthCodeURL.RUnlock()
	return calls
}

// Ban calls BanFunc.
func (mock *APIMock) Ban(ctx context.Context, broadcasterID int64, modID int64, modToken *oauth2.Token, req *twitch.BanRequest) (*oauth2.Token, error) {
	if mock.BanFunc == nil {
		panic("APIMock.BanFunc: method is nil but API.Ban was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		BroadcasterID int64
		ModID         int64
		ModToken      *oauth2.Token
		Req           *twitch.BanRequest
	}{
		Ctx:           ctx,
		BroadcasterID: broadcasterID,
		ModID:         modID,
		ModToken:      modToken,
		Req:           req,
	}
	mock.lockBan.Lock()
	mock.calls.Ban = append(mock.calls.Ban, callInfo)
	mock.lockBan.Unlock()
	return mock.BanFunc(ctx, broadcasterID, modID, modToken, req)
}

// BanCalls gets all the calls that were made to Ban.
// Check the length with:
//
//	len(mockedAPI.BanCalls())
func (mock *APIMock) BanCalls() []struct {
	Ctx           context.Context
	BroadcasterID int64
	ModID         int64
	ModToken      *oauth2.Token
	Req           *twitch.BanRequest
} {
	var calls []struct {
		Ctx           context.Context
		BroadcasterID int64
		ModID         int64
		ModToken      *oauth2.Token
		Req           *twitch.BanRequest
	}
	mock.lockBan.RLock()
	calls = mock.calls.Ban
	mock.lockBan.RUnlock()
	return calls
}

// ClearChat calls ClearChatFunc.
func (mock *APIMock) ClearChat(ctx context.Context, broadcasterID int64, modID int64, modToken *oauth2.Token) (*oauth2.Token, error) {
	if mock.ClearChatFunc == nil {
		panic("APIMock.ClearChatFunc: method is nil but API.ClearChat was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		BroadcasterID int64
		ModID         int64
		ModToken      *oauth2.Token
	}{
		Ctx:           ctx,
		BroadcasterID: broadcasterID,
		ModID:         modID,
		ModToken:      modToken,
	}
	mock.lockClearChat.Lock()
	mock.calls.ClearChat = append(mock.calls.ClearChat, callInfo)
	mock.lockClearChat.Unlock()
	return mock.ClearChatFunc(ctx, broadcasterID, modID, modToken)
}

// ClearChatCalls gets all the calls that were made to ClearChat.
// Check the length with:
//
//	len(mockedAPI.ClearChatCalls())
func (mock *APIMock) ClearChatCalls() []struct {
	Ctx           context.Context
	BroadcasterID int64
	ModID         int64
	ModToken      *oauth2.Token
} {
	var calls []struct {
		Ctx           context.Context
		BroadcasterID int64
		ModID         int64
		ModToken      *oauth2.Token
	}
	mock.lockClearChat.RLock()
	calls = mock.calls.ClearChat
	mock.lockClearChat.RUnlock()
	return calls
}

// DeleteChatMessage calls DeleteChatMessageFunc.
func (mock *APIMock) DeleteChatMessage(ctx context.Context, broadcasterID int64, modID int64, modToken *oauth2.Token, id string) (*oauth2.Token, error) {
	if mock.DeleteChatMessageFunc == nil {
		panic("APIMock.DeleteChatMessageFunc: method is nil but API.DeleteChatMessage was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		BroadcasterID int64
		ModID         int64
		ModToken      *oauth2.Token
		ID            string
	}{
		Ctx:           ctx,
		BroadcasterID: broadcasterID,
		ModID:         modID,
		ModToken:      modToken,
		ID:            id,
	}
	mock.lockDeleteChatMessage.Lock()
	mock.calls.DeleteChatMessage = append(mock.calls.DeleteChatMessage, callInfo)
	mock.lockDeleteChatMessage.Unlock()
	return mock.DeleteChatMessageFunc(ctx, broadcasterID, modID, modToken, id)
}

// DeleteChatMessageCalls gets all the calls that were made to DeleteChatMessage.
// Check the length with:
//
//	len(mockedAPI.DeleteChatMessageCalls())
func (mock *APIMock) DeleteChatMessageCalls() []struct {
	Ctx           context.Context
	BroadcasterID int64
	ModID         int64
	ModToken      *oauth2.Token
	ID            string
} {
	var calls []struct {
		Ctx           context.Context
		BroadcasterID int64
		ModID         int64
		ModToken      *oauth2.Token
		ID            string
	}
	mock.lockDeleteChatMessage.RLock()
	calls = mock.calls.DeleteChatMessage
	mock.lockDeleteChatMessage.RUnlock()
	return calls
}

// Exchange calls ExchangeFunc.
func (mock *APIMock) Exchange(ctx context.Context, code string) (*oauth2.Token, error) {
	if mock.ExchangeFunc == nil {
		panic("APIMock.ExchangeFunc: method is nil but API.Exchange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Code string
	}{
		Ctx:  ctx,
		Code: code,
	}
	mock.lockExchange.Lock()
	mock.calls.Exchange = append(mock.calls.Exchange, callInfo)
	mock.lockExchange.Unlock()
	return mock.ExchangeFunc(ctx, code)
}

// ExchangeCalls gets all the calls that were made to Exchange.
// Check the length with:
//
//	len(mockedAPI.ExchangeCalls())
func (mock *APIMock) ExchangeCalls() []struct {
	Ctx  context.Context
	Code string
} {
	var calls []struct {
		Ctx  context.Context
		Code string
	}
	mock.lockExchange.RLock()
	calls = mock.calls.Exchange
	mock.lockExchange.RUnlock()
	return calls
}

// GetChannelByID calls GetChannelByIDFunc.
func (mock *APIMock) GetChannelByID(ctx context.Context, id int64) (*twitch.Channel, error) {
	if mock.GetChannelByIDFunc == nil {
		panic("APIMock.GetChannelByIDFunc: method is nil but API.GetChannelByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetChannelByID.Lock()
	mock.calls.GetChannelByID = append(mock.calls.GetChannelByID, callInfo)
	mock.lockGetChannelByID.Unlock()
	return mock.GetChannelByIDFunc(ctx, id)
}

// GetChannelByIDCalls gets all the calls that were made to GetChannelByID.
// Check the length with:
//
//	len(mockedAPI.GetChannelByIDCalls())
func (mock *APIMock) GetChannelByIDCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetChannelByID.RLock()
	calls = mock.calls.GetChannelByID
	mock.lockGetChannelByID.RUnlock()
	return calls
}

// GetChannelModerators calls GetChannelModeratorsFunc.
func (mock *APIMock) GetChannelModerators(ctx context.Context, id int64, userToken *oauth2.Token) ([]*twitch.ChannelModerator, *oauth2.Token, error) {
	if mock.GetChannelModeratorsFunc == nil {
		panic("APIMock.GetChannelModeratorsFunc: method is nil but API.GetChannelModerators was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ID        int64
		UserToken *oauth2.Token
	}{
		Ctx:       ctx,
		ID:        id,
		UserToken: userToken,
	}
	mock.lockGetChannelModerators.Lock()
	mock.calls.GetChannelModerators = append(mock.calls.GetChannelModerators, callInfo)
	mock.lockGetChannelModerators.Unlock()
	return mock.GetChannelModeratorsFunc(ctx, id, userToken)
}

// GetChannelModeratorsCalls gets all the calls that were made to GetChannelModerators.
// Check the length with:
//
//	len(mockedAPI.GetChannelModeratorsCalls())
func (mock *APIMock) GetChannelModeratorsCalls() []struct {
	Ctx       context.Context
	ID        int64
	UserToken *oauth2.Token
} {
	var calls []struct {
		Ctx       context.Context
		ID        int64
		UserToken *oauth2.Token
	}
	mock.lockGetChannelModerators.RLock()
	calls = mock.calls.GetChannelModerators
	mock.lockGetChannelModerators.RUnlock()
	return calls
}

// GetGameByID calls GetGameByIDFunc.
func (mock *APIMock) GetGameByID(ctx context.Context, id int64) (*twitch.Category, error) {
	if mock.GetGameByIDFunc == nil {
		panic("APIMock.GetGameByIDFunc: method is nil but API.GetGameByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetGameByID.Lock()
	mock.calls.GetGameByID = append(mock.calls.GetGameByID, callInfo)
	mock.lockGetGameByID.Unlock()
	return mock.GetGameByIDFunc(ctx, id)
}

// GetGameByIDCalls gets all the calls that were made to GetGameByID.
// Check the length with:
//
//	len(mockedAPI.GetGameByIDCalls())
func (mock *APIMock) GetGameByIDCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetGameByID.RLock()
	calls = mock.calls.GetGameByID
	mock.lockGetGameByID.RUnlock()
	return calls
}

// GetGameByName calls GetGameByNameFunc.
func (mock *APIMock) GetGameByName(ctx context.Context, name string) (*twitch.Category, error) {
	if mock.GetGameByNameFunc == nil {
		panic("APIMock.GetGameByNameFunc: method is nil but API.GetGameByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetGameByName.Lock()
	mock.calls.GetGameByName = append(mock.calls.GetGameByName, callInfo)
	mock.lockGetGameByName.Unlock()
	return mock.GetGameByNameFunc(ctx, name)
}

// GetGameByNameCalls gets all the calls that were made to GetGameByName.
// Check the length with:
//
//	len(mockedAPI.GetGameByNameCalls())
func (mock *APIMock) GetGameByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockGetGameByName.RLock()
	calls = mock.calls.GetGameByName
	mock.lockGetGameByName.RUnlock()
	return calls
}

// GetGameLinks calls GetGameLinksFunc.
func (mock *APIMock) GetGameLinks(ctx context.Context, twitchCategory int64) ([]twitch.GameLink, error) {
	if mock.GetGameLinksFunc == nil {
		panic("APIMock.GetGameLinksFunc: method is nil but API.GetGameLinks was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		TwitchCategory int64
	}{
		Ctx:            ctx,
		TwitchCategory: twitchCategory,
	}
	mock.lockGetGameLinks.Lock()
	mock.calls.GetGameLinks = append(mock.calls.GetGameLinks, callInfo)
	mock.lockGetGameLinks.Unlock()
	return mock.GetGameLinksFunc(ctx, twitchCategory)
}

// GetGameLinksCalls gets all the calls that were made to GetGameLinks.
// Check the length with:
//
//	len(mockedAPI.GetGameLinksCalls())
func (mock *APIMock) GetGameLinksCalls() []struct {
	Ctx            context.Context
	TwitchCategory int64
} {
	var calls []struct {
		Ctx            context.Context
		TwitchCategory int64
	}
	mock.lockGetGameLinks.RLock()
	calls = mock.calls.GetGameLinks
	mock.lockGetGameLinks.RUnlock()
	return calls
}

// GetModeratedChannels calls GetModeratedChannelsFunc.
func (mock *APIMock) GetModeratedChannels(ctx context.Context, modID int64, modToken *oauth2.Token) ([]*twitch.ModeratedChannel, *oauth2.Token, error) {
	if mock.GetModeratedChannelsFunc == nil {
		panic("APIMock.GetModeratedChannelsFunc: method is nil but API.GetModeratedChannels was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ModID    int64
		ModToken *oauth2.Token
	}{
		Ctx:      ctx,
		ModID:    modID,
		ModToken: modToken,
	}
	mock.lockGetModeratedChannels.Lock()
	mock.calls.GetModeratedChannels = append(mock.calls.GetModeratedChannels, callInfo)
	mock.lockGetModeratedChannels.Unlock()
	return mock.GetModeratedChannelsFunc(ctx, modID, modToken)
}

// GetModeratedChannelsCalls gets all the calls that were made to GetModeratedChannels.
// Check the length with:
//
//	len(mockedAPI.GetModeratedChannelsCalls())
func (mock *APIMock) GetModeratedChannelsCalls() []struct {
	Ctx      context.Context
	ModID    int64
	ModToken *oauth2.Token
} {
	var calls []struct {
		Ctx      context.Context
		ModID    int64
		ModToken *oauth2.Token
	}
	mock.lockGetModeratedChannels.RLock()
	calls = mock.calls.GetModeratedChannels
	mock.lockGetModeratedChannels.RUnlock()
	return calls
}

// GetStreamByUserID calls GetStreamByUserIDFunc.
func (mock *APIMock) GetStreamByUserID(ctx context.Context, id int64) (*twitch.Stream, error) {
	if mock.GetStreamByUserIDFunc == nil {
		panic("APIMock.GetStreamByUserIDFunc: method is nil but API.GetStreamByUserID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetStreamByUserID.Lock()
	mock.calls.GetStreamByUserID = append(mock.calls.GetStreamByUserID, callInfo)
	mock.lockGetStreamByUserID.Unlock()
	return mock.GetStreamByUserIDFunc(ctx, id)
}

// GetStreamByUserIDCalls gets all the calls that were made to GetStreamByUserID.
// Check the length with:
//
//	len(mockedAPI.GetStreamByUserIDCalls())
func (mock *APIMock) GetStreamByUserIDCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetStreamByUserID.RLock()
	calls = mock.calls.GetStreamByUserID
	mock.lockGetStreamByUserID.RUnlock()
	return calls
}

// GetStreamByUsername calls GetStreamByUsernameFunc.
func (mock *APIMock) GetStreamByUsername(ctx context.Context, username string) (*twitch.Stream, error) {
	if mock.GetStreamByUsernameFunc == nil {
		panic("APIMock.GetStreamByUsernameFunc: method is nil but API.GetStreamByUsername was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
	}{
		Ctx:      ctx,
		Username: username,
	}
	mock.lockGetStreamByUsername.Lock()
	mock.calls.GetStreamByUsername = append(mock.calls.GetStreamByUsername, callInfo)
	mock.lockGetStreamByUsername.Unlock()
	return mock.GetStreamByUsernameFunc(ctx, username)
}

// GetStreamByUsernameCalls gets all the calls that were made to GetStreamByUsername.
// Check the length with:
//
//	len(mockedAPI.GetStreamByUsernameCalls())
func (mock *APIMock) GetStreamByUsernameCalls() []struct {
	Ctx      context.Context
	Username string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
	}
	mock.lockGetStreamByUsername.RLock()
	calls = mock.calls.GetStreamByUsername
	mock.lockGetStreamByUsername.RUnlock()
	return calls
}

// GetUserByID calls GetUserByIDFunc.
func (mock *APIMock) GetUserByID(ctx context.Context, id int64) (*twitch.User, error) {
	if mock.GetUserByIDFunc == nil {
		panic("APIMock.GetUserByIDFunc: method is nil but API.GetUserByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetUserByID.Lock()
	mock.calls.GetUserByID = append(mock.calls.GetUserByID, callInfo)
	mock.lockGetUserByID.Unlock()
	return mock.GetUserByIDFunc(ctx, id)
}

// GetUserByIDCalls gets all the calls that were made to GetUserByID.
// Check the length with:
//
//	len(mockedAPI.GetUserByIDCalls())
func (mock *APIMock) GetUserByIDCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetUserByID.RLock()
	calls = mock.calls.GetUserByID
	mock.lockGetUserByID.RUnlock()
	return calls
}

// GetUserByToken calls GetUserByTokenFunc.
func (mock *APIMock) GetUserByToken(ctx context.Context, userToken *oauth2.Token) (*twitch.User, *oauth2.Token, error) {
	if mock.GetUserByTokenFunc == nil {
		panic("APIMock.GetUserByTokenFunc: method is nil but API.GetUserByToken was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		UserToken *oauth2.Token
	}{
		Ctx:       ctx,
		UserToken: userToken,
	}
	mock.lockGetUserByToken.Lock()
	mock.calls.GetUserByToken = append(mock.calls.GetUserByToken, callInfo)
	mock.lockGetUserByToken.Unlock()
	return mock.GetUserByTokenFunc(ctx, userToken)
}

// GetUserByTokenCalls gets all the calls that were made to GetUserByToken.
// Check the length with:
//
//	len(mockedAPI.GetUserByTokenCalls())
func (mock *APIMock) GetUserByTokenCalls() []struct {
	Ctx       context.Context
	UserToken *oauth2.Token
} {
	var calls []struct {
		Ctx       context.Context
		UserToken *oauth2.Token
	}
	mock.lockGetUserByToken.RLock()
	calls = mock.calls.GetUserByToken
	mock.lockGetUserByToken.RUnlock()
	return calls
}

// GetUserByUsername calls GetUserByUsernameFunc.
func (mock *APIMock) GetUserByUsername(ctx context.Context, username string) (*twitch.User, error) {
	if mock.GetUserByUsernameFunc == nil {
		panic("APIMock.GetUserByUsernameFunc: method is nil but API.GetUserByUsername was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
	}{
		Ctx:      ctx,
		Username: username,
	}
	mock.lockGetUserByUsername.Lock()
	mock.calls.GetUserByUsername = append(mock.calls.GetUserByUsername, callInfo)
	mock.lockGetUserByUsername.Unlock()
	return mock.GetUserByUsernameFunc(ctx, username)
}

// GetUserByUsernameCalls gets all the calls that were made to GetUserByUsername.
// Check the length with:
//
//	len(mockedAPI.GetUserByUsernameCalls())
func (mock *APIMock) GetUserByUsernameCalls() []struct {
	Ctx      context.Context
	Username string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
	}
	mock.lockGetUserByUsername.RLock()
	calls = mock.calls.GetUserByUsername
	mock.lockGetUserByUsername.RUnlock()
	return calls
}

// ModifyChannel calls ModifyChannelFunc.
func (mock *APIMock) ModifyChannel(ctx context.Context, broadcasterID int64, userToken *oauth2.Token, title *string, gameID *int64) (*oauth2.Token, error) {
	if mock.ModifyChannelFunc == nil {
		panic("APIMock.ModifyChannelFunc: method is nil but API.ModifyChannel was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		BroadcasterID int64
		UserToken     *oauth2.Token
		Title         *string
		GameID        *int64
	}{
		Ctx:           ctx,
		BroadcasterID: broadcasterID,
		UserToken:     userToken,
		Title:         title,
		GameID:        gameID,
	}
	mock.lockModifyChannel.Lock()
	mock.calls.ModifyChannel = append(mock.calls.ModifyChannel, callInfo)
	mock.lockModifyChannel.Unlock()
	return mock.ModifyChannelFunc(ctx, broadcasterID, userToken, title, gameID)
}

// ModifyChannelCalls gets all the calls that were made to ModifyChannel.
// Check the length with:
//
//	len(mockedAPI.ModifyChannelCalls())
func (mock *APIMock) ModifyChannelCalls() []struct {
	Ctx           context.Context
	BroadcasterID int64
	UserToken     *oauth2.Token
	Title         *string
	GameID        *int64
} {
	var calls []struct {
		Ctx           context.Context
		BroadcasterID int64
		UserToken     *oauth2.Token
		Title         *string
		GameID        *int64
	}
	mock.lockModifyChannel.RLock()
	calls = mock.calls.ModifyChannel
	mock.lockModifyChannel.RUnlock()
	return calls
}

// SearchCategories calls SearchCategoriesFunc.
func (mock *APIMock) SearchCategories(ctx context.Context, query string) ([]*twitch.Category, error) {
	if mock.SearchCategoriesFunc == nil {
		panic("APIMock.SearchCategoriesFunc: method is nil but API.SearchCategories was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query string
	}{
		Ctx:   ctx,
		Query: query,
	}
	mock.lockSearchCategories.Lock()
	mock.calls.SearchCategories = append(mock.calls.SearchCategories, callInfo)
	mock.lockSearchCategories.Unlock()
	return mock.SearchCategoriesFunc(ctx, query)
}

// SearchCategoriesCalls gets all the calls that were made to SearchCategories.
// Check the length with:
//
//	len(mockedAPI.SearchCategoriesCalls())
func (mock *APIMock) SearchCategoriesCalls() []struct {
	Ctx   context.Context
	Query string
} {
	var calls []struct {
		Ctx   context.Context
		Query string
	}
	mock.lockSearchCategories.RLock()
	calls = mock.calls.SearchCategories
	mock.lockSearchCategories.RUnlock()
	return calls
}

// SendChatMessage calls SendChatMessageFunc.
func (mock *APIMock) SendChatMessage(ctx context.Context, broadcasterID int64, senderID int64, senderToken *oauth2.Token, message string) (*oauth2.Token, error) {
	if mock.SendChatMessageFunc == nil {
		panic("APIMock.SendChatMessageFunc: method is nil but API.SendChatMessage was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		BroadcasterID int64
		SenderID      int64
		SenderToken   *oauth2.Token
		Message       string
	}{
		Ctx:           ctx,
		BroadcasterID: broadcasterID,
		SenderID:      senderID,
		SenderToken:   senderToken,
		Message:       message,
	}
	mock.lockSendChatMessage.Lock()
	mock.calls.SendChatMessage = append(mock.calls.SendChatMessage, callInfo)
	mock.lockSendChatMessage.Unlock()
	return mock.SendChatMessageFunc(ctx, broadcasterID, senderID, senderToken, message)
}

// SendChatMessageCalls gets all the calls that were made to SendChatMessage.
// Check the length with:
//
//	len(mockedAPI.SendChatMessageCalls())
func (mock *APIMock) SendChatMessageCalls() []struct {
	Ctx           context.Context
	BroadcasterID int64
	SenderID      int64
	SenderToken   *oauth2.Token
	Message       string
} {
	var calls []struct {
		Ctx           context.Context
		BroadcasterID int64
		SenderID      int64
		SenderToken   *oauth2.Token
		Message       string
	}
	mock.lockSendChatMessage.RLock()
	calls = mock.calls.SendChatMessage
	mock.lockSendChatMessage.RUnlock()
	return calls
}

// SetChatColor calls SetChatColorFunc.
func (mock *APIMock) SetChatColor(ctx context.Context, userID int64, userToken *oauth2.Token, color string) (*oauth2.Token, error) {
	if mock.SetChatColorFunc == nil {
		panic("APIMock.SetChatColorFunc: method is nil but API.SetChatColor was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		UserID    int64
		UserToken *oauth2.Token
		Color     string
	}{
		Ctx:       ctx,
		UserID:    userID,
		UserToken: userToken,
		Color:     color,
	}
	mock.lockSetChatColor.Lock()
	mock.calls.SetChatColor = append(mock.calls.SetChatColor, callInfo)
	mock.lockSetChatColor.Unlock()
	return mock.SetChatColorFunc(ctx, userID, userToken, color)
}

// SetChatColorCalls gets all the calls that were made to SetChatColor.
// Check the length with:
//
//	len(mockedAPI.SetChatColorCalls())
func (mock *APIMock) SetChatColorCalls() []struct {
	Ctx       context.Context
	UserID    int64
	UserToken *oauth2.Token
	Color     string
} {
	var calls []struct {
		Ctx       context.Context
		UserID    int64
		UserToken *oauth2.Token
		Color     string
	}
	mock.lockSetChatColor.RLock()
	calls = mock.calls.SetChatColor
	mock.lockSetChatColor.RUnlock()
	return calls
}

// Unban calls UnbanFunc.
func (mock *APIMock) Unban(ctx context.Context, broadcasterID int64, modID int64, modToken *oauth2.Token, userID int64) (*oauth2.Token, error) {
	if mock.UnbanFunc == nil {
		panic("APIMock.UnbanFunc: method is nil but API.Unban was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		BroadcasterID int64
		ModID         int64
		ModToken      *oauth2.Token
		UserID        int64
	}{
		Ctx:           ctx,
		BroadcasterID: broadcasterID,
		ModID:         modID,
		ModToken:      modToken,
		UserID:        userID,
	}
	mock.lockUnban.Lock()
	mock.calls.Unban = append(mock.calls.Unban, callInfo)
	mock.lockUnban.Unlock()
	return mock.UnbanFunc(ctx, broadcasterID, modID, modToken, userID)
}

// UnbanCalls gets all the calls that were made to Unban.
// Check the length with:
//
//	len(mockedAPI.UnbanCalls())
func (mock *APIMock) UnbanCalls() []struct {
	Ctx           context.Context
	BroadcasterID int64
	ModID         int64
	ModToken      *oauth2.Token
	UserID        int64
} {
	var calls []struct {
		Ctx           context.Context
		BroadcasterID int64
		ModID         int64
		ModToken      *oauth2.Token
		UserID        int64
	}
	mock.lockUnban.RLock()
	calls = mock.calls.Unban
	mock.lockUnban.RUnlock()
	return calls
}

// UpdateChatSettings calls UpdateChatSettingsFunc.
func (mock *APIMock) UpdateChatSettings(ctx context.Context, broadcasterID int64, modID int64, modToken *oauth2.Token, patch *twitch.ChatSettingsPatch) (*oauth2.Token, error) {
	if mock.UpdateChatSettingsFunc == nil {
		panic("APIMock.UpdateChatSettingsFunc: method is nil but API.UpdateChatSettings was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		BroadcasterID int64
		ModID         int64
		ModToken      *oauth2.Token
		Patch         *twitch.ChatSettingsPatch
	}{
		Ctx:           ctx,
		BroadcasterID: broadcasterID,
		ModID:         modID,
		ModToken:      modToken,
		Patch:         patch,
	}
	mock.lockUpdateChatSettings.Lock()
	mock.calls.UpdateChatSettings = append(mock.calls.UpdateChatSettings, callInfo)
	mock.lockUpdateChatSettings.Unlock()
	return mock.UpdateChatSettingsFunc(ctx, broadcasterID, modID, modToken, patch)
}

// UpdateChatSettingsCalls gets all the calls that were made to UpdateChatSettings.
// Check the length with:
//
//	len(mockedAPI.UpdateChatSettingsCalls())
func (mock *APIMock) UpdateChatSettingsCalls() []struct {
	Ctx           context.Context
	BroadcasterID int64
	ModID         int64
	ModToken      *oauth2.Token
	Patch         *twitch.ChatSettingsPatch
} {
	var calls []struct {
		Ctx           context.Context
		BroadcasterID int64
		ModID         int64
		ModToken      *oauth2.Token
		Patch         *twitch.ChatSettingsPatch
	}
	mock.lockUpdateChatSettings.RLock()
	calls = mock.calls.UpdateChatSettings
	mock.lockUpdateChatSettings.RUnlock()
	return calls
}

// Validate calls ValidateFunc.
func (mock *APIMock) Validate(ctx context.Context, tok *oauth2.Token) (*twitch.Validation, *oauth2.Token, error) {
	if mock.ValidateFunc == nil {
		panic("APIMock.ValidateFunc: method is nil but API.Validate was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Tok *oauth2.Token
	}{
		Ctx: ctx,
		Tok: tok,
	}
	mock.lockValidate.Lock()
	mock.calls.Validate = append(mock.calls.Validate, callInfo)
	mock.lockValidate.Unlock()
	return mock.ValidateFunc(ctx, tok)
}

// ValidateCalls gets all the calls that were made to Validate.
// Check the length with:
//
//	len(mockedAPI.ValidateCalls())
func (mock *APIMock) ValidateCalls() []struct {
	Ctx context.Context
	Tok *oauth2.Token
} {
	var calls []struct {
		Ctx context.Context
		Tok *oauth2.Token
	}
	mock.lockValidate.RLock()
	calls = mock.calls.Validate
	mock.lockValidate.RUnlock()
	return calls
}
