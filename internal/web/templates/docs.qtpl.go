// Code generated by qtc from "docs.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

package templates

import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

type DocsPage struct {
	BasePage
}

func (p *DocsPage) StreamPageTitle(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
`)
	p.StreamPageBrand(qw422016)
	qw422016.N().S(` - Documentation
`)
}

func (p *DocsPage) WritePageTitle(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageTitle(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *DocsPage) PageTitle() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageTitle(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *DocsPage) StreamPageMeta(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
`)
	p.BasePage.StreamPageMeta(qw422016)
	qw422016.N().S(`
`)
	streamsidebarStyle(qw422016)
	qw422016.N().S(`
<style>
h3.title {
    padding-top: 1rem;
}

dt {
    padding-top: 1rem;
}

dd {
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
}

.tag {
    margin-left: 1rem;
    height: 1.5rem !important;
    padding-left: 0.5rem !important;
    padding-right: 0.5rem !important;
}
</style>
`)
}

func (p *DocsPage) WritePageMeta(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageMeta(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *DocsPage) PageMeta() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageMeta(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *DocsPage) StreamPageBody(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
<div class="columns is-fullheight is-clipped">
    <div class="is-sidebar-menu is-hidden-mobile" id="sidebar">
        <aside class="menu">
            <p class="menu-label">
                General
            </p>
            <ul class="menu-list">
                <li><a href="#commands">Commands</a></li>
            </ul>

            <p class="menu-label">
                Custom commands
            </p>
            <ul class="menu-list">
                <li><a href="#triggers">Triggers</a></li>
                <li><a href="#repeats">Repeats</a></li>
                <li><a href="#schedule">Schedule</a></li>
                <li><a href="#autoreplies">Autoreplies</a></li>
                <li><a href="#lists">Lists</a></li>
                <li><a href="#variables">Variables</a></li>
            </ul>

            <p class="menu-label">
                Moderation
            </p>
            <ul class="menu-list">
                <li><a href="#shortcuts">Shortcuts</a></li>
                <li><a href="#ignores">Ignores</a></li>
                <li><a href="#user-levels">User levels</a></li>
            </ul>

            <p class="menu-label">
                Fun
            </p>
            <ul class="menu-list">
                <li><a href="#general-fun">General fun</a></li>
                <li><a href="#quotes">Quotes</a></li>
            </ul>

            <p class="menu-label">
                Utilities
            </p>
            <ul class="menu-list">
                <li><a href="#general-utilities">General utilities</a></li>
                <li><a href="#twitch">Twitch</a></li>
                <li><a href="#raffles">Raffles</a></li>
            </ul>

            <p class="menu-label">
                Settings
            </p>
            <ul class="menu-list">
                <li><a href="#general-settings">General settings</a></li>
                <li><a href="#roll-settings">Roll</a></li>
            </ul>

            <p class="menu-label">
                Filters
            </p>
            <ul class="menu-list">
                <li><a href="#filters">General filters</a></li>
                <li><a href="#filter-links">Links</a></li>
                <li><a href="#filter-capitals">Capitals</a></li>
                <li><a href="#filter-banned">Banned phrases</a></li>
                <li><a href="#filter-symbols">Symbols</a></li>
                <li><a href="#filter-emotes">Emotes</a></li>
            </ul>

            <p class="menu-label">
                Command actions
            </p>
            <ul class="menu-list">
                <li><a href="#actions">Actions</a></li>
            </ul>
        </aside>
    </div>

                    
    <div class="column is-main-content content" id="main">
        <h1 class="title">Documentation</h1>

        <p>
            This page contains documentation for all of `)
	p.StreamPageBrand(qw422016)
	qw422016.N().S(`'s features.
            Note that <code>!</code> is used as a prefix in the documentation, but may differ
            per channel.
        </p>

        <hr>

        <h2 class="title">General</h2>

        <section id="commands" class="page">
            <h3 class="title">Commands</h3>

            <dl>
                `)
	streamcommand(qw422016, "!join", `Tells `+p.Brand+` to join your channel. Must be executed in the bot's channel.`, "everyone")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!part", `Tells `+p.Brand+` to leave your channel. In a non-bot channel, only the broadcaster may use this command.`, "everyone")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!bothelp", `Returns a helpful message.`, "everyone")
	qw422016.N().S(`
            </dl>
        </section>

        <hr>
        <h2 class="title">Custom commands</h2>

        <section id="triggers" class="page">
            <h3 class="title">Triggers</h3>

            <dl>
                `)
	streamcommand(qw422016,
		"!commands",
		`Links to the list of commands for the channel.`,
		"subs",
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!command add <name> <text>",
		`Creates a command <code>!name</code> that responds with the specified text.`,
		"mods",
		`By default, commands are available to subs. Using <code>adda</code> or <code>addm</code> instead of <code>add</code> will pre-restrict the command to all users or moderators, respectively.`,
		`Example: <code>!command add pan FOUND THE (_PARAMETER_CAPS_), HAVE YE?</code> &mdash; Adds a command called "pan".`,
		`Example: <code>!command adda useful Here's some useful info: example.org</code> &mdash; Adds a command available to all users immediately.`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!command delete <name>",
		`Deletes a command.`,
		"mods",
		`Example: <code>!command delete pan</code> &mdash; Deletes the command called "pan".`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!command restrict <name> all|subs|vips|mods|owner",
		`Restricts a command to a specific group.`,
		"mods",
		`Example: <code>!command restrict pan mods</code> &mdash; Restricts "pan" to moderators and above.`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!command editor <name>",
		`Gets the last editor of a command.`,
		"mods",
		`Example: <code>!command editor pan</code> &mdash; Gets the last editor of the "pan" command.`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!command count <name>",
		`Gets the number of times a command has been run.`,
		"mods",
		`Example: <code>!command count pan</code> &mdash; Gets the number of times the "pan" command have been used.`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!command rename <old> <new>",
		`Renames a command.`,
		"mods",
		`Example: <code>!command rename pan oldpan</code> &mdash; Renames the command "pan" to "oldpan".`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!command get <name>",
		`Gets the response for a command.`,
		"mods",
		`Example: <code>!command get pan</code> &mdash; Gets the response for the "pan" command.`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!command clone #<channel> <name>",
		`Clones a command from another channel into this channel.`,
		"mods",
		`Example: <code>!command clone #coestar pan</code> &mdash; Clones the "pan" command into the current channel as "pan".`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!command exec <command string>",
		`Executes the command string. Can be used to quickly test some commands before adding them`,
		"mods",
		`Example: <code>!command exec The time in Chicago is (_TIME_America/Chicago_). </code>`,
	)
	qw422016.N().S(`
            </dl>
        </section>

        <section id="repeats" class="page">
            <h3 class="title">Repeats</h3>
            
            <p>
                The repeat command sets up a command repetition. When enabled,
                the bot will repeat every X seconds so long as Y messages have
                passed.
            </p>

            <dl>
                `)
	streamcommand(qw422016,
		"!repeat add <name> <delay in seconds> [message difference]",
		`Sets a command to repeat, and enables it.`,
		"mods",
		`Example: <code>!repeat add discord 300 10</code> &mdash; Sets the command "discord" to repeat every 300 seconds if at least 10 messages have passed.`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!repeat delete <name>",
		`Deletes a command's repeat info.`,
		"mods",
		`Example: <code>!repeat delete discord</code> &mdash; Stops repeating the "discord" command and deletes its repeat info.`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!repeat on|off <name>",
		`Enables or disables a command's repetition.`,
		"mods",
		`Example: <code>!repeat on discord</code> &mdash; Enables repetition of the "discord" command.`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!repeat list",
		`Lists command repetition info.`,
		"mods",
	)
	qw422016.N().S(`
            </dl>
        </section>

        <section id="schedule" class="page">
            <h3 class="title">Schedule</h3>

            <p>
                The schedule command sets up a command repetition via a <a href="https://crontab.guru/" target="_blank">cron expression</a>.
                Like repeated commands, a message difference can be specified.
            </p>

            <dl>
                `)
	streamcommand(qw422016,
		"!schedule add <name> <pattern> [message difference]",
		`Schedules a command, and enables it.`,
		"mods",
		`Example: <code>!schedule add discord *_5_*_*_*</code> &mdash; Schedules the command "discord" to at 5AM every day.`,
		`Example: <code>!schedule add discord hourly 10</code> &mdash; Schedules the command "discord" to run hourly if at least 10 messages have passed.`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!schedule delete <name>",
		`Deletes a command's schedule.`,
		"mods",
		`Example: <code>!schedule delete discord</code> &mdash; Unschedules the "discord" command and deletes its schedule.`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!schedule on|off <name>",
		`Enables or disables a command's repetition.`,
		"mods",
		`Example: <code>!schedule on discord</code> &mdash; Enables the schedule of the "discord" command.`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!schedule list",
		`Lists command schedules.`,
		"mods",
	)
	qw422016.N().S(`
            </dl>
        </section>

        <section id="autoreplies" class="page">
            <h3 class="title">Autoreplies</h3>

            <p>
                Autoreplies are like custom commands, but are run when a message matches a pattern.
            </p>

            <dl>
                `)
	streamcommand(qw422016,
		"!autoreply add <pattern> <response>",
		`Adds an autoreply which will respond with the provided response when a message matches the pattern.`,
		"mods",
		`In the pattern, spaces should be replaced with underscores.`,
		`Example: <code>!autoreply add *what*game* This is (_GAME_).</code> &mdash; Adds an autoreply that will reply with the current game if a message matches the pattern "*what*game".`,
		`Example: <code>!autoreply add REGEX:^too_many_[^_]+$ TOO MANY COOKS (_REGULARS_ONLY_)</code> &mdash; Adds an autoreply which uses a raw regex pattern.`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!autoreply delete <num>",
		`Removes an autoreply.`,
		"mods",
		`Note that deleting an autoreply that isn't the last does not shift the numbers down. Use <code>!autoreply compact</code> to do this.`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!autoreply editresponse <num> <response>",
		`Edits an autoreply's response.`,
		"mods",
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!autoreply editpattern <num> <pattern>",
		`Edits an autoreply's pattern.`,
		"mods",
		`In the pattern, spaces should be replaced with underscores.`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!autoreply compact <num>",
		`Compacts autoreplies "num" and higher. This is useful after removing an autoreply in the middle of the list.`,
		"mods",
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!autoreply list",
		`Links to the list of autoreplies for the channel.`,
		"mods",
	)
	qw422016.N().S(`
            </dl>
        </section>

        <section id="lists" class="page">
            <h3 class="title">Lists</h3>

            <p>
                Lists are collections of command-like responses, which can be accessed directly, or via the <code>(_LIST_&lt;name&gt;_RANDOM_)</code> action.
                They share the same namespace as custom commands, and may contain command actions themselves.
            </p>

            <dl>
                `)
	streamcommand(qw422016,
		"!list add <name>",
		`Adds a list.`,
		"mods",
		`By default, lists are available to subs. Using <code>adda</code> or <code>addm</code> instead of <code>add</code> will pre-restrict the list to all users or moderators, respectively.`,
		`Example: <code>!list add hatspells</code> &mdash; Adds a list called "hatspells".`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!list delete <name>",
		`Removes a list.`,
		"mods",
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!list restrict <name> all|subs|vips|mods|owner",
		`Restricts a list.`,
		"mods",
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!list rename <old> <new>",
		`Renames a list.`,
		"mods",
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!<name>",
		`Gets a random item from the list. Or use <code>!&lt;name&gt; random</code>.`,
		"varies",
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!<name> add <item>",
		`Adds an item to the named list.`,
		"mods",
		`Example: <code>!hatspells add Solar Eruption</code> &mdash; Adds "Solar Eruption" to the "hatspells" list.`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!<name> delete <item>",
		`Removes an item from the named list.`,
		"mods",
		`Example: <code>!hatspells remove Solar Eruption</code> &mdash; Removes "Solar Eruption" from the "hatspells" list.`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!<name> restrict",
		`Same as <code>!list restrict &lt;name&gt;</code>.`,
		"mods",
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!<name> get <num>",
		`Gets a specific item from the list.`,
		"varies",
	)
	qw422016.N().S(`
            </dl>
        </section>

        <section id="variables" class="page">
            <h3 class="title">Variables</h3>

            <p>
                Variables store persistent information between commands, and are accessible directly or through actions.
            </p>

            <dl>
                `)
	streamcommand(qw422016, "!var set <name> <value>", `Sets a variable.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!var get <name>", `Gets a variable's value.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!var delete <name>", `Removes a variable.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!var increment <name> <amount>", `Increments a variable as an integer.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!var decrement <name> <amount>", `Decrements a variable as an integer.`, "mods")
	qw422016.N().S(`
            </dl>
        </section>

        <hr>
        <h2 class="title">Moderation</h2>

        <section id="shortcuts" class="page">
            <h3 class="title">Shortcuts</h3>

            <dl>
                `)
	streamcommand(qw422016, "+b <user>", `Bans a user.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "-b <user>", `Unbans a user.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "+t <user> [seconds]", `Times out a user (with an optional duration).`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "-t <user>", `Removes a user's timeout.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "+p <user>", `Purges a user's messages.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!permit <user>", `Permits a user to post one link.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!clear", `Clears chat.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "+m", `Turns slow mode on.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "-m", `Turns slow mode off.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "+s", `Turns sub only mode on.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "-s", `Turns sub only mode off.`, "mods")
	qw422016.N().S(`
            </dl>
        </section>

        <section id="ignores" class="page">
            <h3 class="title">Ignores</h3>

            <p>
                Ignored users may not use `)
	p.StreamPageBrand(qw422016)
	qw422016.N().S(`, but will still be subject to filters.
            </p>

            <dl>
                `)
	streamcommand(qw422016, "!ignore add <user>", `Adds a user to the ignore list.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!ignore delete <user>", `Removes a user from the ignore list.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!ignore list", `Lists users in the ignore list.`, "mods")
	qw422016.N().S(`
            </dl>
        </section>

        <section id="user-levels" class="page">
            <h3 class="title">User levels</h3>

            <p>
                Custom user levels reclassify users to have different levels. Regulars are equivalent
                to subscribers, owners are equivalent to the channel broadcaster, and mods are mods.
            </p>

            <dl>
                `)
	streamcommand(qw422016, "!regular list", `Lists regulars.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!regular add|remove <user>", `Adds or removes a user from the regular list.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!owner|mod list", `Lists users in that group.`, "broadcaster")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!owner|mod add|remove <user>", `Adds or removes a user from a list.`, "broadcaster")
	qw422016.N().S(`
            </dl>
        </section>

        <hr>
        <h2 class="title">Fun</h2>

        <section id="general-fun" class="page">
            <h3 class="title">General fun</h3>

            <dl>
                `)
	streamcommand(qw422016, "!conch", `Magic 8 ball.`, "subs")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!winner", `Picks a random chat member.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!xkcd <num>", `Gets the requested XKCD comic.`, "subs")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!random coin", `Flips a coin.`, "varies")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!random <integer>", `Picks a random number.`, "varies")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!roll <dice>", `Rolls the specified dice.`, "varies", `Example: <code>!roll 2d20</code> &mdash; Rolls two D20s.`)
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!google <query>", `Googles something.`, "subs")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!link <query>", `Links something.`, "subs")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!me <phrase>", `Sends a /me command.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!urban <phrase>", `Looks up something in the Urban Dictionary. Be warned, these are not filtered.`, "subs")
	qw422016.N().S(`
            </dl>
        </section>

        <section id="quotes" class="page">
            <h3 class="title">Quotes</h3>

            <dl>
                `)
	streamcommand(qw422016, "!quote", `Gets a random quote.`, "subs")
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!quote add <quote>",
		`Adds a quote.`,
		"mods",
		`Example: <code>!quote add "This is a quote!"</code> &mdash; Adds a the quote "This is a quote!".`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!quote delete <num>",
		`Removes a quote.`,
		"mods",
		`Note that deleting a quote that isn't the last does not shift the numbers down. Use <code>!quote compact</code> to do this.`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!quote get <num>",
		`Gets a quote.`,
		"subs",
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!quote random",
		`Gets a random quote.`,
		"subs",
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!quote getindex <exact quote>",
		`Returns the number of the exact quote specified.`,
		"subs",
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!quote edit <num> <quote>",
		`Edts a quote.`,
		"mods",
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!quote search <phrase>",
		`Searches all quotes for a phrase.`,
		"mods",
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!quote editor <num>",
		`Gets the username of the last editor of the quote.`,
		"subs",
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!quote compact <num>",
		`Compacts quotes "num" and higher. This is useful after removing a quote in the middle of the list.`,
		"mods",
	)
	qw422016.N().S(`
            </dl>
        </section>

        <hr>
        <h2 class="title">Utilities</h2>

        <section id="general-utilities" class="page">
            <h3 class="title">General utilities</h3>

            <dl>
                `)
	streamcommand(qw422016, "!lastfm", `Links to the channel's LastFM profile.`, "everyone")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!music", `Gets the currently playing song.`, "everyone")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!songlink", `Gets a link to the currently playing song.`, "everyone")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!whatshouldiplay", `Picks a random game from the channel's Steam library.`, "broadcaster")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!channelid", `Gets the channel's Twitch ID.`, "everyone")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!ht", `Creates a highlight (viewable on the channel page).`, "everyone")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!highlightthat", `Same as <code>!ht</code>.`, "everyone")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!#<channel>/<command>", `Runs a command from another channel.`, "broadcaster")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!hltb", `Fetches the HowLongToBeat time for the current game, or an arbitrary game with a parameter.`, "subs")
	qw422016.N().S(`
            </dl>
        </section>

        <section id="twitch" class="page">
            <h3 class="title">Twitch</h3>

            <dl>
                `)
	streamcommand(qw422016, "!game", `Gets the current game.`, "everyone")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!game <new game>", `Sets the current game. Only valid game names are allowed, but the bot will autocorrect or suggest game names when possible.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!status", `Gets the current status.`, "everyone")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!status <new status>", `Sets the current status.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!uptime", `Gets the current uptime.`, "everyone")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!viewers", `Gets the current viewer count.`, "everyone")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!chatters", `Gets the current chatter count.`, "everyone")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!ishere <user>", `Checks if a user is in chat.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!islive <user>", `Checks if a user is live.`, "mods")
	qw422016.N().S(`

                `)
	streamcommand(qw422016, "!statusgame <new status>", `Sets the current game to the current Steam game. and sets the status.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!steamgame", `Sets the current game to the current Steam game.`, "mods")
	qw422016.N().S(`
            </dl>
        </section>

        <section id="raffles" class="page">
            <h3 class="title">Raffles</h3>

            <dl>
                `)
	streamcommand(qw422016, "!raffle", `Enters into the active raffle.`, "everyone")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!raffle enable|disable", `Enables/disables the raffle. Enabling the raffle clears the previous entries.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!raffle reset", `Resets the raffle entries.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!raffle count", `Counts the number of raffle entries.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!raffle winner", `Picks a random winner.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!raffle winner <X>", `Picks &lt;X&gt; random winners.`, "mods")
	qw422016.N().S(`
            </dl>
        </section>

        <hr>
        <h2 class="title">Settings</h2>

        <section id="general-settings" class="page">
            <h3 class="title">General settings</h3>

            <dl>
                `)
	streamcommand(qw422016, "!set prefix <prefix>", `Sets the prefix used to access commands.`, "broadcaster")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!set bullet <bullet>", `Sets the bullet prepended to all bot messages.`, "broadcaster")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!set cooldown <seconds>", `Sets the command cooldown.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!set shouldModerate on|off", `Enables moderation.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!set lastfm off|<name>", `Sets the channel's LastFM profile name.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!set enableWarnings on|off", `Enable warnings before moderation actions.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!set displayWarnings on|off", `Show warnings on warns.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!set timeoutDuration <seconds>", `Sets the moderation timeout duration.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!set extraLifeID <ID>", `Sets the Extra-Life ID.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!set subsMayLink on|off", `Allow subscribers to link.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!set mode all|subs|vips|mods|owner", `Sets the minimum user level for the bot to respond to.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!set steam <ID>", `Sets the channel's Steam ID.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!set urban on|off", `Enables/disables the urban command.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!set tweet <message>", `Sets the ClickToTweet message.`, "mods")
	qw422016.N().S(`
            </dl>
        </section>

        <section id="roll-settings" class="page">
            <h3 class="title">Roll</h3>

            <dl>
                `)
	streamcommand(qw422016, "!set roll default <num>", `Set the default roll amount.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!set roll cooldown <seconds>", `Set the roll cooldown.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!set roll userlevel all|subs|vips|mods|owner", `Set the minimum user level for roll/random.`, "mods")
	qw422016.N().S(`
            </dl>
        </section>

        <hr>
        <h2 class="title">Filters</h2>

        <section id="general-filters" class="page">
            <h3 class="title">General filters</h3>

            <dl>
                `)
	streamcommand(qw422016, "!filter on|off", `Enables/disables all filters.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!filter status", `Shows the status of all filters.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!filter me on|off", `Enables/disables the /me filter.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!filter messagelength <length>", `Sets the maximum message length.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!filter exempt all|subs|vips|mods|owner", `Sets the minimum user level that will be exempt from filters. Defaults to subs, and cannot be higher than mods. For historical reasons, link filtering is controlled by subsMayLink.`, "mods")
	qw422016.N().S(`
            </dl>
        </section>

        <section id="filter-links" class="page">
            <h3 class="title">Links</h3>

            <dl>
                `)
	streamcommand(qw422016, "!filter links on|off", `Toggles link filtering.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016,
		"!filter pd add|delete <link pattern>",
		`Toggles link filtering.`,
		"mods",
		`Link patterns can just be domains, or contain wildcard characters.`,
		`Example: <code>!filter pd add clips.twitch.tv</code> &mdash; Allow old-style Twitch clip links.`,
		`Example: <code>!filter pd add twitch.tv/*/clips</code> &mdash; Allow new-style Twitch clip links.`,
	)
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!filter pd list", `Lists permitted links.`, "mods")
	qw422016.N().S(`
            </dl>
        </section>

        <section id="filter-capitals" class="page">
            <h3 class="title">Capitals</h3>

            <dl>
                `)
	streamcommand(qw422016, "!filter caps on|off", `Toggles caps filtering.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!filter caps status", `Shows caps filter status.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!filter percent <percent>", `Sets minimum caps percentage to be filtered.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!filter mincaps <num>", `Sets minimum caps count to be filtered.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!filter minchars <num>", `Sets minimum message length to be filtered.`, "mods")
	qw422016.N().S(`
            </dl>
        </section>

        <section id="filter-banned" class="page">
            <h3 class="title">Banned phrases</h3>

            <dl>
                `)
	streamcommand(qw422016, "!filter banphrase on|off", `Toggles banned phrase filtering.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!filter banphrase list", `Lists banned phrases.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!filter banphrase add|delete <phrase>", `Adds/removes a banned phrase.`, "mods")
	qw422016.N().S(`
            </dl>
        </section>

        <section id="filter-symbols" class="page">
            <h3 class="title">Symbols</h3>

            <dl>
                `)
	streamcommand(qw422016, "!filter symbols on|off", `Toggles symbol filtering.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!filter symbols status", `Shows symbol filter status.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!filter symbols percent <percent>", `Sets minimum symbol percentage to be filtered.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!filter symbols min <num>", `Sets minimum symbol count to be filtered.`, "mods")
	qw422016.N().S(`
            </dl>
        </section>

        <section id="filter-emotes" class="page">
            <h3 class="title">Emotes</h3>

            <dl>
                `)
	streamcommand(qw422016, "!filter emotes on|off", `Toggles emote filtering.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!filter emotes max <num>", `Sets max emotes allowed per message.`, "mods")
	qw422016.N().S(`
                `)
	streamcommand(qw422016, "!filter emotes single on|off", `Toggles filter for single emote messages.`, "mods")
	qw422016.N().S(`
            </dl>
        </section>

        <hr>
        
        <section id="actions" class="page">
            <h2 class="title">Actions</h2>

            <p>
                These actions can be used in custom commands and list commands. Actions may be nested, for example:
            </p>

            <pre>(_TEXTAPI_https://duckduckgo.com/?q=(_QESC_(_P_)_)_)</pre>


            <h3>Common</h3>

            <dl>
                `)
	streamaction(qw422016, "PARAMETER", `The next command parameter (split by semicolon).`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "P", `Same as <code>PARAMETER</code>.`)
	qw422016.N().S(`

                `)
	streamaction(qw422016, "PARAMETER_CAPS", `The next command parameter, in all caps.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "P_CAPS", `Same as <code>PARAMETER_CAPS</code>.`)
	qw422016.N().S(`

                `)
	streamaction(qw422016, "PARAMETER_OR_<DEFAULT>", `The next command parameter, or a default value if empty.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "P_OR_<DEFAULT>", `Same as <code>PARAMETER_OR_&lt;DEFAULT&gt;</code>.`)
	qw422016.N().S(`

                `)
	streamaction(qw422016, "PARAMETER_<X>", `Parameter &lt;X&gt;.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "P_<X>", `Same as <code>PARAMETER_&lt;X&gt;</code>.`)
	qw422016.N().S(`

                `)
	streamaction(qw422016, "PARAMETER_<X>_OR_<DEFAULT>", `Parameter &lt;X&gt;, or a default value if empty.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "P_<X>_OR_<DEFAULT>", `Same as <code>PARAMETER_&lt;X&gt;_OR_&lt;DEFAULT&gt;</code>.`)
	qw422016.N().S(`

                `)
	streamaction(qw422016, "PARAMETER_<X>_CAPS", `Parameter &lt;X&gt;, in all caps.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "P_<X>_CAPS", `Same as <code>PARAMETER_&lt;X&gt;_CAPS</code>.`)
	qw422016.N().S(`

                `)
	streamaction(qw422016, "CAPS_<X>", `Makes &lt;X&gt; all caps.`)
	qw422016.N().S(`

                `)
	streamaction(qw422016, "USER", `The user's name.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "USER_DISPLAY", `The user's display name.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "ONLINE_CHECK", `If offline, the command is disabled.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "GAME", `The current game.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "GAME_CLEAN", `The current game, URL-safe.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "GAME_IS_<GAME>", `If present and the current game is not <code>&lt;GAME&gt;</code>, then the command will stop. Note that this cannot be used with nesting, e.g. you cannot do <code>(_GAME_IS_(_PARAMETER_)_)</code>.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "GAME_IS_NOT_<GAME>", `Inverse of <code>GAME_IS_&lt;GAME&gt;</code>.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "GAME_LINK", `A link to the current game, at its relevent game store.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "STATUS", `The current stream status.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "VIEWERS", `The current viewer count.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "CHATTERS", `The current chatter count.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "QUOTE", `A random quote.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "RANDOM_<MIN>_<MAX>", `A random number between &lt;MIN&gt; and &lt;MIN&gt;, up to one decimal place.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "RANDOM_INT_<MIN>_<MAX>", `A random integer between &lt;MIN&gt; and &lt;MIN&gt;.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "QUIET_<X>", `Evaluates to the empty string, ignoring the value of &lt;X&gt;. Useful to silence actions with side effects, such as variable setting.`)
	qw422016.N().S(`
            </dl>

            <h3>Moderation</h3>

            <dl>
                `)
	streamaction(qw422016, "SUBMODE_ON", `Enables submode.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "SUBMODE_OFF", `Disables submode.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "PURGE", `Purges the messages of the user in the first parameter, or the sender if used in an autoreply.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "BAN", `Bans the user in the first parameter, or the sender if used in an autoreply, and returns the user.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "TIMEOUT", `Times out the user in the first parameter, or the sender if used in an autoreply, and returns the user.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "DELETE", `Deletes the message if used in an autoreply, and returns the user.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "REGULARS_ONLY", `Only allow regulars (subs) to use the command.`)
	qw422016.N().S(`
            </dl>

            <h3>Date and time</h3>

            <dl>
                `)
	streamaction(qw422016, "DATE", `The current date, UTC.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "DATE_<TZ>", `The current date, in the specified timezone (like "America/Chicago" or "MST").`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "TIME", `The current time, UTC.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "TIME_<TZ>", `The current time, in the specified timezone (like "America/Chicago" or "MST").`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "TIME24", `The current 24-hour time, UTC.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "TIME24_<TZ>", `The current 24-hour time, in the specified timezone (like "America/Chicago" or "MST").`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "DATETIME", `The current date and time, UTC.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "DATETIME_<TZ>", `The current date and time, in the specified timezone (like "America/Chicago" or "MST").`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "DATETIME24", `The current date and 24-hour time, UTC.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "DATETIME24_<TZ>", `The current date and 24-hour time, in the specified timezone (like "America/Chicago" or "MST")..`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "UNTIL_<TIMESTAMP>", `Time until the specified timestamp (in RFC3339 or UNIX-timestamp form).`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "UNTILSHORT_<TIMESTAMP>", `Time until the specified timestamp (in RFC3339 or UNIX-timestamp form), short style.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "UNTILLONG_<TIMESTAMP>", `Time until the specified timestamp (in RFC3339 or UNIX-timestamp form), long style.`)
	qw422016.N().S(`
            </dl>

            <h3>Variables, lists, and commands</h3>

            <dl>
                `)
	streamaction(qw422016, "VARS_<NAME>_GET", `Gets a variable.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "VARS_<NAME>_GET_<CHANNEL>", `Gets a variable from a specific channel.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "VARS_<NAME>_SET_<VALUE>", `Set's a variable to a value.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "VARS_<NAME>_INCREMENT_<NUM>", `Increments a variable if it is an integer.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "VARS_<NAME>_DECREMENT_<NUM>", `Decrements a variable if it is an integer.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "LIST_<NAME>_RANDOM", `A random item from a list.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "COMMAND_<COMMAND>", `Insert the specified command's response.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "<COMMAND>_COUNT", `The number of times a command has been used.`)
	qw422016.N().S(`
            </dl>

            <h3>Meta</h3>

            <dl>
                `)
	streamaction(qw422016, "MESSAGE_COUNT", `The current message count in this channel.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "SILENT", `Silences the message containing this action.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "NUMCHANNELS", `The number of channels the bot is active in.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "BOT_HELP", `The bot's help message.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "CHANNEL_URL", `The current channel's URL.`)
	qw422016.N().S(`
            </dl>

            <h3>Third-party APIs</h3>

            <dl>
                `)
	streamaction(qw422016, "SONG", `Current song.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "SONG_URL", `Current song's URL.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "LAST_SONG", `The previous song.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "EXTRALIFE_AMOUNT", `The current Extra-Life amount.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "STEAM_PROFILE", `The link to the channel's Steam profile.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "STEAM_GAME", `The current Steam game.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "STEAM_SERVER", `The current Steam game's server.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "STEAM_STORE", `A link to the current Steam game.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "TWEET_URL", `A link to Twitter which will send a tweet about the stream.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "TEXTAPI_<URL>", `Sends a GET request to the provided URL and returns the resulting body.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "PESC_<TEXT>", `Path-escapes the given text.`)
	qw422016.N().S(`
                `)
	streamaction(qw422016, "QESC_<TEXT>", `Query-escapes the given text.`)
	qw422016.N().S(`
            </dl>
        </section>
    </div>
</div>
`)
}

func (p *DocsPage) WritePageBody(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageBody(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *DocsPage) PageBody() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageBody(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *DocsPage) StreamPageScripts(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
`)
	p.BasePage.StreamPageScripts(qw422016)
	qw422016.N().S(`
`)
	streamjqueryScript(qw422016)
	qw422016.N().S(`
`)
	streamgumshoeScript(qw422016)
	qw422016.N().S(`

<script>
$(function() {
    document.addEventListener("gumshoeActivate", function(event) {
        $(event.detail.link).addClass("is-active");
    }, false);
    document.addEventListener("gumshoeDeactivate", function(event) {
        $(event.detail.link).removeClass("is-active");
    }, false);

    var header = document.querySelector("#header");
    spy = new Gumshoe("#sidebar a", {
        navClass: "is-active",
        contentClass: "is-active",
        offset: function() {
            return header.getBoundingClientRect().height;
        },
        events: true
    });

    spy.setup();
    spy.detect();

    $("#main").scroll(function() {
        spy.detect();
    });
});
</script>
`)
}

func (p *DocsPage) WritePageScripts(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageScripts(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *DocsPage) PageScripts() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageScripts(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamcommand(qw422016 *qt422016.Writer, name, desc, level string, extra ...string) {
	qw422016.N().S(`
<dt><code>`)
	qw422016.E().S(name)
	qw422016.N().S(`</code></dt>
<dd>
    <p>
        `)
	qw422016.N().S(desc)
	qw422016.N().S(`
        `)
	streamdocLevelTag(qw422016, level)
	qw422016.N().S(`
    </p>
    `)
	for _, ex := range extra {
		qw422016.N().S(`
    <p>
        `)
		qw422016.N().S(ex)
		qw422016.N().S(`
    </p>
    `)
	}
	qw422016.N().S(`
</dd>
`)
}

func writecommand(qq422016 qtio422016.Writer, name, desc, level string, extra ...string) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamcommand(qw422016, name, desc, level, extra...)
	qt422016.ReleaseWriter(qw422016)
}

func command(name, desc, level string, extra ...string) string {
	qb422016 := qt422016.AcquireByteBuffer()
	writecommand(qb422016, name, desc, level, extra...)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamaction(qw422016 *qt422016.Writer, name, desc string, extra ...string) {
	qw422016.N().S(`
`)
	streamcommand(qw422016, "(_"+name+"_)", desc, "", extra...)
	qw422016.N().S(`
`)
}

func writeaction(qq422016 qtio422016.Writer, name, desc string, extra ...string) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamaction(qw422016, name, desc, extra...)
	qt422016.ReleaseWriter(qw422016)
}

func action(name, desc string, extra ...string) string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeaction(qb422016, name, desc, extra...)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamdocLevelTag(qw422016 *qt422016.Writer, level string) {
	qw422016.N().S(`
`)
	switch level {
	case "everyone":
		qw422016.N().S(`
<span class="tag is-light">Everyone</span>
`)
	case "subs":
		qw422016.N().S(`
<span class="tag is-info">Subs</span>
`)
	case "mods":
		qw422016.N().S(`
<span class="tag is-success">Mods</span>
`)
	case "broadcaster":
		qw422016.N().S(`
<span class="tag is-danger">Broadcaster</span>
`)
	case "admin":
		qw422016.N().S(`
<span class="tag is-black">Admins</span>
`)
	case "varies":
		qw422016.N().S(`
<span class="tag is-warning">Varies</span>
`)
	default:
		qw422016.N().S(`
`)
	}
	qw422016.N().S(`
`)
}

func writedocLevelTag(qq422016 qtio422016.Writer, level string) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamdocLevelTag(qw422016, level)
	qt422016.ReleaseWriter(qw422016)
}

func docLevelTag(level string) string {
	qb422016 := qt422016.AcquireByteBuffer()
	writedocLevelTag(qb422016, level)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}
