// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package botmocks

import (
	"context"
	"sync"

	"github.com/hortbot/hortbot/internal/bot"
)

// Ensure, that ChannelUpdateNotifierMock does implement bot.ChannelUpdateNotifier.
// If this is not the case, regenerate this file with moq.
var _ bot.ChannelUpdateNotifier = &ChannelUpdateNotifierMock{}

// ChannelUpdateNotifierMock is a mock implementation of bot.ChannelUpdateNotifier.
//
//	func TestSomethingThatUsesChannelUpdateNotifier(t *testing.T) {
//
//		// make and configure a mocked bot.ChannelUpdateNotifier
//		mockedChannelUpdateNotifier := &ChannelUpdateNotifierMock{
//			NotifyChannelUpdatesFunc: func(ctx context.Context, botName string) error {
//				panic("mock out the NotifyChannelUpdates method")
//			},
//		}
//
//		// use mockedChannelUpdateNotifier in code that requires bot.ChannelUpdateNotifier
//		// and then make assertions.
//
//	}
type ChannelUpdateNotifierMock struct {
	// NotifyChannelUpdatesFunc mocks the NotifyChannelUpdates method.
	NotifyChannelUpdatesFunc func(ctx context.Context, botName string) error

	// calls tracks calls to the methods.
	calls struct {
		// NotifyChannelUpdates holds details about calls to the NotifyChannelUpdates method.
		NotifyChannelUpdates []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BotName is the botName argument value.
			BotName string
		}
	}
	lockNotifyChannelUpdates sync.RWMutex
}

// NotifyChannelUpdates calls NotifyChannelUpdatesFunc.
func (mock *ChannelUpdateNotifierMock) NotifyChannelUpdates(ctx context.Context, botName string) error {
	if mock.NotifyChannelUpdatesFunc == nil {
		panic("ChannelUpdateNotifierMock.NotifyChannelUpdatesFunc: method is nil but ChannelUpdateNotifier.NotifyChannelUpdates was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		BotName string
	}{
		Ctx:     ctx,
		BotName: botName,
	}
	mock.lockNotifyChannelUpdates.Lock()
	mock.calls.NotifyChannelUpdates = append(mock.calls.NotifyChannelUpdates, callInfo)
	mock.lockNotifyChannelUpdates.Unlock()
	return mock.NotifyChannelUpdatesFunc(ctx, botName)
}

// NotifyChannelUpdatesCalls gets all the calls that were made to NotifyChannelUpdates.
// Check the length with:
//
//	len(mockedChannelUpdateNotifier.NotifyChannelUpdatesCalls())
func (mock *ChannelUpdateNotifierMock) NotifyChannelUpdatesCalls() []struct {
	Ctx     context.Context
	BotName string
} {
	var calls []struct {
		Ctx     context.Context
		BotName string
	}
	mock.lockNotifyChannelUpdates.RLock()
	calls = mock.calls.NotifyChannelUpdates
	mock.lockNotifyChannelUpdates.RUnlock()
	return calls
}

// Ensure, that RandMock does implement bot.Rand.
// If this is not the case, regenerate this file with moq.
var _ bot.Rand = &RandMock{}

// RandMock is a mock implementation of bot.Rand.
//
//	func TestSomethingThatUsesRand(t *testing.T) {
//
//		// make and configure a mocked bot.Rand
//		mockedRand := &RandMock{
//			Float64Func: func() float64 {
//				panic("mock out the Float64 method")
//			},
//			IntnFunc: func(n int) int {
//				panic("mock out the Intn method")
//			},
//		}
//
//		// use mockedRand in code that requires bot.Rand
//		// and then make assertions.
//
//	}
type RandMock struct {
	// Float64Func mocks the Float64 method.
	Float64Func func() float64

	// IntnFunc mocks the Intn method.
	IntnFunc func(n int) int

	// calls tracks calls to the methods.
	calls struct {
		// Float64 holds details about calls to the Float64 method.
		Float64 []struct {
		}
		// Intn holds details about calls to the Intn method.
		Intn []struct {
			// N is the n argument value.
			N int
		}
	}
	lockFloat64 sync.RWMutex
	lockIntn    sync.RWMutex
}

// Float64 calls Float64Func.
func (mock *RandMock) Float64() float64 {
	if mock.Float64Func == nil {
		panic("RandMock.Float64Func: method is nil but Rand.Float64 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockFloat64.Lock()
	mock.calls.Float64 = append(mock.calls.Float64, callInfo)
	mock.lockFloat64.Unlock()
	return mock.Float64Func()
}

// Float64Calls gets all the calls that were made to Float64.
// Check the length with:
//
//	len(mockedRand.Float64Calls())
func (mock *RandMock) Float64Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockFloat64.RLock()
	calls = mock.calls.Float64
	mock.lockFloat64.RUnlock()
	return calls
}

// Intn calls IntnFunc.
func (mock *RandMock) Intn(n int) int {
	if mock.IntnFunc == nil {
		panic("RandMock.IntnFunc: method is nil but Rand.Intn was just called")
	}
	callInfo := struct {
		N int
	}{
		N: n,
	}
	mock.lockIntn.Lock()
	mock.calls.Intn = append(mock.calls.Intn, callInfo)
	mock.lockIntn.Unlock()
	return mock.IntnFunc(n)
}

// IntnCalls gets all the calls that were made to Intn.
// Check the length with:
//
//	len(mockedRand.IntnCalls())
func (mock *RandMock) IntnCalls() []struct {
	N int
} {
	var calls []struct {
		N int
	}
	mock.lockIntn.RLock()
	calls = mock.calls.Intn
	mock.lockIntn.RUnlock()
	return calls
}

// Ensure, that EventsubUpdateNotifierMock does implement bot.EventsubUpdateNotifier.
// If this is not the case, regenerate this file with moq.
var _ bot.EventsubUpdateNotifier = &EventsubUpdateNotifierMock{}

// EventsubUpdateNotifierMock is a mock implementation of bot.EventsubUpdateNotifier.
//
//	func TestSomethingThatUsesEventsubUpdateNotifier(t *testing.T) {
//
//		// make and configure a mocked bot.EventsubUpdateNotifier
//		mockedEventsubUpdateNotifier := &EventsubUpdateNotifierMock{
//			NotifyEventsubUpdatesFunc: func(ctx context.Context) error {
//				panic("mock out the NotifyEventsubUpdates method")
//			},
//		}
//
//		// use mockedEventsubUpdateNotifier in code that requires bot.EventsubUpdateNotifier
//		// and then make assertions.
//
//	}
type EventsubUpdateNotifierMock struct {
	// NotifyEventsubUpdatesFunc mocks the NotifyEventsubUpdates method.
	NotifyEventsubUpdatesFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// NotifyEventsubUpdates holds details about calls to the NotifyEventsubUpdates method.
		NotifyEventsubUpdates []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockNotifyEventsubUpdates sync.RWMutex
}

// NotifyEventsubUpdates calls NotifyEventsubUpdatesFunc.
func (mock *EventsubUpdateNotifierMock) NotifyEventsubUpdates(ctx context.Context) error {
	if mock.NotifyEventsubUpdatesFunc == nil {
		panic("EventsubUpdateNotifierMock.NotifyEventsubUpdatesFunc: method is nil but EventsubUpdateNotifier.NotifyEventsubUpdates was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockNotifyEventsubUpdates.Lock()
	mock.calls.NotifyEventsubUpdates = append(mock.calls.NotifyEventsubUpdates, callInfo)
	mock.lockNotifyEventsubUpdates.Unlock()
	return mock.NotifyEventsubUpdatesFunc(ctx)
}

// NotifyEventsubUpdatesCalls gets all the calls that were made to NotifyEventsubUpdates.
// Check the length with:
//
//	len(mockedEventsubUpdateNotifier.NotifyEventsubUpdatesCalls())
func (mock *EventsubUpdateNotifierMock) NotifyEventsubUpdatesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockNotifyEventsubUpdates.RLock()
	calls = mock.calls.NotifyEventsubUpdates
	mock.lockNotifyEventsubUpdates.RUnlock()
	return calls
}
