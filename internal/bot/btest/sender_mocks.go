// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package btest

import (
	"context"
	"sync"
)

// Ensure, that SenderMock does implement Sender.
// If this is not the case, regenerate this file with moq.
var _ Sender = &SenderMock{}

// SenderMock is a mock implementation of Sender.
//
//	func TestSomethingThatUsesSender(t *testing.T) {
//
//		// make and configure a mocked Sender
//		mockedSender := &SenderMock{
//			SendMessageFunc: func(ctx context.Context, origin string, target string, message string) error {
//				panic("mock out the SendMessage method")
//			},
//		}
//
//		// use mockedSender in code that requires Sender
//		// and then make assertions.
//
//	}
type SenderMock struct {
	// SendMessageFunc mocks the SendMessage method.
	SendMessageFunc func(ctx context.Context, origin string, target string, message string) error

	// calls tracks calls to the methods.
	calls struct {
		// SendMessage holds details about calls to the SendMessage method.
		SendMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Origin is the origin argument value.
			Origin string
			// Target is the target argument value.
			Target string
			// Message is the message argument value.
			Message string
		}
	}
	lockSendMessage sync.RWMutex
}

// SendMessage calls SendMessageFunc.
func (mock *SenderMock) SendMessage(ctx context.Context, origin string, target string, message string) error {
	if mock.SendMessageFunc == nil {
		panic("SenderMock.SendMessageFunc: method is nil but Sender.SendMessage was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Origin  string
		Target  string
		Message string
	}{
		Ctx:     ctx,
		Origin:  origin,
		Target:  target,
		Message: message,
	}
	mock.lockSendMessage.Lock()
	mock.calls.SendMessage = append(mock.calls.SendMessage, callInfo)
	mock.lockSendMessage.Unlock()
	return mock.SendMessageFunc(ctx, origin, target, message)
}

// SendMessageCalls gets all the calls that were made to SendMessage.
// Check the length with:
//
//	len(mockedSender.SendMessageCalls())
func (mock *SenderMock) SendMessageCalls() []struct {
	Ctx     context.Context
	Origin  string
	Target  string
	Message string
} {
	var calls []struct {
		Ctx     context.Context
		Origin  string
		Target  string
		Message string
	}
	mock.lockSendMessage.RLock()
	calls = mock.calls.SendMessage
	mock.lockSendMessage.RUnlock()
	return calls
}
