// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/hortbot/hortbot/internal/db/models"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Autoreply() AutoreplyResolver
	Channel() ChannelResolver
	CommandInfo() CommandInfoResolver
	CommandList() CommandListResolver
	CustomCommand() CustomCommandResolver
	Highlight() HighlightResolver
	Query() QueryResolver
	Quote() QuoteResolver
	RepeatedCommand() RepeatedCommandResolver
	ScheduledCommand() ScheduledCommandResolver
	Variable() VariableResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Autoreply struct {
		Channel     func(childComplexity int) int
		Count       func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Creator     func(childComplexity int) int
		Editor      func(childComplexity int) int
		Num         func(childComplexity int) int
		OrigPattern func(childComplexity int) int
		Response    func(childComplexity int) int
		Trigger     func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	Channel struct {
		Active                      func(childComplexity int) int
		Autoreplies                 func(childComplexity int) int
		BotName                     func(childComplexity int) int
		Bullet                      func(childComplexity int) int
		CommandInfos                func(childComplexity int) int
		CommandLists                func(childComplexity int) int
		Cooldown                    func(childComplexity int) int
		CreatedAt                   func(childComplexity int) int
		CustomCommands              func(childComplexity int) int
		CustomMods                  func(childComplexity int) int
		CustomOwners                func(childComplexity int) int
		CustomRegulars              func(childComplexity int) int
		DisplayName                 func(childComplexity int) int
		DisplayWarnings             func(childComplexity int) int
		EnableFilters               func(childComplexity int) int
		EnableWarnings              func(childComplexity int) int
		ExtraLifeID                 func(childComplexity int) int
		FilterBannedPhrases         func(childComplexity int) int
		FilterBannedPhrasesPatterns func(childComplexity int) int
		FilterCaps                  func(childComplexity int) int
		FilterCapsMinCaps           func(childComplexity int) int
		FilterCapsMinChars          func(childComplexity int) int
		FilterCapsPercentage        func(childComplexity int) int
		FilterEmotes                func(childComplexity int) int
		FilterEmotesMax             func(childComplexity int) int
		FilterEmotesSingle          func(childComplexity int) int
		FilterLinks                 func(childComplexity int) int
		FilterMaxLength             func(childComplexity int) int
		FilterMe                    func(childComplexity int) int
		FilterSymbols               func(childComplexity int) int
		FilterSymbolsMinSymbols     func(childComplexity int) int
		FilterSymbolsPercentage     func(childComplexity int) int
		Highlights                  func(childComplexity int) int
		Ignored                     func(childComplexity int) int
		LastFM                      func(childComplexity int) int
		LastSeen                    func(childComplexity int) int
		MessageCount                func(childComplexity int) int
		Mode                        func(childComplexity int) int
		Name                        func(childComplexity int) int
		ParseYoutube                func(childComplexity int) int
		PermittedLinks              func(childComplexity int) int
		Prefix                      func(childComplexity int) int
		Quotes                      func(childComplexity int) int
		RaffleEnabled               func(childComplexity int) int
		RepeatedCommands            func(childComplexity int) int
		ResubMessage                func(childComplexity int) int
		ResubMessageEnabled         func(childComplexity int) int
		RollCooldown                func(childComplexity int) int
		RollDefault                 func(childComplexity int) int
		RollLevel                   func(childComplexity int) int
		ScheduledCommands           func(childComplexity int) int
		ShouldModerate              func(childComplexity int) int
		SteamID                     func(childComplexity int) int
		SubMessage                  func(childComplexity int) int
		SubMessageEnabled           func(childComplexity int) int
		SubsMayLink                 func(childComplexity int) int
		TimeoutDuration             func(childComplexity int) int
		Tweet                       func(childComplexity int) int
		TwitchID                    func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UrbanEnabled                func(childComplexity int) int
		Variables                   func(childComplexity int) int
	}

	CommandInfo struct {
		AccessLevel      func(childComplexity int) int
		Channel          func(childComplexity int) int
		CommandList      func(childComplexity int) int
		Count            func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Creator          func(childComplexity int) int
		CustomCommand    func(childComplexity int) int
		Editor           func(childComplexity int) int
		LastUsed         func(childComplexity int) int
		Name             func(childComplexity int) int
		RepeatedCommand  func(childComplexity int) int
		ScheduledCommand func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	CommandList struct {
		Channel     func(childComplexity int) int
		CommandInfo func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Items       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	CustomCommand struct {
		Channel     func(childComplexity int) int
		CommandInfo func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Message     func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	Highlight struct {
		Channel       func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		Game          func(childComplexity int) int
		HighlightedAt func(childComplexity int) int
		StartedAt     func(childComplexity int) int
		Status        func(childComplexity int) int
	}

	Query struct {
		ChannelByName     func(childComplexity int, name string) int
		ChannelByTwitchID func(childComplexity int, twitchID int64) int
	}

	Quote struct {
		Channel   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		Creator   func(childComplexity int) int
		Editor    func(childComplexity int) int
		Num       func(childComplexity int) int
		Quote     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	RepeatedCommand struct {
		Channel       func(childComplexity int) int
		CommandInfo   func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		Creator       func(childComplexity int) int
		Delay         func(childComplexity int) int
		Editor        func(childComplexity int) int
		Enabled       func(childComplexity int) int
		InitTimestamp func(childComplexity int) int
		LastCount     func(childComplexity int) int
		MessageDiff   func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	ScheduledCommand struct {
		Channel        func(childComplexity int) int
		CommandInfo    func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		Creator        func(childComplexity int) int
		CronExpression func(childComplexity int) int
		Editor         func(childComplexity int) int
		Enabled        func(childComplexity int) int
		LastCount      func(childComplexity int) int
		MessageDiff    func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}

	Variable struct {
		Channel   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		Name      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		Value     func(childComplexity int) int
	}
}

type AutoreplyResolver interface {
	Channel(ctx context.Context, obj *models.Autoreply) (*models.Channel, error)

	OrigPattern(ctx context.Context, obj *models.Autoreply) (*string, error)
}
type ChannelResolver interface {
	Bullet(ctx context.Context, obj *models.Channel) (*string, error)
	MessageCount(ctx context.Context, obj *models.Channel) (string, error)

	Ignored(ctx context.Context, obj *models.Channel) ([]string, error)
	CustomOwners(ctx context.Context, obj *models.Channel) ([]string, error)
	CustomMods(ctx context.Context, obj *models.Channel) ([]string, error)
	CustomRegulars(ctx context.Context, obj *models.Channel) ([]string, error)
	Cooldown(ctx context.Context, obj *models.Channel) (*int, error)

	PermittedLinks(ctx context.Context, obj *models.Channel) ([]string, error)

	FilterBannedPhrasesPatterns(ctx context.Context, obj *models.Channel) ([]string, error)

	Autoreplies(ctx context.Context, obj *models.Channel) ([]*models.Autoreply, error)
	CommandInfos(ctx context.Context, obj *models.Channel) ([]*models.CommandInfo, error)
	CommandLists(ctx context.Context, obj *models.Channel) ([]*models.CommandList, error)
	CustomCommands(ctx context.Context, obj *models.Channel) ([]*models.CustomCommand, error)
	Highlights(ctx context.Context, obj *models.Channel) ([]*models.Highlight, error)
	Quotes(ctx context.Context, obj *models.Channel) ([]*models.Quote, error)
	RepeatedCommands(ctx context.Context, obj *models.Channel) ([]*models.RepeatedCommand, error)
	ScheduledCommands(ctx context.Context, obj *models.Channel) ([]*models.ScheduledCommand, error)
	Variables(ctx context.Context, obj *models.Channel) ([]*models.Variable, error)
}
type CommandInfoResolver interface {
	Count(ctx context.Context, obj *models.CommandInfo) (string, error)

	LastUsed(ctx context.Context, obj *models.CommandInfo) (*time.Time, error)
	Channel(ctx context.Context, obj *models.CommandInfo) (*models.Channel, error)
	CommandList(ctx context.Context, obj *models.CommandInfo) (*models.CommandList, error)
	CustomCommand(ctx context.Context, obj *models.CommandInfo) (*models.CustomCommand, error)
	RepeatedCommand(ctx context.Context, obj *models.CommandInfo) (*models.RepeatedCommand, error)
	ScheduledCommand(ctx context.Context, obj *models.CommandInfo) (*models.ScheduledCommand, error)
}
type CommandListResolver interface {
	Items(ctx context.Context, obj *models.CommandList) ([]string, error)
	Channel(ctx context.Context, obj *models.CommandList) (*models.Channel, error)
	CommandInfo(ctx context.Context, obj *models.CommandList) (*models.CommandInfo, error)
}
type CustomCommandResolver interface {
	Channel(ctx context.Context, obj *models.CustomCommand) (*models.Channel, error)
	CommandInfo(ctx context.Context, obj *models.CustomCommand) (*models.CommandInfo, error)
}
type HighlightResolver interface {
	StartedAt(ctx context.Context, obj *models.Highlight) (*time.Time, error)

	Channel(ctx context.Context, obj *models.Highlight) (*models.Channel, error)
}
type QueryResolver interface {
	ChannelByName(ctx context.Context, name string) (*models.Channel, error)
	ChannelByTwitchID(ctx context.Context, twitchID int64) (*models.Channel, error)
}
type QuoteResolver interface {
	Channel(ctx context.Context, obj *models.Quote) (*models.Channel, error)
}
type RepeatedCommandResolver interface {
	LastCount(ctx context.Context, obj *models.RepeatedCommand) (string, error)
	InitTimestamp(ctx context.Context, obj *models.RepeatedCommand) (*time.Time, error)

	Channel(ctx context.Context, obj *models.RepeatedCommand) (*models.Channel, error)
	CommandInfo(ctx context.Context, obj *models.RepeatedCommand) (*models.CommandInfo, error)
}
type ScheduledCommandResolver interface {
	LastCount(ctx context.Context, obj *models.ScheduledCommand) (string, error)

	Channel(ctx context.Context, obj *models.ScheduledCommand) (*models.Channel, error)
	CommandInfo(ctx context.Context, obj *models.ScheduledCommand) (*models.CommandInfo, error)
}
type VariableResolver interface {
	Channel(ctx context.Context, obj *models.Variable) (*models.Channel, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Autoreply.channel":
		if e.complexity.Autoreply.Channel == nil {
			break
		}

		return e.complexity.Autoreply.Channel(childComplexity), true

	case "Autoreply.count":
		if e.complexity.Autoreply.Count == nil {
			break
		}

		return e.complexity.Autoreply.Count(childComplexity), true

	case "Autoreply.createdAt":
		if e.complexity.Autoreply.CreatedAt == nil {
			break
		}

		return e.complexity.Autoreply.CreatedAt(childComplexity), true

	case "Autoreply.creator":
		if e.complexity.Autoreply.Creator == nil {
			break
		}

		return e.complexity.Autoreply.Creator(childComplexity), true

	case "Autoreply.editor":
		if e.complexity.Autoreply.Editor == nil {
			break
		}

		return e.complexity.Autoreply.Editor(childComplexity), true

	case "Autoreply.num":
		if e.complexity.Autoreply.Num == nil {
			break
		}

		return e.complexity.Autoreply.Num(childComplexity), true

	case "Autoreply.origPattern":
		if e.complexity.Autoreply.OrigPattern == nil {
			break
		}

		return e.complexity.Autoreply.OrigPattern(childComplexity), true

	case "Autoreply.response":
		if e.complexity.Autoreply.Response == nil {
			break
		}

		return e.complexity.Autoreply.Response(childComplexity), true

	case "Autoreply.trigger":
		if e.complexity.Autoreply.Trigger == nil {
			break
		}

		return e.complexity.Autoreply.Trigger(childComplexity), true

	case "Autoreply.updatedAt":
		if e.complexity.Autoreply.UpdatedAt == nil {
			break
		}

		return e.complexity.Autoreply.UpdatedAt(childComplexity), true

	case "Channel.active":
		if e.complexity.Channel.Active == nil {
			break
		}

		return e.complexity.Channel.Active(childComplexity), true

	case "Channel.autoreplies":
		if e.complexity.Channel.Autoreplies == nil {
			break
		}

		return e.complexity.Channel.Autoreplies(childComplexity), true

	case "Channel.botName":
		if e.complexity.Channel.BotName == nil {
			break
		}

		return e.complexity.Channel.BotName(childComplexity), true

	case "Channel.bullet":
		if e.complexity.Channel.Bullet == nil {
			break
		}

		return e.complexity.Channel.Bullet(childComplexity), true

	case "Channel.commandInfos":
		if e.complexity.Channel.CommandInfos == nil {
			break
		}

		return e.complexity.Channel.CommandInfos(childComplexity), true

	case "Channel.commandLists":
		if e.complexity.Channel.CommandLists == nil {
			break
		}

		return e.complexity.Channel.CommandLists(childComplexity), true

	case "Channel.cooldown":
		if e.complexity.Channel.Cooldown == nil {
			break
		}

		return e.complexity.Channel.Cooldown(childComplexity), true

	case "Channel.createdAt":
		if e.complexity.Channel.CreatedAt == nil {
			break
		}

		return e.complexity.Channel.CreatedAt(childComplexity), true

	case "Channel.customCommands":
		if e.complexity.Channel.CustomCommands == nil {
			break
		}

		return e.complexity.Channel.CustomCommands(childComplexity), true

	case "Channel.customMods":
		if e.complexity.Channel.CustomMods == nil {
			break
		}

		return e.complexity.Channel.CustomMods(childComplexity), true

	case "Channel.customOwners":
		if e.complexity.Channel.CustomOwners == nil {
			break
		}

		return e.complexity.Channel.CustomOwners(childComplexity), true

	case "Channel.customRegulars":
		if e.complexity.Channel.CustomRegulars == nil {
			break
		}

		return e.complexity.Channel.CustomRegulars(childComplexity), true

	case "Channel.displayName":
		if e.complexity.Channel.DisplayName == nil {
			break
		}

		return e.complexity.Channel.DisplayName(childComplexity), true

	case "Channel.displayWarnings":
		if e.complexity.Channel.DisplayWarnings == nil {
			break
		}

		return e.complexity.Channel.DisplayWarnings(childComplexity), true

	case "Channel.enableFilters":
		if e.complexity.Channel.EnableFilters == nil {
			break
		}

		return e.complexity.Channel.EnableFilters(childComplexity), true

	case "Channel.enableWarnings":
		if e.complexity.Channel.EnableWarnings == nil {
			break
		}

		return e.complexity.Channel.EnableWarnings(childComplexity), true

	case "Channel.extraLifeID":
		if e.complexity.Channel.ExtraLifeID == nil {
			break
		}

		return e.complexity.Channel.ExtraLifeID(childComplexity), true

	case "Channel.filterBannedPhrases":
		if e.complexity.Channel.FilterBannedPhrases == nil {
			break
		}

		return e.complexity.Channel.FilterBannedPhrases(childComplexity), true

	case "Channel.filterBannedPhrasesPatterns":
		if e.complexity.Channel.FilterBannedPhrasesPatterns == nil {
			break
		}

		return e.complexity.Channel.FilterBannedPhrasesPatterns(childComplexity), true

	case "Channel.filterCaps":
		if e.complexity.Channel.FilterCaps == nil {
			break
		}

		return e.complexity.Channel.FilterCaps(childComplexity), true

	case "Channel.filterCapsMinCaps":
		if e.complexity.Channel.FilterCapsMinCaps == nil {
			break
		}

		return e.complexity.Channel.FilterCapsMinCaps(childComplexity), true

	case "Channel.filterCapsMinChars":
		if e.complexity.Channel.FilterCapsMinChars == nil {
			break
		}

		return e.complexity.Channel.FilterCapsMinChars(childComplexity), true

	case "Channel.filterCapsPercentage":
		if e.complexity.Channel.FilterCapsPercentage == nil {
			break
		}

		return e.complexity.Channel.FilterCapsPercentage(childComplexity), true

	case "Channel.filterEmotes":
		if e.complexity.Channel.FilterEmotes == nil {
			break
		}

		return e.complexity.Channel.FilterEmotes(childComplexity), true

	case "Channel.filterEmotesMax":
		if e.complexity.Channel.FilterEmotesMax == nil {
			break
		}

		return e.complexity.Channel.FilterEmotesMax(childComplexity), true

	case "Channel.filterEmotesSingle":
		if e.complexity.Channel.FilterEmotesSingle == nil {
			break
		}

		return e.complexity.Channel.FilterEmotesSingle(childComplexity), true

	case "Channel.filterLinks":
		if e.complexity.Channel.FilterLinks == nil {
			break
		}

		return e.complexity.Channel.FilterLinks(childComplexity), true

	case "Channel.filterMaxLength":
		if e.complexity.Channel.FilterMaxLength == nil {
			break
		}

		return e.complexity.Channel.FilterMaxLength(childComplexity), true

	case "Channel.filterMe":
		if e.complexity.Channel.FilterMe == nil {
			break
		}

		return e.complexity.Channel.FilterMe(childComplexity), true

	case "Channel.filterSymbols":
		if e.complexity.Channel.FilterSymbols == nil {
			break
		}

		return e.complexity.Channel.FilterSymbols(childComplexity), true

	case "Channel.filterSymbolsMinSymbols":
		if e.complexity.Channel.FilterSymbolsMinSymbols == nil {
			break
		}

		return e.complexity.Channel.FilterSymbolsMinSymbols(childComplexity), true

	case "Channel.filterSymbolsPercentage":
		if e.complexity.Channel.FilterSymbolsPercentage == nil {
			break
		}

		return e.complexity.Channel.FilterSymbolsPercentage(childComplexity), true

	case "Channel.highlights":
		if e.complexity.Channel.Highlights == nil {
			break
		}

		return e.complexity.Channel.Highlights(childComplexity), true

	case "Channel.ignored":
		if e.complexity.Channel.Ignored == nil {
			break
		}

		return e.complexity.Channel.Ignored(childComplexity), true

	case "Channel.lastFM":
		if e.complexity.Channel.LastFM == nil {
			break
		}

		return e.complexity.Channel.LastFM(childComplexity), true

	case "Channel.lastSeen":
		if e.complexity.Channel.LastSeen == nil {
			break
		}

		return e.complexity.Channel.LastSeen(childComplexity), true

	case "Channel.messageCount":
		if e.complexity.Channel.MessageCount == nil {
			break
		}

		return e.complexity.Channel.MessageCount(childComplexity), true

	case "Channel.mode":
		if e.complexity.Channel.Mode == nil {
			break
		}

		return e.complexity.Channel.Mode(childComplexity), true

	case "Channel.name":
		if e.complexity.Channel.Name == nil {
			break
		}

		return e.complexity.Channel.Name(childComplexity), true

	case "Channel.parseYouTube":
		if e.complexity.Channel.ParseYoutube == nil {
			break
		}

		return e.complexity.Channel.ParseYoutube(childComplexity), true

	case "Channel.permittedLinks":
		if e.complexity.Channel.PermittedLinks == nil {
			break
		}

		return e.complexity.Channel.PermittedLinks(childComplexity), true

	case "Channel.prefix":
		if e.complexity.Channel.Prefix == nil {
			break
		}

		return e.complexity.Channel.Prefix(childComplexity), true

	case "Channel.quotes":
		if e.complexity.Channel.Quotes == nil {
			break
		}

		return e.complexity.Channel.Quotes(childComplexity), true

	case "Channel.raffleEnabled":
		if e.complexity.Channel.RaffleEnabled == nil {
			break
		}

		return e.complexity.Channel.RaffleEnabled(childComplexity), true

	case "Channel.repeatedCommands":
		if e.complexity.Channel.RepeatedCommands == nil {
			break
		}

		return e.complexity.Channel.RepeatedCommands(childComplexity), true

	case "Channel.resubMessage":
		if e.complexity.Channel.ResubMessage == nil {
			break
		}

		return e.complexity.Channel.ResubMessage(childComplexity), true

	case "Channel.resubMessageEnabled":
		if e.complexity.Channel.ResubMessageEnabled == nil {
			break
		}

		return e.complexity.Channel.ResubMessageEnabled(childComplexity), true

	case "Channel.rollCooldown":
		if e.complexity.Channel.RollCooldown == nil {
			break
		}

		return e.complexity.Channel.RollCooldown(childComplexity), true

	case "Channel.rollDefault":
		if e.complexity.Channel.RollDefault == nil {
			break
		}

		return e.complexity.Channel.RollDefault(childComplexity), true

	case "Channel.rollLevel":
		if e.complexity.Channel.RollLevel == nil {
			break
		}

		return e.complexity.Channel.RollLevel(childComplexity), true

	case "Channel.scheduledCommands":
		if e.complexity.Channel.ScheduledCommands == nil {
			break
		}

		return e.complexity.Channel.ScheduledCommands(childComplexity), true

	case "Channel.shouldModerate":
		if e.complexity.Channel.ShouldModerate == nil {
			break
		}

		return e.complexity.Channel.ShouldModerate(childComplexity), true

	case "Channel.steamID":
		if e.complexity.Channel.SteamID == nil {
			break
		}

		return e.complexity.Channel.SteamID(childComplexity), true

	case "Channel.subMessage":
		if e.complexity.Channel.SubMessage == nil {
			break
		}

		return e.complexity.Channel.SubMessage(childComplexity), true

	case "Channel.subMessageEnabled":
		if e.complexity.Channel.SubMessageEnabled == nil {
			break
		}

		return e.complexity.Channel.SubMessageEnabled(childComplexity), true

	case "Channel.subsMayLink":
		if e.complexity.Channel.SubsMayLink == nil {
			break
		}

		return e.complexity.Channel.SubsMayLink(childComplexity), true

	case "Channel.timeoutDuration":
		if e.complexity.Channel.TimeoutDuration == nil {
			break
		}

		return e.complexity.Channel.TimeoutDuration(childComplexity), true

	case "Channel.tweet":
		if e.complexity.Channel.Tweet == nil {
			break
		}

		return e.complexity.Channel.Tweet(childComplexity), true

	case "Channel.twitchID":
		if e.complexity.Channel.TwitchID == nil {
			break
		}

		return e.complexity.Channel.TwitchID(childComplexity), true

	case "Channel.updatedAt":
		if e.complexity.Channel.UpdatedAt == nil {
			break
		}

		return e.complexity.Channel.UpdatedAt(childComplexity), true

	case "Channel.urbanEnabled":
		if e.complexity.Channel.UrbanEnabled == nil {
			break
		}

		return e.complexity.Channel.UrbanEnabled(childComplexity), true

	case "Channel.variables":
		if e.complexity.Channel.Variables == nil {
			break
		}

		return e.complexity.Channel.Variables(childComplexity), true

	case "CommandInfo.accessLevel":
		if e.complexity.CommandInfo.AccessLevel == nil {
			break
		}

		return e.complexity.CommandInfo.AccessLevel(childComplexity), true

	case "CommandInfo.channel":
		if e.complexity.CommandInfo.Channel == nil {
			break
		}

		return e.complexity.CommandInfo.Channel(childComplexity), true

	case "CommandInfo.commandList":
		if e.complexity.CommandInfo.CommandList == nil {
			break
		}

		return e.complexity.CommandInfo.CommandList(childComplexity), true

	case "CommandInfo.count":
		if e.complexity.CommandInfo.Count == nil {
			break
		}

		return e.complexity.CommandInfo.Count(childComplexity), true

	case "CommandInfo.createdAt":
		if e.complexity.CommandInfo.CreatedAt == nil {
			break
		}

		return e.complexity.CommandInfo.CreatedAt(childComplexity), true

	case "CommandInfo.creator":
		if e.complexity.CommandInfo.Creator == nil {
			break
		}

		return e.complexity.CommandInfo.Creator(childComplexity), true

	case "CommandInfo.customCommand":
		if e.complexity.CommandInfo.CustomCommand == nil {
			break
		}

		return e.complexity.CommandInfo.CustomCommand(childComplexity), true

	case "CommandInfo.editor":
		if e.complexity.CommandInfo.Editor == nil {
			break
		}

		return e.complexity.CommandInfo.Editor(childComplexity), true

	case "CommandInfo.lastUsed":
		if e.complexity.CommandInfo.LastUsed == nil {
			break
		}

		return e.complexity.CommandInfo.LastUsed(childComplexity), true

	case "CommandInfo.name":
		if e.complexity.CommandInfo.Name == nil {
			break
		}

		return e.complexity.CommandInfo.Name(childComplexity), true

	case "CommandInfo.repeatedCommand":
		if e.complexity.CommandInfo.RepeatedCommand == nil {
			break
		}

		return e.complexity.CommandInfo.RepeatedCommand(childComplexity), true

	case "CommandInfo.scheduledCommand":
		if e.complexity.CommandInfo.ScheduledCommand == nil {
			break
		}

		return e.complexity.CommandInfo.ScheduledCommand(childComplexity), true

	case "CommandInfo.updatedAt":
		if e.complexity.CommandInfo.UpdatedAt == nil {
			break
		}

		return e.complexity.CommandInfo.UpdatedAt(childComplexity), true

	case "CommandList.channel":
		if e.complexity.CommandList.Channel == nil {
			break
		}

		return e.complexity.CommandList.Channel(childComplexity), true

	case "CommandList.commandInfo":
		if e.complexity.CommandList.CommandInfo == nil {
			break
		}

		return e.complexity.CommandList.CommandInfo(childComplexity), true

	case "CommandList.createdAt":
		if e.complexity.CommandList.CreatedAt == nil {
			break
		}

		return e.complexity.CommandList.CreatedAt(childComplexity), true

	case "CommandList.items":
		if e.complexity.CommandList.Items == nil {
			break
		}

		return e.complexity.CommandList.Items(childComplexity), true

	case "CommandList.updatedAt":
		if e.complexity.CommandList.UpdatedAt == nil {
			break
		}

		return e.complexity.CommandList.UpdatedAt(childComplexity), true

	case "CustomCommand.channel":
		if e.complexity.CustomCommand.Channel == nil {
			break
		}

		return e.complexity.CustomCommand.Channel(childComplexity), true

	case "CustomCommand.commandInfo":
		if e.complexity.CustomCommand.CommandInfo == nil {
			break
		}

		return e.complexity.CustomCommand.CommandInfo(childComplexity), true

	case "CustomCommand.createdAt":
		if e.complexity.CustomCommand.CreatedAt == nil {
			break
		}

		return e.complexity.CustomCommand.CreatedAt(childComplexity), true

	case "CustomCommand.message":
		if e.complexity.CustomCommand.Message == nil {
			break
		}

		return e.complexity.CustomCommand.Message(childComplexity), true

	case "CustomCommand.updatedAt":
		if e.complexity.CustomCommand.UpdatedAt == nil {
			break
		}

		return e.complexity.CustomCommand.UpdatedAt(childComplexity), true

	case "Highlight.channel":
		if e.complexity.Highlight.Channel == nil {
			break
		}

		return e.complexity.Highlight.Channel(childComplexity), true

	case "Highlight.createdAt":
		if e.complexity.Highlight.CreatedAt == nil {
			break
		}

		return e.complexity.Highlight.CreatedAt(childComplexity), true

	case "Highlight.game":
		if e.complexity.Highlight.Game == nil {
			break
		}

		return e.complexity.Highlight.Game(childComplexity), true

	case "Highlight.highlightedAt":
		if e.complexity.Highlight.HighlightedAt == nil {
			break
		}

		return e.complexity.Highlight.HighlightedAt(childComplexity), true

	case "Highlight.startedAt":
		if e.complexity.Highlight.StartedAt == nil {
			break
		}

		return e.complexity.Highlight.StartedAt(childComplexity), true

	case "Highlight.status":
		if e.complexity.Highlight.Status == nil {
			break
		}

		return e.complexity.Highlight.Status(childComplexity), true

	case "Query.channelByName":
		if e.complexity.Query.ChannelByName == nil {
			break
		}

		args, err := ec.field_Query_channelByName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChannelByName(childComplexity, args["name"].(string)), true

	case "Query.channelByTwitchID":
		if e.complexity.Query.ChannelByTwitchID == nil {
			break
		}

		args, err := ec.field_Query_channelByTwitchID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChannelByTwitchID(childComplexity, args["twitchID"].(int64)), true

	case "Quote.channel":
		if e.complexity.Quote.Channel == nil {
			break
		}

		return e.complexity.Quote.Channel(childComplexity), true

	case "Quote.createdAt":
		if e.complexity.Quote.CreatedAt == nil {
			break
		}

		return e.complexity.Quote.CreatedAt(childComplexity), true

	case "Quote.creator":
		if e.complexity.Quote.Creator == nil {
			break
		}

		return e.complexity.Quote.Creator(childComplexity), true

	case "Quote.editor":
		if e.complexity.Quote.Editor == nil {
			break
		}

		return e.complexity.Quote.Editor(childComplexity), true

	case "Quote.num":
		if e.complexity.Quote.Num == nil {
			break
		}

		return e.complexity.Quote.Num(childComplexity), true

	case "Quote.quote":
		if e.complexity.Quote.Quote == nil {
			break
		}

		return e.complexity.Quote.Quote(childComplexity), true

	case "Quote.updatedAt":
		if e.complexity.Quote.UpdatedAt == nil {
			break
		}

		return e.complexity.Quote.UpdatedAt(childComplexity), true

	case "RepeatedCommand.channel":
		if e.complexity.RepeatedCommand.Channel == nil {
			break
		}

		return e.complexity.RepeatedCommand.Channel(childComplexity), true

	case "RepeatedCommand.commandInfo":
		if e.complexity.RepeatedCommand.CommandInfo == nil {
			break
		}

		return e.complexity.RepeatedCommand.CommandInfo(childComplexity), true

	case "RepeatedCommand.createdAt":
		if e.complexity.RepeatedCommand.CreatedAt == nil {
			break
		}

		return e.complexity.RepeatedCommand.CreatedAt(childComplexity), true

	case "RepeatedCommand.creator":
		if e.complexity.RepeatedCommand.Creator == nil {
			break
		}

		return e.complexity.RepeatedCommand.Creator(childComplexity), true

	case "RepeatedCommand.delay":
		if e.complexity.RepeatedCommand.Delay == nil {
			break
		}

		return e.complexity.RepeatedCommand.Delay(childComplexity), true

	case "RepeatedCommand.editor":
		if e.complexity.RepeatedCommand.Editor == nil {
			break
		}

		return e.complexity.RepeatedCommand.Editor(childComplexity), true

	case "RepeatedCommand.enabled":
		if e.complexity.RepeatedCommand.Enabled == nil {
			break
		}

		return e.complexity.RepeatedCommand.Enabled(childComplexity), true

	case "RepeatedCommand.initTimestamp":
		if e.complexity.RepeatedCommand.InitTimestamp == nil {
			break
		}

		return e.complexity.RepeatedCommand.InitTimestamp(childComplexity), true

	case "RepeatedCommand.lastCount":
		if e.complexity.RepeatedCommand.LastCount == nil {
			break
		}

		return e.complexity.RepeatedCommand.LastCount(childComplexity), true

	case "RepeatedCommand.messageDiff":
		if e.complexity.RepeatedCommand.MessageDiff == nil {
			break
		}

		return e.complexity.RepeatedCommand.MessageDiff(childComplexity), true

	case "RepeatedCommand.updatedAt":
		if e.complexity.RepeatedCommand.UpdatedAt == nil {
			break
		}

		return e.complexity.RepeatedCommand.UpdatedAt(childComplexity), true

	case "ScheduledCommand.channel":
		if e.complexity.ScheduledCommand.Channel == nil {
			break
		}

		return e.complexity.ScheduledCommand.Channel(childComplexity), true

	case "ScheduledCommand.commandInfo":
		if e.complexity.ScheduledCommand.CommandInfo == nil {
			break
		}

		return e.complexity.ScheduledCommand.CommandInfo(childComplexity), true

	case "ScheduledCommand.createdAt":
		if e.complexity.ScheduledCommand.CreatedAt == nil {
			break
		}

		return e.complexity.ScheduledCommand.CreatedAt(childComplexity), true

	case "ScheduledCommand.creator":
		if e.complexity.ScheduledCommand.Creator == nil {
			break
		}

		return e.complexity.ScheduledCommand.Creator(childComplexity), true

	case "ScheduledCommand.cronExpression":
		if e.complexity.ScheduledCommand.CronExpression == nil {
			break
		}

		return e.complexity.ScheduledCommand.CronExpression(childComplexity), true

	case "ScheduledCommand.editor":
		if e.complexity.ScheduledCommand.Editor == nil {
			break
		}

		return e.complexity.ScheduledCommand.Editor(childComplexity), true

	case "ScheduledCommand.enabled":
		if e.complexity.ScheduledCommand.Enabled == nil {
			break
		}

		return e.complexity.ScheduledCommand.Enabled(childComplexity), true

	case "ScheduledCommand.lastCount":
		if e.complexity.ScheduledCommand.LastCount == nil {
			break
		}

		return e.complexity.ScheduledCommand.LastCount(childComplexity), true

	case "ScheduledCommand.messageDiff":
		if e.complexity.ScheduledCommand.MessageDiff == nil {
			break
		}

		return e.complexity.ScheduledCommand.MessageDiff(childComplexity), true

	case "ScheduledCommand.updatedAt":
		if e.complexity.ScheduledCommand.UpdatedAt == nil {
			break
		}

		return e.complexity.ScheduledCommand.UpdatedAt(childComplexity), true

	case "Variable.channel":
		if e.complexity.Variable.Channel == nil {
			break
		}

		return e.complexity.Variable.Channel(childComplexity), true

	case "Variable.createdAt":
		if e.complexity.Variable.CreatedAt == nil {
			break
		}

		return e.complexity.Variable.CreatedAt(childComplexity), true

	case "Variable.name":
		if e.complexity.Variable.Name == nil {
			break
		}

		return e.complexity.Variable.Name(childComplexity), true

	case "Variable.updatedAt":
		if e.complexity.Variable.UpdatedAt == nil {
			break
		}

		return e.complexity.Variable.UpdatedAt(childComplexity), true

	case "Variable.value":
		if e.complexity.Variable.Value == nil {
			break
		}

		return e.complexity.Variable.Value(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap()
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema.graphqls", Input: `scalar Time
scalar Int64

type Query {
    channelByName(name: String!): Channel
    channelByTwitchID(twitchID: ID!): Channel
}

type Channel {
    createdAt: Time!
    updatedAt: Time

    twitchID: ID!
    name: String!
    displayName: String!
    botName: String!
    active: Boolean!
    prefix: String!
    bullet: String

    messageCount: Int64!
    mode: String!
    ignored: [String!]!
    customOwners: [String!]!
    customMods: [String!]!
    customRegulars: [String!]!
    cooldown: Int

    lastFM: String!
    parseYouTube: Boolean!
    extraLifeID: Int!
    raffleEnabled: Boolean!
    steamID: String!
    urbanEnabled: Boolean!
    tweet: String!

    rollLevel: String!
    rollCooldown: Int!
    rollDefault: Int!

    shouldModerate: Boolean!
    displayWarnings: Boolean!
    enableWarnings: Boolean!
    timeoutDuration: Int!

    enableFilters: Boolean!
    filterLinks: Boolean!
    permittedLinks: [String!]!
    subsMayLink: Boolean!

    filterCaps: Boolean!
    filterCapsMinChars: Int!
    filterCapsPercentage: Int!
    filterCapsMinCaps: Int!

    filterEmotes: Boolean!
    filterEmotesMax: Int!
    filterEmotesSingle: Boolean!

    filterSymbols: Boolean!
    filterSymbolsPercentage: Int!
    filterSymbolsMinSymbols: Int!

    filterMe: Boolean!
    filterMaxLength: Int!

    filterBannedPhrases: Boolean!
    filterBannedPhrasesPatterns: [String!]!

    subMessage: String!
    subMessageEnabled: Boolean!
    resubMessage: String!
    resubMessageEnabled: Boolean!

    lastSeen: Time!

    autoreplies: [Autoreply!]!
    commandInfos: [CommandInfo!]!
    commandLists: [CommandList!]!
    customCommands: [CustomCommand!]!
    highlights: [Highlight!]!
    quotes: [Quote!]!
    repeatedCommands: [RepeatedCommand!]!
    scheduledCommands: [ScheduledCommand!]!
    variables: [Variable!]!
}

type Autoreply {
    createdAt: Time!
    updatedAt: Time

    channel: Channel!

    num: Int!
    trigger: String!
    origPattern: String
    response: String!
    count: Int!
    creator: String!
    editor: String!
}

type CommandInfo {
    createdAt: Time!
    updatedAt: Time

    name: String!
    accessLevel: String! # Enum?
    count: Int64!
    creator: String!
    editor: String!
    lastUsed: Time

    channel: Channel!
    commandList: CommandList
    customCommand: CustomCommand
    repeatedCommand: RepeatedCommand
    scheduledCommand: ScheduledCommand
}

type CommandList {
    createdAt: Time!
    updatedAt: Time

    items: [String!]!

    channel: Channel!
    commandInfo: CommandInfo!
}

type CustomCommand {
    createdAt: Time!
    updatedAt: Time

    message: String!

    channel: Channel!
    commandInfo: CommandInfo!
}

type Highlight {
    createdAt: Time!

    highlightedAt: Time!
    startedAt: Time
    status: String!
    game: String!

    channel: Channel!
}

type Quote {
    createdAt: Time!
    updatedAt: Time

    num: Int!
    quote: String!
    creator: String!
    editor: String!

    channel: Channel!
}

type RepeatedCommand {
    createdAt: Time!
    updatedAt: Time

    enabled: Boolean!
    delay: Int!
    messageDiff: Int!
    lastCount: Int64!
    initTimestamp: Time
    creator: String!
    editor: String!

    channel: Channel!
    commandInfo: CommandInfo!
}

type ScheduledCommand {
    createdAt: Time!
    updatedAt: Time

    enabled: Boolean!
    cronExpression: String!
    messageDiff: Int!
    lastCount: Int64!
    creator: String!
    editor: String!

    channel: Channel!
    commandInfo: CommandInfo!
}

type Variable {
    createdAt: Time!
    updatedAt: Time

    name: String!
    value: String!

    channel: Channel!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_channelByName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_channelByTwitchID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["twitchID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("twitchID"))
		arg0, err = ec.unmarshalNID2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["twitchID"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Autoreply_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Autoreply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Autoreply_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Autoreply_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Autoreply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Autoreply_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.Autoreply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Autoreply_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Autoreply_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Autoreply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Autoreply_channel(ctx context.Context, field graphql.CollectedField, obj *models.Autoreply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Autoreply_channel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Autoreply().Channel(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Channel)
	fc.Result = res
	return ec.marshalNChannel2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐChannel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Autoreply_channel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Autoreply",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Channel_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Channel_updatedAt(ctx, field)
			case "twitchID":
				return ec.fieldContext_Channel_twitchID(ctx, field)
			case "name":
				return ec.fieldContext_Channel_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Channel_displayName(ctx, field)
			case "botName":
				return ec.fieldContext_Channel_botName(ctx, field)
			case "active":
				return ec.fieldContext_Channel_active(ctx, field)
			case "prefix":
				return ec.fieldContext_Channel_prefix(ctx, field)
			case "bullet":
				return ec.fieldContext_Channel_bullet(ctx, field)
			case "messageCount":
				return ec.fieldContext_Channel_messageCount(ctx, field)
			case "mode":
				return ec.fieldContext_Channel_mode(ctx, field)
			case "ignored":
				return ec.fieldContext_Channel_ignored(ctx, field)
			case "customOwners":
				return ec.fieldContext_Channel_customOwners(ctx, field)
			case "customMods":
				return ec.fieldContext_Channel_customMods(ctx, field)
			case "customRegulars":
				return ec.fieldContext_Channel_customRegulars(ctx, field)
			case "cooldown":
				return ec.fieldContext_Channel_cooldown(ctx, field)
			case "lastFM":
				return ec.fieldContext_Channel_lastFM(ctx, field)
			case "parseYouTube":
				return ec.fieldContext_Channel_parseYouTube(ctx, field)
			case "extraLifeID":
				return ec.fieldContext_Channel_extraLifeID(ctx, field)
			case "raffleEnabled":
				return ec.fieldContext_Channel_raffleEnabled(ctx, field)
			case "steamID":
				return ec.fieldContext_Channel_steamID(ctx, field)
			case "urbanEnabled":
				return ec.fieldContext_Channel_urbanEnabled(ctx, field)
			case "tweet":
				return ec.fieldContext_Channel_tweet(ctx, field)
			case "rollLevel":
				return ec.fieldContext_Channel_rollLevel(ctx, field)
			case "rollCooldown":
				return ec.fieldContext_Channel_rollCooldown(ctx, field)
			case "rollDefault":
				return ec.fieldContext_Channel_rollDefault(ctx, field)
			case "shouldModerate":
				return ec.fieldContext_Channel_shouldModerate(ctx, field)
			case "displayWarnings":
				return ec.fieldContext_Channel_displayWarnings(ctx, field)
			case "enableWarnings":
				return ec.fieldContext_Channel_enableWarnings(ctx, field)
			case "timeoutDuration":
				return ec.fieldContext_Channel_timeoutDuration(ctx, field)
			case "enableFilters":
				return ec.fieldContext_Channel_enableFilters(ctx, field)
			case "filterLinks":
				return ec.fieldContext_Channel_filterLinks(ctx, field)
			case "permittedLinks":
				return ec.fieldContext_Channel_permittedLinks(ctx, field)
			case "subsMayLink":
				return ec.fieldContext_Channel_subsMayLink(ctx, field)
			case "filterCaps":
				return ec.fieldContext_Channel_filterCaps(ctx, field)
			case "filterCapsMinChars":
				return ec.fieldContext_Channel_filterCapsMinChars(ctx, field)
			case "filterCapsPercentage":
				return ec.fieldContext_Channel_filterCapsPercentage(ctx, field)
			case "filterCapsMinCaps":
				return ec.fieldContext_Channel_filterCapsMinCaps(ctx, field)
			case "filterEmotes":
				return ec.fieldContext_Channel_filterEmotes(ctx, field)
			case "filterEmotesMax":
				return ec.fieldContext_Channel_filterEmotesMax(ctx, field)
			case "filterEmotesSingle":
				return ec.fieldContext_Channel_filterEmotesSingle(ctx, field)
			case "filterSymbols":
				return ec.fieldContext_Channel_filterSymbols(ctx, field)
			case "filterSymbolsPercentage":
				return ec.fieldContext_Channel_filterSymbolsPercentage(ctx, field)
			case "filterSymbolsMinSymbols":
				return ec.fieldContext_Channel_filterSymbolsMinSymbols(ctx, field)
			case "filterMe":
				return ec.fieldContext_Channel_filterMe(ctx, field)
			case "filterMaxLength":
				return ec.fieldContext_Channel_filterMaxLength(ctx, field)
			case "filterBannedPhrases":
				return ec.fieldContext_Channel_filterBannedPhrases(ctx, field)
			case "filterBannedPhrasesPatterns":
				return ec.fieldContext_Channel_filterBannedPhrasesPatterns(ctx, field)
			case "subMessage":
				return ec.fieldContext_Channel_subMessage(ctx, field)
			case "subMessageEnabled":
				return ec.fieldContext_Channel_subMessageEnabled(ctx, field)
			case "resubMessage":
				return ec.fieldContext_Channel_resubMessage(ctx, field)
			case "resubMessageEnabled":
				return ec.fieldContext_Channel_resubMessageEnabled(ctx, field)
			case "lastSeen":
				return ec.fieldContext_Channel_lastSeen(ctx, field)
			case "autoreplies":
				return ec.fieldContext_Channel_autoreplies(ctx, field)
			case "commandInfos":
				return ec.fieldContext_Channel_commandInfos(ctx, field)
			case "commandLists":
				return ec.fieldContext_Channel_commandLists(ctx, field)
			case "customCommands":
				return ec.fieldContext_Channel_customCommands(ctx, field)
			case "highlights":
				return ec.fieldContext_Channel_highlights(ctx, field)
			case "quotes":
				return ec.fieldContext_Channel_quotes(ctx, field)
			case "repeatedCommands":
				return ec.fieldContext_Channel_repeatedCommands(ctx, field)
			case "scheduledCommands":
				return ec.fieldContext_Channel_scheduledCommands(ctx, field)
			case "variables":
				return ec.fieldContext_Channel_variables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Channel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Autoreply_num(ctx context.Context, field graphql.CollectedField, obj *models.Autoreply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Autoreply_num(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Num, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Autoreply_num(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Autoreply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Autoreply_trigger(ctx context.Context, field graphql.CollectedField, obj *models.Autoreply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Autoreply_trigger(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trigger, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Autoreply_trigger(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Autoreply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Autoreply_origPattern(ctx context.Context, field graphql.CollectedField, obj *models.Autoreply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Autoreply_origPattern(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Autoreply().OrigPattern(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Autoreply_origPattern(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Autoreply",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Autoreply_response(ctx context.Context, field graphql.CollectedField, obj *models.Autoreply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Autoreply_response(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Response, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Autoreply_response(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Autoreply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Autoreply_count(ctx context.Context, field graphql.CollectedField, obj *models.Autoreply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Autoreply_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Autoreply_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Autoreply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Autoreply_creator(ctx context.Context, field graphql.CollectedField, obj *models.Autoreply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Autoreply_creator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Autoreply_creator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Autoreply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Autoreply_editor(ctx context.Context, field graphql.CollectedField, obj *models.Autoreply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Autoreply_editor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Editor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Autoreply_editor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Autoreply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_twitchID(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_twitchID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TwitchID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNID2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_twitchID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_name(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_displayName(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_botName(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_botName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BotName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_botName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_active(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_prefix(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_prefix(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Prefix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_prefix(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_bullet(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_bullet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channel().Bullet(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_bullet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_messageCount(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_messageCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channel().MessageCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNInt642string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_messageCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_mode(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_mode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_mode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_ignored(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_ignored(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channel().Ignored(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_ignored(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_customOwners(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_customOwners(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channel().CustomOwners(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_customOwners(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_customMods(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_customMods(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channel().CustomMods(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_customMods(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_customRegulars(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_customRegulars(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channel().CustomRegulars(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_customRegulars(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_cooldown(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_cooldown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channel().Cooldown(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_cooldown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_lastFM(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_lastFM(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastFM, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_lastFM(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_parseYouTube(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_parseYouTube(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParseYoutube, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_parseYouTube(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_extraLifeID(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_extraLifeID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExtraLifeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_extraLifeID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_raffleEnabled(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_raffleEnabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RaffleEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_raffleEnabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_steamID(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_steamID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SteamID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_steamID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_urbanEnabled(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_urbanEnabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UrbanEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_urbanEnabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_tweet(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_tweet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tweet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_tweet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_rollLevel(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_rollLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RollLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_rollLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_rollCooldown(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_rollCooldown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RollCooldown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_rollCooldown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_rollDefault(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_rollDefault(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RollDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_rollDefault(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_shouldModerate(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_shouldModerate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldModerate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_shouldModerate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_displayWarnings(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_displayWarnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayWarnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_displayWarnings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_enableWarnings(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_enableWarnings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnableWarnings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_enableWarnings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_timeoutDuration(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_timeoutDuration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeoutDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_timeoutDuration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_enableFilters(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_enableFilters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnableFilters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_enableFilters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_filterLinks(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_filterLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterLinks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_filterLinks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_permittedLinks(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_permittedLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channel().PermittedLinks(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_permittedLinks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_subsMayLink(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_subsMayLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubsMayLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_subsMayLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_filterCaps(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_filterCaps(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterCaps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_filterCaps(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_filterCapsMinChars(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_filterCapsMinChars(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterCapsMinChars, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_filterCapsMinChars(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_filterCapsPercentage(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_filterCapsPercentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterCapsPercentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_filterCapsPercentage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_filterCapsMinCaps(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_filterCapsMinCaps(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterCapsMinCaps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_filterCapsMinCaps(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_filterEmotes(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_filterEmotes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterEmotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_filterEmotes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_filterEmotesMax(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_filterEmotesMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterEmotesMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_filterEmotesMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_filterEmotesSingle(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_filterEmotesSingle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterEmotesSingle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_filterEmotesSingle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_filterSymbols(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_filterSymbols(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterSymbols, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_filterSymbols(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_filterSymbolsPercentage(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_filterSymbolsPercentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterSymbolsPercentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_filterSymbolsPercentage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_filterSymbolsMinSymbols(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_filterSymbolsMinSymbols(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterSymbolsMinSymbols, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_filterSymbolsMinSymbols(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_filterMe(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_filterMe(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterMe, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_filterMe(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_filterMaxLength(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_filterMaxLength(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterMaxLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_filterMaxLength(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_filterBannedPhrases(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_filterBannedPhrases(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterBannedPhrases, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_filterBannedPhrases(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_filterBannedPhrasesPatterns(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_filterBannedPhrasesPatterns(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channel().FilterBannedPhrasesPatterns(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_filterBannedPhrasesPatterns(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_subMessage(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_subMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_subMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_subMessageEnabled(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_subMessageEnabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubMessageEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_subMessageEnabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_resubMessage(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_resubMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResubMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_resubMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_resubMessageEnabled(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_resubMessageEnabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResubMessageEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_resubMessageEnabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_lastSeen(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_lastSeen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastSeen, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_lastSeen(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_autoreplies(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_autoreplies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channel().Autoreplies(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Autoreply)
	fc.Result = res
	return ec.marshalNAutoreply2ᚕᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐAutoreplyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_autoreplies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Autoreply_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Autoreply_updatedAt(ctx, field)
			case "channel":
				return ec.fieldContext_Autoreply_channel(ctx, field)
			case "num":
				return ec.fieldContext_Autoreply_num(ctx, field)
			case "trigger":
				return ec.fieldContext_Autoreply_trigger(ctx, field)
			case "origPattern":
				return ec.fieldContext_Autoreply_origPattern(ctx, field)
			case "response":
				return ec.fieldContext_Autoreply_response(ctx, field)
			case "count":
				return ec.fieldContext_Autoreply_count(ctx, field)
			case "creator":
				return ec.fieldContext_Autoreply_creator(ctx, field)
			case "editor":
				return ec.fieldContext_Autoreply_editor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Autoreply", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_commandInfos(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_commandInfos(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channel().CommandInfos(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CommandInfo)
	fc.Result = res
	return ec.marshalNCommandInfo2ᚕᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐCommandInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_commandInfos(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_CommandInfo_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CommandInfo_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_CommandInfo_name(ctx, field)
			case "accessLevel":
				return ec.fieldContext_CommandInfo_accessLevel(ctx, field)
			case "count":
				return ec.fieldContext_CommandInfo_count(ctx, field)
			case "creator":
				return ec.fieldContext_CommandInfo_creator(ctx, field)
			case "editor":
				return ec.fieldContext_CommandInfo_editor(ctx, field)
			case "lastUsed":
				return ec.fieldContext_CommandInfo_lastUsed(ctx, field)
			case "channel":
				return ec.fieldContext_CommandInfo_channel(ctx, field)
			case "commandList":
				return ec.fieldContext_CommandInfo_commandList(ctx, field)
			case "customCommand":
				return ec.fieldContext_CommandInfo_customCommand(ctx, field)
			case "repeatedCommand":
				return ec.fieldContext_CommandInfo_repeatedCommand(ctx, field)
			case "scheduledCommand":
				return ec.fieldContext_CommandInfo_scheduledCommand(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommandInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_commandLists(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_commandLists(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channel().CommandLists(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CommandList)
	fc.Result = res
	return ec.marshalNCommandList2ᚕᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐCommandListᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_commandLists(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_CommandList_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CommandList_updatedAt(ctx, field)
			case "items":
				return ec.fieldContext_CommandList_items(ctx, field)
			case "channel":
				return ec.fieldContext_CommandList_channel(ctx, field)
			case "commandInfo":
				return ec.fieldContext_CommandList_commandInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommandList", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_customCommands(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_customCommands(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channel().CustomCommands(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CustomCommand)
	fc.Result = res
	return ec.marshalNCustomCommand2ᚕᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐCustomCommandᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_customCommands(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_CustomCommand_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CustomCommand_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_CustomCommand_message(ctx, field)
			case "channel":
				return ec.fieldContext_CustomCommand_channel(ctx, field)
			case "commandInfo":
				return ec.fieldContext_CustomCommand_commandInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomCommand", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_highlights(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_highlights(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channel().Highlights(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Highlight)
	fc.Result = res
	return ec.marshalNHighlight2ᚕᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐHighlightᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_highlights(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Highlight_createdAt(ctx, field)
			case "highlightedAt":
				return ec.fieldContext_Highlight_highlightedAt(ctx, field)
			case "startedAt":
				return ec.fieldContext_Highlight_startedAt(ctx, field)
			case "status":
				return ec.fieldContext_Highlight_status(ctx, field)
			case "game":
				return ec.fieldContext_Highlight_game(ctx, field)
			case "channel":
				return ec.fieldContext_Highlight_channel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Highlight", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_quotes(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_quotes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channel().Quotes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Quote)
	fc.Result = res
	return ec.marshalNQuote2ᚕᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐQuoteᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_quotes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Quote_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Quote_updatedAt(ctx, field)
			case "num":
				return ec.fieldContext_Quote_num(ctx, field)
			case "quote":
				return ec.fieldContext_Quote_quote(ctx, field)
			case "creator":
				return ec.fieldContext_Quote_creator(ctx, field)
			case "editor":
				return ec.fieldContext_Quote_editor(ctx, field)
			case "channel":
				return ec.fieldContext_Quote_channel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Quote", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_repeatedCommands(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_repeatedCommands(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channel().RepeatedCommands(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.RepeatedCommand)
	fc.Result = res
	return ec.marshalNRepeatedCommand2ᚕᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐRepeatedCommandᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_repeatedCommands(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_RepeatedCommand_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_RepeatedCommand_updatedAt(ctx, field)
			case "enabled":
				return ec.fieldContext_RepeatedCommand_enabled(ctx, field)
			case "delay":
				return ec.fieldContext_RepeatedCommand_delay(ctx, field)
			case "messageDiff":
				return ec.fieldContext_RepeatedCommand_messageDiff(ctx, field)
			case "lastCount":
				return ec.fieldContext_RepeatedCommand_lastCount(ctx, field)
			case "initTimestamp":
				return ec.fieldContext_RepeatedCommand_initTimestamp(ctx, field)
			case "creator":
				return ec.fieldContext_RepeatedCommand_creator(ctx, field)
			case "editor":
				return ec.fieldContext_RepeatedCommand_editor(ctx, field)
			case "channel":
				return ec.fieldContext_RepeatedCommand_channel(ctx, field)
			case "commandInfo":
				return ec.fieldContext_RepeatedCommand_commandInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RepeatedCommand", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_scheduledCommands(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_scheduledCommands(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channel().ScheduledCommands(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ScheduledCommand)
	fc.Result = res
	return ec.marshalNScheduledCommand2ᚕᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐScheduledCommandᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_scheduledCommands(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_ScheduledCommand_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ScheduledCommand_updatedAt(ctx, field)
			case "enabled":
				return ec.fieldContext_ScheduledCommand_enabled(ctx, field)
			case "cronExpression":
				return ec.fieldContext_ScheduledCommand_cronExpression(ctx, field)
			case "messageDiff":
				return ec.fieldContext_ScheduledCommand_messageDiff(ctx, field)
			case "lastCount":
				return ec.fieldContext_ScheduledCommand_lastCount(ctx, field)
			case "creator":
				return ec.fieldContext_ScheduledCommand_creator(ctx, field)
			case "editor":
				return ec.fieldContext_ScheduledCommand_editor(ctx, field)
			case "channel":
				return ec.fieldContext_ScheduledCommand_channel(ctx, field)
			case "commandInfo":
				return ec.fieldContext_ScheduledCommand_commandInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ScheduledCommand", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channel_variables(ctx context.Context, field graphql.CollectedField, obj *models.Channel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channel_variables(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channel().Variables(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Variable)
	fc.Result = res
	return ec.marshalNVariable2ᚕᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐVariableᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channel_variables(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Variable_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Variable_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Variable_name(ctx, field)
			case "value":
				return ec.fieldContext_Variable_value(ctx, field)
			case "channel":
				return ec.fieldContext_Variable_channel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Variable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandInfo_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.CommandInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandInfo_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandInfo_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandInfo_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.CommandInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandInfo_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandInfo_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandInfo_name(ctx context.Context, field graphql.CollectedField, obj *models.CommandInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandInfo_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandInfo_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandInfo_accessLevel(ctx context.Context, field graphql.CollectedField, obj *models.CommandInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandInfo_accessLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandInfo_accessLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandInfo_count(ctx context.Context, field graphql.CollectedField, obj *models.CommandInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandInfo_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CommandInfo().Count(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNInt642string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandInfo_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandInfo_creator(ctx context.Context, field graphql.CollectedField, obj *models.CommandInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandInfo_creator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandInfo_creator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandInfo_editor(ctx context.Context, field graphql.CollectedField, obj *models.CommandInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandInfo_editor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Editor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandInfo_editor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandInfo_lastUsed(ctx context.Context, field graphql.CollectedField, obj *models.CommandInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandInfo_lastUsed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CommandInfo().LastUsed(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandInfo_lastUsed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandInfo_channel(ctx context.Context, field graphql.CollectedField, obj *models.CommandInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandInfo_channel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CommandInfo().Channel(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Channel)
	fc.Result = res
	return ec.marshalNChannel2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐChannel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandInfo_channel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Channel_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Channel_updatedAt(ctx, field)
			case "twitchID":
				return ec.fieldContext_Channel_twitchID(ctx, field)
			case "name":
				return ec.fieldContext_Channel_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Channel_displayName(ctx, field)
			case "botName":
				return ec.fieldContext_Channel_botName(ctx, field)
			case "active":
				return ec.fieldContext_Channel_active(ctx, field)
			case "prefix":
				return ec.fieldContext_Channel_prefix(ctx, field)
			case "bullet":
				return ec.fieldContext_Channel_bullet(ctx, field)
			case "messageCount":
				return ec.fieldContext_Channel_messageCount(ctx, field)
			case "mode":
				return ec.fieldContext_Channel_mode(ctx, field)
			case "ignored":
				return ec.fieldContext_Channel_ignored(ctx, field)
			case "customOwners":
				return ec.fieldContext_Channel_customOwners(ctx, field)
			case "customMods":
				return ec.fieldContext_Channel_customMods(ctx, field)
			case "customRegulars":
				return ec.fieldContext_Channel_customRegulars(ctx, field)
			case "cooldown":
				return ec.fieldContext_Channel_cooldown(ctx, field)
			case "lastFM":
				return ec.fieldContext_Channel_lastFM(ctx, field)
			case "parseYouTube":
				return ec.fieldContext_Channel_parseYouTube(ctx, field)
			case "extraLifeID":
				return ec.fieldContext_Channel_extraLifeID(ctx, field)
			case "raffleEnabled":
				return ec.fieldContext_Channel_raffleEnabled(ctx, field)
			case "steamID":
				return ec.fieldContext_Channel_steamID(ctx, field)
			case "urbanEnabled":
				return ec.fieldContext_Channel_urbanEnabled(ctx, field)
			case "tweet":
				return ec.fieldContext_Channel_tweet(ctx, field)
			case "rollLevel":
				return ec.fieldContext_Channel_rollLevel(ctx, field)
			case "rollCooldown":
				return ec.fieldContext_Channel_rollCooldown(ctx, field)
			case "rollDefault":
				return ec.fieldContext_Channel_rollDefault(ctx, field)
			case "shouldModerate":
				return ec.fieldContext_Channel_shouldModerate(ctx, field)
			case "displayWarnings":
				return ec.fieldContext_Channel_displayWarnings(ctx, field)
			case "enableWarnings":
				return ec.fieldContext_Channel_enableWarnings(ctx, field)
			case "timeoutDuration":
				return ec.fieldContext_Channel_timeoutDuration(ctx, field)
			case "enableFilters":
				return ec.fieldContext_Channel_enableFilters(ctx, field)
			case "filterLinks":
				return ec.fieldContext_Channel_filterLinks(ctx, field)
			case "permittedLinks":
				return ec.fieldContext_Channel_permittedLinks(ctx, field)
			case "subsMayLink":
				return ec.fieldContext_Channel_subsMayLink(ctx, field)
			case "filterCaps":
				return ec.fieldContext_Channel_filterCaps(ctx, field)
			case "filterCapsMinChars":
				return ec.fieldContext_Channel_filterCapsMinChars(ctx, field)
			case "filterCapsPercentage":
				return ec.fieldContext_Channel_filterCapsPercentage(ctx, field)
			case "filterCapsMinCaps":
				return ec.fieldContext_Channel_filterCapsMinCaps(ctx, field)
			case "filterEmotes":
				return ec.fieldContext_Channel_filterEmotes(ctx, field)
			case "filterEmotesMax":
				return ec.fieldContext_Channel_filterEmotesMax(ctx, field)
			case "filterEmotesSingle":
				return ec.fieldContext_Channel_filterEmotesSingle(ctx, field)
			case "filterSymbols":
				return ec.fieldContext_Channel_filterSymbols(ctx, field)
			case "filterSymbolsPercentage":
				return ec.fieldContext_Channel_filterSymbolsPercentage(ctx, field)
			case "filterSymbolsMinSymbols":
				return ec.fieldContext_Channel_filterSymbolsMinSymbols(ctx, field)
			case "filterMe":
				return ec.fieldContext_Channel_filterMe(ctx, field)
			case "filterMaxLength":
				return ec.fieldContext_Channel_filterMaxLength(ctx, field)
			case "filterBannedPhrases":
				return ec.fieldContext_Channel_filterBannedPhrases(ctx, field)
			case "filterBannedPhrasesPatterns":
				return ec.fieldContext_Channel_filterBannedPhrasesPatterns(ctx, field)
			case "subMessage":
				return ec.fieldContext_Channel_subMessage(ctx, field)
			case "subMessageEnabled":
				return ec.fieldContext_Channel_subMessageEnabled(ctx, field)
			case "resubMessage":
				return ec.fieldContext_Channel_resubMessage(ctx, field)
			case "resubMessageEnabled":
				return ec.fieldContext_Channel_resubMessageEnabled(ctx, field)
			case "lastSeen":
				return ec.fieldContext_Channel_lastSeen(ctx, field)
			case "autoreplies":
				return ec.fieldContext_Channel_autoreplies(ctx, field)
			case "commandInfos":
				return ec.fieldContext_Channel_commandInfos(ctx, field)
			case "commandLists":
				return ec.fieldContext_Channel_commandLists(ctx, field)
			case "customCommands":
				return ec.fieldContext_Channel_customCommands(ctx, field)
			case "highlights":
				return ec.fieldContext_Channel_highlights(ctx, field)
			case "quotes":
				return ec.fieldContext_Channel_quotes(ctx, field)
			case "repeatedCommands":
				return ec.fieldContext_Channel_repeatedCommands(ctx, field)
			case "scheduledCommands":
				return ec.fieldContext_Channel_scheduledCommands(ctx, field)
			case "variables":
				return ec.fieldContext_Channel_variables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Channel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandInfo_commandList(ctx context.Context, field graphql.CollectedField, obj *models.CommandInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandInfo_commandList(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CommandInfo().CommandList(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CommandList)
	fc.Result = res
	return ec.marshalOCommandList2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐCommandList(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandInfo_commandList(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_CommandList_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CommandList_updatedAt(ctx, field)
			case "items":
				return ec.fieldContext_CommandList_items(ctx, field)
			case "channel":
				return ec.fieldContext_CommandList_channel(ctx, field)
			case "commandInfo":
				return ec.fieldContext_CommandList_commandInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommandList", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandInfo_customCommand(ctx context.Context, field graphql.CollectedField, obj *models.CommandInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandInfo_customCommand(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CommandInfo().CustomCommand(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CustomCommand)
	fc.Result = res
	return ec.marshalOCustomCommand2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐCustomCommand(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandInfo_customCommand(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_CustomCommand_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CustomCommand_updatedAt(ctx, field)
			case "message":
				return ec.fieldContext_CustomCommand_message(ctx, field)
			case "channel":
				return ec.fieldContext_CustomCommand_channel(ctx, field)
			case "commandInfo":
				return ec.fieldContext_CustomCommand_commandInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomCommand", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandInfo_repeatedCommand(ctx context.Context, field graphql.CollectedField, obj *models.CommandInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandInfo_repeatedCommand(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CommandInfo().RepeatedCommand(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RepeatedCommand)
	fc.Result = res
	return ec.marshalORepeatedCommand2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐRepeatedCommand(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandInfo_repeatedCommand(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_RepeatedCommand_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_RepeatedCommand_updatedAt(ctx, field)
			case "enabled":
				return ec.fieldContext_RepeatedCommand_enabled(ctx, field)
			case "delay":
				return ec.fieldContext_RepeatedCommand_delay(ctx, field)
			case "messageDiff":
				return ec.fieldContext_RepeatedCommand_messageDiff(ctx, field)
			case "lastCount":
				return ec.fieldContext_RepeatedCommand_lastCount(ctx, field)
			case "initTimestamp":
				return ec.fieldContext_RepeatedCommand_initTimestamp(ctx, field)
			case "creator":
				return ec.fieldContext_RepeatedCommand_creator(ctx, field)
			case "editor":
				return ec.fieldContext_RepeatedCommand_editor(ctx, field)
			case "channel":
				return ec.fieldContext_RepeatedCommand_channel(ctx, field)
			case "commandInfo":
				return ec.fieldContext_RepeatedCommand_commandInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RepeatedCommand", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandInfo_scheduledCommand(ctx context.Context, field graphql.CollectedField, obj *models.CommandInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandInfo_scheduledCommand(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CommandInfo().ScheduledCommand(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ScheduledCommand)
	fc.Result = res
	return ec.marshalOScheduledCommand2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐScheduledCommand(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandInfo_scheduledCommand(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_ScheduledCommand_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ScheduledCommand_updatedAt(ctx, field)
			case "enabled":
				return ec.fieldContext_ScheduledCommand_enabled(ctx, field)
			case "cronExpression":
				return ec.fieldContext_ScheduledCommand_cronExpression(ctx, field)
			case "messageDiff":
				return ec.fieldContext_ScheduledCommand_messageDiff(ctx, field)
			case "lastCount":
				return ec.fieldContext_ScheduledCommand_lastCount(ctx, field)
			case "creator":
				return ec.fieldContext_ScheduledCommand_creator(ctx, field)
			case "editor":
				return ec.fieldContext_ScheduledCommand_editor(ctx, field)
			case "channel":
				return ec.fieldContext_ScheduledCommand_channel(ctx, field)
			case "commandInfo":
				return ec.fieldContext_ScheduledCommand_commandInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ScheduledCommand", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandList_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.CommandList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandList_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandList_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandList_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.CommandList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandList_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandList_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandList_items(ctx context.Context, field graphql.CollectedField, obj *models.CommandList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandList_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CommandList().Items(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandList_items(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandList",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandList_channel(ctx context.Context, field graphql.CollectedField, obj *models.CommandList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandList_channel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CommandList().Channel(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Channel)
	fc.Result = res
	return ec.marshalNChannel2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐChannel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandList_channel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandList",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Channel_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Channel_updatedAt(ctx, field)
			case "twitchID":
				return ec.fieldContext_Channel_twitchID(ctx, field)
			case "name":
				return ec.fieldContext_Channel_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Channel_displayName(ctx, field)
			case "botName":
				return ec.fieldContext_Channel_botName(ctx, field)
			case "active":
				return ec.fieldContext_Channel_active(ctx, field)
			case "prefix":
				return ec.fieldContext_Channel_prefix(ctx, field)
			case "bullet":
				return ec.fieldContext_Channel_bullet(ctx, field)
			case "messageCount":
				return ec.fieldContext_Channel_messageCount(ctx, field)
			case "mode":
				return ec.fieldContext_Channel_mode(ctx, field)
			case "ignored":
				return ec.fieldContext_Channel_ignored(ctx, field)
			case "customOwners":
				return ec.fieldContext_Channel_customOwners(ctx, field)
			case "customMods":
				return ec.fieldContext_Channel_customMods(ctx, field)
			case "customRegulars":
				return ec.fieldContext_Channel_customRegulars(ctx, field)
			case "cooldown":
				return ec.fieldContext_Channel_cooldown(ctx, field)
			case "lastFM":
				return ec.fieldContext_Channel_lastFM(ctx, field)
			case "parseYouTube":
				return ec.fieldContext_Channel_parseYouTube(ctx, field)
			case "extraLifeID":
				return ec.fieldContext_Channel_extraLifeID(ctx, field)
			case "raffleEnabled":
				return ec.fieldContext_Channel_raffleEnabled(ctx, field)
			case "steamID":
				return ec.fieldContext_Channel_steamID(ctx, field)
			case "urbanEnabled":
				return ec.fieldContext_Channel_urbanEnabled(ctx, field)
			case "tweet":
				return ec.fieldContext_Channel_tweet(ctx, field)
			case "rollLevel":
				return ec.fieldContext_Channel_rollLevel(ctx, field)
			case "rollCooldown":
				return ec.fieldContext_Channel_rollCooldown(ctx, field)
			case "rollDefault":
				return ec.fieldContext_Channel_rollDefault(ctx, field)
			case "shouldModerate":
				return ec.fieldContext_Channel_shouldModerate(ctx, field)
			case "displayWarnings":
				return ec.fieldContext_Channel_displayWarnings(ctx, field)
			case "enableWarnings":
				return ec.fieldContext_Channel_enableWarnings(ctx, field)
			case "timeoutDuration":
				return ec.fieldContext_Channel_timeoutDuration(ctx, field)
			case "enableFilters":
				return ec.fieldContext_Channel_enableFilters(ctx, field)
			case "filterLinks":
				return ec.fieldContext_Channel_filterLinks(ctx, field)
			case "permittedLinks":
				return ec.fieldContext_Channel_permittedLinks(ctx, field)
			case "subsMayLink":
				return ec.fieldContext_Channel_subsMayLink(ctx, field)
			case "filterCaps":
				return ec.fieldContext_Channel_filterCaps(ctx, field)
			case "filterCapsMinChars":
				return ec.fieldContext_Channel_filterCapsMinChars(ctx, field)
			case "filterCapsPercentage":
				return ec.fieldContext_Channel_filterCapsPercentage(ctx, field)
			case "filterCapsMinCaps":
				return ec.fieldContext_Channel_filterCapsMinCaps(ctx, field)
			case "filterEmotes":
				return ec.fieldContext_Channel_filterEmotes(ctx, field)
			case "filterEmotesMax":
				return ec.fieldContext_Channel_filterEmotesMax(ctx, field)
			case "filterEmotesSingle":
				return ec.fieldContext_Channel_filterEmotesSingle(ctx, field)
			case "filterSymbols":
				return ec.fieldContext_Channel_filterSymbols(ctx, field)
			case "filterSymbolsPercentage":
				return ec.fieldContext_Channel_filterSymbolsPercentage(ctx, field)
			case "filterSymbolsMinSymbols":
				return ec.fieldContext_Channel_filterSymbolsMinSymbols(ctx, field)
			case "filterMe":
				return ec.fieldContext_Channel_filterMe(ctx, field)
			case "filterMaxLength":
				return ec.fieldContext_Channel_filterMaxLength(ctx, field)
			case "filterBannedPhrases":
				return ec.fieldContext_Channel_filterBannedPhrases(ctx, field)
			case "filterBannedPhrasesPatterns":
				return ec.fieldContext_Channel_filterBannedPhrasesPatterns(ctx, field)
			case "subMessage":
				return ec.fieldContext_Channel_subMessage(ctx, field)
			case "subMessageEnabled":
				return ec.fieldContext_Channel_subMessageEnabled(ctx, field)
			case "resubMessage":
				return ec.fieldContext_Channel_resubMessage(ctx, field)
			case "resubMessageEnabled":
				return ec.fieldContext_Channel_resubMessageEnabled(ctx, field)
			case "lastSeen":
				return ec.fieldContext_Channel_lastSeen(ctx, field)
			case "autoreplies":
				return ec.fieldContext_Channel_autoreplies(ctx, field)
			case "commandInfos":
				return ec.fieldContext_Channel_commandInfos(ctx, field)
			case "commandLists":
				return ec.fieldContext_Channel_commandLists(ctx, field)
			case "customCommands":
				return ec.fieldContext_Channel_customCommands(ctx, field)
			case "highlights":
				return ec.fieldContext_Channel_highlights(ctx, field)
			case "quotes":
				return ec.fieldContext_Channel_quotes(ctx, field)
			case "repeatedCommands":
				return ec.fieldContext_Channel_repeatedCommands(ctx, field)
			case "scheduledCommands":
				return ec.fieldContext_Channel_scheduledCommands(ctx, field)
			case "variables":
				return ec.fieldContext_Channel_variables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Channel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandList_commandInfo(ctx context.Context, field graphql.CollectedField, obj *models.CommandList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandList_commandInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CommandList().CommandInfo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CommandInfo)
	fc.Result = res
	return ec.marshalNCommandInfo2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐCommandInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandList_commandInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandList",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_CommandInfo_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CommandInfo_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_CommandInfo_name(ctx, field)
			case "accessLevel":
				return ec.fieldContext_CommandInfo_accessLevel(ctx, field)
			case "count":
				return ec.fieldContext_CommandInfo_count(ctx, field)
			case "creator":
				return ec.fieldContext_CommandInfo_creator(ctx, field)
			case "editor":
				return ec.fieldContext_CommandInfo_editor(ctx, field)
			case "lastUsed":
				return ec.fieldContext_CommandInfo_lastUsed(ctx, field)
			case "channel":
				return ec.fieldContext_CommandInfo_channel(ctx, field)
			case "commandList":
				return ec.fieldContext_CommandInfo_commandList(ctx, field)
			case "customCommand":
				return ec.fieldContext_CommandInfo_customCommand(ctx, field)
			case "repeatedCommand":
				return ec.fieldContext_CommandInfo_repeatedCommand(ctx, field)
			case "scheduledCommand":
				return ec.fieldContext_CommandInfo_scheduledCommand(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommandInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomCommand_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.CustomCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomCommand_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomCommand_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomCommand_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.CustomCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomCommand_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomCommand_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomCommand_message(ctx context.Context, field graphql.CollectedField, obj *models.CustomCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomCommand_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomCommand_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomCommand_channel(ctx context.Context, field graphql.CollectedField, obj *models.CustomCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomCommand_channel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CustomCommand().Channel(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Channel)
	fc.Result = res
	return ec.marshalNChannel2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐChannel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomCommand_channel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomCommand",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Channel_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Channel_updatedAt(ctx, field)
			case "twitchID":
				return ec.fieldContext_Channel_twitchID(ctx, field)
			case "name":
				return ec.fieldContext_Channel_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Channel_displayName(ctx, field)
			case "botName":
				return ec.fieldContext_Channel_botName(ctx, field)
			case "active":
				return ec.fieldContext_Channel_active(ctx, field)
			case "prefix":
				return ec.fieldContext_Channel_prefix(ctx, field)
			case "bullet":
				return ec.fieldContext_Channel_bullet(ctx, field)
			case "messageCount":
				return ec.fieldContext_Channel_messageCount(ctx, field)
			case "mode":
				return ec.fieldContext_Channel_mode(ctx, field)
			case "ignored":
				return ec.fieldContext_Channel_ignored(ctx, field)
			case "customOwners":
				return ec.fieldContext_Channel_customOwners(ctx, field)
			case "customMods":
				return ec.fieldContext_Channel_customMods(ctx, field)
			case "customRegulars":
				return ec.fieldContext_Channel_customRegulars(ctx, field)
			case "cooldown":
				return ec.fieldContext_Channel_cooldown(ctx, field)
			case "lastFM":
				return ec.fieldContext_Channel_lastFM(ctx, field)
			case "parseYouTube":
				return ec.fieldContext_Channel_parseYouTube(ctx, field)
			case "extraLifeID":
				return ec.fieldContext_Channel_extraLifeID(ctx, field)
			case "raffleEnabled":
				return ec.fieldContext_Channel_raffleEnabled(ctx, field)
			case "steamID":
				return ec.fieldContext_Channel_steamID(ctx, field)
			case "urbanEnabled":
				return ec.fieldContext_Channel_urbanEnabled(ctx, field)
			case "tweet":
				return ec.fieldContext_Channel_tweet(ctx, field)
			case "rollLevel":
				return ec.fieldContext_Channel_rollLevel(ctx, field)
			case "rollCooldown":
				return ec.fieldContext_Channel_rollCooldown(ctx, field)
			case "rollDefault":
				return ec.fieldContext_Channel_rollDefault(ctx, field)
			case "shouldModerate":
				return ec.fieldContext_Channel_shouldModerate(ctx, field)
			case "displayWarnings":
				return ec.fieldContext_Channel_displayWarnings(ctx, field)
			case "enableWarnings":
				return ec.fieldContext_Channel_enableWarnings(ctx, field)
			case "timeoutDuration":
				return ec.fieldContext_Channel_timeoutDuration(ctx, field)
			case "enableFilters":
				return ec.fieldContext_Channel_enableFilters(ctx, field)
			case "filterLinks":
				return ec.fieldContext_Channel_filterLinks(ctx, field)
			case "permittedLinks":
				return ec.fieldContext_Channel_permittedLinks(ctx, field)
			case "subsMayLink":
				return ec.fieldContext_Channel_subsMayLink(ctx, field)
			case "filterCaps":
				return ec.fieldContext_Channel_filterCaps(ctx, field)
			case "filterCapsMinChars":
				return ec.fieldContext_Channel_filterCapsMinChars(ctx, field)
			case "filterCapsPercentage":
				return ec.fieldContext_Channel_filterCapsPercentage(ctx, field)
			case "filterCapsMinCaps":
				return ec.fieldContext_Channel_filterCapsMinCaps(ctx, field)
			case "filterEmotes":
				return ec.fieldContext_Channel_filterEmotes(ctx, field)
			case "filterEmotesMax":
				return ec.fieldContext_Channel_filterEmotesMax(ctx, field)
			case "filterEmotesSingle":
				return ec.fieldContext_Channel_filterEmotesSingle(ctx, field)
			case "filterSymbols":
				return ec.fieldContext_Channel_filterSymbols(ctx, field)
			case "filterSymbolsPercentage":
				return ec.fieldContext_Channel_filterSymbolsPercentage(ctx, field)
			case "filterSymbolsMinSymbols":
				return ec.fieldContext_Channel_filterSymbolsMinSymbols(ctx, field)
			case "filterMe":
				return ec.fieldContext_Channel_filterMe(ctx, field)
			case "filterMaxLength":
				return ec.fieldContext_Channel_filterMaxLength(ctx, field)
			case "filterBannedPhrases":
				return ec.fieldContext_Channel_filterBannedPhrases(ctx, field)
			case "filterBannedPhrasesPatterns":
				return ec.fieldContext_Channel_filterBannedPhrasesPatterns(ctx, field)
			case "subMessage":
				return ec.fieldContext_Channel_subMessage(ctx, field)
			case "subMessageEnabled":
				return ec.fieldContext_Channel_subMessageEnabled(ctx, field)
			case "resubMessage":
				return ec.fieldContext_Channel_resubMessage(ctx, field)
			case "resubMessageEnabled":
				return ec.fieldContext_Channel_resubMessageEnabled(ctx, field)
			case "lastSeen":
				return ec.fieldContext_Channel_lastSeen(ctx, field)
			case "autoreplies":
				return ec.fieldContext_Channel_autoreplies(ctx, field)
			case "commandInfos":
				return ec.fieldContext_Channel_commandInfos(ctx, field)
			case "commandLists":
				return ec.fieldContext_Channel_commandLists(ctx, field)
			case "customCommands":
				return ec.fieldContext_Channel_customCommands(ctx, field)
			case "highlights":
				return ec.fieldContext_Channel_highlights(ctx, field)
			case "quotes":
				return ec.fieldContext_Channel_quotes(ctx, field)
			case "repeatedCommands":
				return ec.fieldContext_Channel_repeatedCommands(ctx, field)
			case "scheduledCommands":
				return ec.fieldContext_Channel_scheduledCommands(ctx, field)
			case "variables":
				return ec.fieldContext_Channel_variables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Channel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomCommand_commandInfo(ctx context.Context, field graphql.CollectedField, obj *models.CustomCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomCommand_commandInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CustomCommand().CommandInfo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CommandInfo)
	fc.Result = res
	return ec.marshalNCommandInfo2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐCommandInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomCommand_commandInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomCommand",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_CommandInfo_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CommandInfo_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_CommandInfo_name(ctx, field)
			case "accessLevel":
				return ec.fieldContext_CommandInfo_accessLevel(ctx, field)
			case "count":
				return ec.fieldContext_CommandInfo_count(ctx, field)
			case "creator":
				return ec.fieldContext_CommandInfo_creator(ctx, field)
			case "editor":
				return ec.fieldContext_CommandInfo_editor(ctx, field)
			case "lastUsed":
				return ec.fieldContext_CommandInfo_lastUsed(ctx, field)
			case "channel":
				return ec.fieldContext_CommandInfo_channel(ctx, field)
			case "commandList":
				return ec.fieldContext_CommandInfo_commandList(ctx, field)
			case "customCommand":
				return ec.fieldContext_CommandInfo_customCommand(ctx, field)
			case "repeatedCommand":
				return ec.fieldContext_CommandInfo_repeatedCommand(ctx, field)
			case "scheduledCommand":
				return ec.fieldContext_CommandInfo_scheduledCommand(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommandInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Highlight_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Highlight) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Highlight_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Highlight_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Highlight",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Highlight_highlightedAt(ctx context.Context, field graphql.CollectedField, obj *models.Highlight) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Highlight_highlightedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HighlightedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Highlight_highlightedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Highlight",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Highlight_startedAt(ctx context.Context, field graphql.CollectedField, obj *models.Highlight) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Highlight_startedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Highlight().StartedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Highlight_startedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Highlight",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Highlight_status(ctx context.Context, field graphql.CollectedField, obj *models.Highlight) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Highlight_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Highlight_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Highlight",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Highlight_game(ctx context.Context, field graphql.CollectedField, obj *models.Highlight) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Highlight_game(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Game, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Highlight_game(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Highlight",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Highlight_channel(ctx context.Context, field graphql.CollectedField, obj *models.Highlight) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Highlight_channel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Highlight().Channel(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Channel)
	fc.Result = res
	return ec.marshalNChannel2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐChannel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Highlight_channel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Highlight",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Channel_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Channel_updatedAt(ctx, field)
			case "twitchID":
				return ec.fieldContext_Channel_twitchID(ctx, field)
			case "name":
				return ec.fieldContext_Channel_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Channel_displayName(ctx, field)
			case "botName":
				return ec.fieldContext_Channel_botName(ctx, field)
			case "active":
				return ec.fieldContext_Channel_active(ctx, field)
			case "prefix":
				return ec.fieldContext_Channel_prefix(ctx, field)
			case "bullet":
				return ec.fieldContext_Channel_bullet(ctx, field)
			case "messageCount":
				return ec.fieldContext_Channel_messageCount(ctx, field)
			case "mode":
				return ec.fieldContext_Channel_mode(ctx, field)
			case "ignored":
				return ec.fieldContext_Channel_ignored(ctx, field)
			case "customOwners":
				return ec.fieldContext_Channel_customOwners(ctx, field)
			case "customMods":
				return ec.fieldContext_Channel_customMods(ctx, field)
			case "customRegulars":
				return ec.fieldContext_Channel_customRegulars(ctx, field)
			case "cooldown":
				return ec.fieldContext_Channel_cooldown(ctx, field)
			case "lastFM":
				return ec.fieldContext_Channel_lastFM(ctx, field)
			case "parseYouTube":
				return ec.fieldContext_Channel_parseYouTube(ctx, field)
			case "extraLifeID":
				return ec.fieldContext_Channel_extraLifeID(ctx, field)
			case "raffleEnabled":
				return ec.fieldContext_Channel_raffleEnabled(ctx, field)
			case "steamID":
				return ec.fieldContext_Channel_steamID(ctx, field)
			case "urbanEnabled":
				return ec.fieldContext_Channel_urbanEnabled(ctx, field)
			case "tweet":
				return ec.fieldContext_Channel_tweet(ctx, field)
			case "rollLevel":
				return ec.fieldContext_Channel_rollLevel(ctx, field)
			case "rollCooldown":
				return ec.fieldContext_Channel_rollCooldown(ctx, field)
			case "rollDefault":
				return ec.fieldContext_Channel_rollDefault(ctx, field)
			case "shouldModerate":
				return ec.fieldContext_Channel_shouldModerate(ctx, field)
			case "displayWarnings":
				return ec.fieldContext_Channel_displayWarnings(ctx, field)
			case "enableWarnings":
				return ec.fieldContext_Channel_enableWarnings(ctx, field)
			case "timeoutDuration":
				return ec.fieldContext_Channel_timeoutDuration(ctx, field)
			case "enableFilters":
				return ec.fieldContext_Channel_enableFilters(ctx, field)
			case "filterLinks":
				return ec.fieldContext_Channel_filterLinks(ctx, field)
			case "permittedLinks":
				return ec.fieldContext_Channel_permittedLinks(ctx, field)
			case "subsMayLink":
				return ec.fieldContext_Channel_subsMayLink(ctx, field)
			case "filterCaps":
				return ec.fieldContext_Channel_filterCaps(ctx, field)
			case "filterCapsMinChars":
				return ec.fieldContext_Channel_filterCapsMinChars(ctx, field)
			case "filterCapsPercentage":
				return ec.fieldContext_Channel_filterCapsPercentage(ctx, field)
			case "filterCapsMinCaps":
				return ec.fieldContext_Channel_filterCapsMinCaps(ctx, field)
			case "filterEmotes":
				return ec.fieldContext_Channel_filterEmotes(ctx, field)
			case "filterEmotesMax":
				return ec.fieldContext_Channel_filterEmotesMax(ctx, field)
			case "filterEmotesSingle":
				return ec.fieldContext_Channel_filterEmotesSingle(ctx, field)
			case "filterSymbols":
				return ec.fieldContext_Channel_filterSymbols(ctx, field)
			case "filterSymbolsPercentage":
				return ec.fieldContext_Channel_filterSymbolsPercentage(ctx, field)
			case "filterSymbolsMinSymbols":
				return ec.fieldContext_Channel_filterSymbolsMinSymbols(ctx, field)
			case "filterMe":
				return ec.fieldContext_Channel_filterMe(ctx, field)
			case "filterMaxLength":
				return ec.fieldContext_Channel_filterMaxLength(ctx, field)
			case "filterBannedPhrases":
				return ec.fieldContext_Channel_filterBannedPhrases(ctx, field)
			case "filterBannedPhrasesPatterns":
				return ec.fieldContext_Channel_filterBannedPhrasesPatterns(ctx, field)
			case "subMessage":
				return ec.fieldContext_Channel_subMessage(ctx, field)
			case "subMessageEnabled":
				return ec.fieldContext_Channel_subMessageEnabled(ctx, field)
			case "resubMessage":
				return ec.fieldContext_Channel_resubMessage(ctx, field)
			case "resubMessageEnabled":
				return ec.fieldContext_Channel_resubMessageEnabled(ctx, field)
			case "lastSeen":
				return ec.fieldContext_Channel_lastSeen(ctx, field)
			case "autoreplies":
				return ec.fieldContext_Channel_autoreplies(ctx, field)
			case "commandInfos":
				return ec.fieldContext_Channel_commandInfos(ctx, field)
			case "commandLists":
				return ec.fieldContext_Channel_commandLists(ctx, field)
			case "customCommands":
				return ec.fieldContext_Channel_customCommands(ctx, field)
			case "highlights":
				return ec.fieldContext_Channel_highlights(ctx, field)
			case "quotes":
				return ec.fieldContext_Channel_quotes(ctx, field)
			case "repeatedCommands":
				return ec.fieldContext_Channel_repeatedCommands(ctx, field)
			case "scheduledCommands":
				return ec.fieldContext_Channel_scheduledCommands(ctx, field)
			case "variables":
				return ec.fieldContext_Channel_variables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Channel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_channelByName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_channelByName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChannelByName(rctx, fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Channel)
	fc.Result = res
	return ec.marshalOChannel2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐChannel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_channelByName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Channel_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Channel_updatedAt(ctx, field)
			case "twitchID":
				return ec.fieldContext_Channel_twitchID(ctx, field)
			case "name":
				return ec.fieldContext_Channel_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Channel_displayName(ctx, field)
			case "botName":
				return ec.fieldContext_Channel_botName(ctx, field)
			case "active":
				return ec.fieldContext_Channel_active(ctx, field)
			case "prefix":
				return ec.fieldContext_Channel_prefix(ctx, field)
			case "bullet":
				return ec.fieldContext_Channel_bullet(ctx, field)
			case "messageCount":
				return ec.fieldContext_Channel_messageCount(ctx, field)
			case "mode":
				return ec.fieldContext_Channel_mode(ctx, field)
			case "ignored":
				return ec.fieldContext_Channel_ignored(ctx, field)
			case "customOwners":
				return ec.fieldContext_Channel_customOwners(ctx, field)
			case "customMods":
				return ec.fieldContext_Channel_customMods(ctx, field)
			case "customRegulars":
				return ec.fieldContext_Channel_customRegulars(ctx, field)
			case "cooldown":
				return ec.fieldContext_Channel_cooldown(ctx, field)
			case "lastFM":
				return ec.fieldContext_Channel_lastFM(ctx, field)
			case "parseYouTube":
				return ec.fieldContext_Channel_parseYouTube(ctx, field)
			case "extraLifeID":
				return ec.fieldContext_Channel_extraLifeID(ctx, field)
			case "raffleEnabled":
				return ec.fieldContext_Channel_raffleEnabled(ctx, field)
			case "steamID":
				return ec.fieldContext_Channel_steamID(ctx, field)
			case "urbanEnabled":
				return ec.fieldContext_Channel_urbanEnabled(ctx, field)
			case "tweet":
				return ec.fieldContext_Channel_tweet(ctx, field)
			case "rollLevel":
				return ec.fieldContext_Channel_rollLevel(ctx, field)
			case "rollCooldown":
				return ec.fieldContext_Channel_rollCooldown(ctx, field)
			case "rollDefault":
				return ec.fieldContext_Channel_rollDefault(ctx, field)
			case "shouldModerate":
				return ec.fieldContext_Channel_shouldModerate(ctx, field)
			case "displayWarnings":
				return ec.fieldContext_Channel_displayWarnings(ctx, field)
			case "enableWarnings":
				return ec.fieldContext_Channel_enableWarnings(ctx, field)
			case "timeoutDuration":
				return ec.fieldContext_Channel_timeoutDuration(ctx, field)
			case "enableFilters":
				return ec.fieldContext_Channel_enableFilters(ctx, field)
			case "filterLinks":
				return ec.fieldContext_Channel_filterLinks(ctx, field)
			case "permittedLinks":
				return ec.fieldContext_Channel_permittedLinks(ctx, field)
			case "subsMayLink":
				return ec.fieldContext_Channel_subsMayLink(ctx, field)
			case "filterCaps":
				return ec.fieldContext_Channel_filterCaps(ctx, field)
			case "filterCapsMinChars":
				return ec.fieldContext_Channel_filterCapsMinChars(ctx, field)
			case "filterCapsPercentage":
				return ec.fieldContext_Channel_filterCapsPercentage(ctx, field)
			case "filterCapsMinCaps":
				return ec.fieldContext_Channel_filterCapsMinCaps(ctx, field)
			case "filterEmotes":
				return ec.fieldContext_Channel_filterEmotes(ctx, field)
			case "filterEmotesMax":
				return ec.fieldContext_Channel_filterEmotesMax(ctx, field)
			case "filterEmotesSingle":
				return ec.fieldContext_Channel_filterEmotesSingle(ctx, field)
			case "filterSymbols":
				return ec.fieldContext_Channel_filterSymbols(ctx, field)
			case "filterSymbolsPercentage":
				return ec.fieldContext_Channel_filterSymbolsPercentage(ctx, field)
			case "filterSymbolsMinSymbols":
				return ec.fieldContext_Channel_filterSymbolsMinSymbols(ctx, field)
			case "filterMe":
				return ec.fieldContext_Channel_filterMe(ctx, field)
			case "filterMaxLength":
				return ec.fieldContext_Channel_filterMaxLength(ctx, field)
			case "filterBannedPhrases":
				return ec.fieldContext_Channel_filterBannedPhrases(ctx, field)
			case "filterBannedPhrasesPatterns":
				return ec.fieldContext_Channel_filterBannedPhrasesPatterns(ctx, field)
			case "subMessage":
				return ec.fieldContext_Channel_subMessage(ctx, field)
			case "subMessageEnabled":
				return ec.fieldContext_Channel_subMessageEnabled(ctx, field)
			case "resubMessage":
				return ec.fieldContext_Channel_resubMessage(ctx, field)
			case "resubMessageEnabled":
				return ec.fieldContext_Channel_resubMessageEnabled(ctx, field)
			case "lastSeen":
				return ec.fieldContext_Channel_lastSeen(ctx, field)
			case "autoreplies":
				return ec.fieldContext_Channel_autoreplies(ctx, field)
			case "commandInfos":
				return ec.fieldContext_Channel_commandInfos(ctx, field)
			case "commandLists":
				return ec.fieldContext_Channel_commandLists(ctx, field)
			case "customCommands":
				return ec.fieldContext_Channel_customCommands(ctx, field)
			case "highlights":
				return ec.fieldContext_Channel_highlights(ctx, field)
			case "quotes":
				return ec.fieldContext_Channel_quotes(ctx, field)
			case "repeatedCommands":
				return ec.fieldContext_Channel_repeatedCommands(ctx, field)
			case "scheduledCommands":
				return ec.fieldContext_Channel_scheduledCommands(ctx, field)
			case "variables":
				return ec.fieldContext_Channel_variables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Channel", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_channelByName_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_channelByTwitchID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_channelByTwitchID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChannelByTwitchID(rctx, fc.Args["twitchID"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Channel)
	fc.Result = res
	return ec.marshalOChannel2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐChannel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_channelByTwitchID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Channel_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Channel_updatedAt(ctx, field)
			case "twitchID":
				return ec.fieldContext_Channel_twitchID(ctx, field)
			case "name":
				return ec.fieldContext_Channel_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Channel_displayName(ctx, field)
			case "botName":
				return ec.fieldContext_Channel_botName(ctx, field)
			case "active":
				return ec.fieldContext_Channel_active(ctx, field)
			case "prefix":
				return ec.fieldContext_Channel_prefix(ctx, field)
			case "bullet":
				return ec.fieldContext_Channel_bullet(ctx, field)
			case "messageCount":
				return ec.fieldContext_Channel_messageCount(ctx, field)
			case "mode":
				return ec.fieldContext_Channel_mode(ctx, field)
			case "ignored":
				return ec.fieldContext_Channel_ignored(ctx, field)
			case "customOwners":
				return ec.fieldContext_Channel_customOwners(ctx, field)
			case "customMods":
				return ec.fieldContext_Channel_customMods(ctx, field)
			case "customRegulars":
				return ec.fieldContext_Channel_customRegulars(ctx, field)
			case "cooldown":
				return ec.fieldContext_Channel_cooldown(ctx, field)
			case "lastFM":
				return ec.fieldContext_Channel_lastFM(ctx, field)
			case "parseYouTube":
				return ec.fieldContext_Channel_parseYouTube(ctx, field)
			case "extraLifeID":
				return ec.fieldContext_Channel_extraLifeID(ctx, field)
			case "raffleEnabled":
				return ec.fieldContext_Channel_raffleEnabled(ctx, field)
			case "steamID":
				return ec.fieldContext_Channel_steamID(ctx, field)
			case "urbanEnabled":
				return ec.fieldContext_Channel_urbanEnabled(ctx, field)
			case "tweet":
				return ec.fieldContext_Channel_tweet(ctx, field)
			case "rollLevel":
				return ec.fieldContext_Channel_rollLevel(ctx, field)
			case "rollCooldown":
				return ec.fieldContext_Channel_rollCooldown(ctx, field)
			case "rollDefault":
				return ec.fieldContext_Channel_rollDefault(ctx, field)
			case "shouldModerate":
				return ec.fieldContext_Channel_shouldModerate(ctx, field)
			case "displayWarnings":
				return ec.fieldContext_Channel_displayWarnings(ctx, field)
			case "enableWarnings":
				return ec.fieldContext_Channel_enableWarnings(ctx, field)
			case "timeoutDuration":
				return ec.fieldContext_Channel_timeoutDuration(ctx, field)
			case "enableFilters":
				return ec.fieldContext_Channel_enableFilters(ctx, field)
			case "filterLinks":
				return ec.fieldContext_Channel_filterLinks(ctx, field)
			case "permittedLinks":
				return ec.fieldContext_Channel_permittedLinks(ctx, field)
			case "subsMayLink":
				return ec.fieldContext_Channel_subsMayLink(ctx, field)
			case "filterCaps":
				return ec.fieldContext_Channel_filterCaps(ctx, field)
			case "filterCapsMinChars":
				return ec.fieldContext_Channel_filterCapsMinChars(ctx, field)
			case "filterCapsPercentage":
				return ec.fieldContext_Channel_filterCapsPercentage(ctx, field)
			case "filterCapsMinCaps":
				return ec.fieldContext_Channel_filterCapsMinCaps(ctx, field)
			case "filterEmotes":
				return ec.fieldContext_Channel_filterEmotes(ctx, field)
			case "filterEmotesMax":
				return ec.fieldContext_Channel_filterEmotesMax(ctx, field)
			case "filterEmotesSingle":
				return ec.fieldContext_Channel_filterEmotesSingle(ctx, field)
			case "filterSymbols":
				return ec.fieldContext_Channel_filterSymbols(ctx, field)
			case "filterSymbolsPercentage":
				return ec.fieldContext_Channel_filterSymbolsPercentage(ctx, field)
			case "filterSymbolsMinSymbols":
				return ec.fieldContext_Channel_filterSymbolsMinSymbols(ctx, field)
			case "filterMe":
				return ec.fieldContext_Channel_filterMe(ctx, field)
			case "filterMaxLength":
				return ec.fieldContext_Channel_filterMaxLength(ctx, field)
			case "filterBannedPhrases":
				return ec.fieldContext_Channel_filterBannedPhrases(ctx, field)
			case "filterBannedPhrasesPatterns":
				return ec.fieldContext_Channel_filterBannedPhrasesPatterns(ctx, field)
			case "subMessage":
				return ec.fieldContext_Channel_subMessage(ctx, field)
			case "subMessageEnabled":
				return ec.fieldContext_Channel_subMessageEnabled(ctx, field)
			case "resubMessage":
				return ec.fieldContext_Channel_resubMessage(ctx, field)
			case "resubMessageEnabled":
				return ec.fieldContext_Channel_resubMessageEnabled(ctx, field)
			case "lastSeen":
				return ec.fieldContext_Channel_lastSeen(ctx, field)
			case "autoreplies":
				return ec.fieldContext_Channel_autoreplies(ctx, field)
			case "commandInfos":
				return ec.fieldContext_Channel_commandInfos(ctx, field)
			case "commandLists":
				return ec.fieldContext_Channel_commandLists(ctx, field)
			case "customCommands":
				return ec.fieldContext_Channel_customCommands(ctx, field)
			case "highlights":
				return ec.fieldContext_Channel_highlights(ctx, field)
			case "quotes":
				return ec.fieldContext_Channel_quotes(ctx, field)
			case "repeatedCommands":
				return ec.fieldContext_Channel_repeatedCommands(ctx, field)
			case "scheduledCommands":
				return ec.fieldContext_Channel_scheduledCommands(ctx, field)
			case "variables":
				return ec.fieldContext_Channel_variables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Channel", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_channelByTwitchID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quote_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Quote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quote_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quote_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quote_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.Quote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quote_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quote_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quote_num(ctx context.Context, field graphql.CollectedField, obj *models.Quote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quote_num(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Num, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quote_num(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quote_quote(ctx context.Context, field graphql.CollectedField, obj *models.Quote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quote_quote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quote_quote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quote_creator(ctx context.Context, field graphql.CollectedField, obj *models.Quote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quote_creator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quote_creator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quote_editor(ctx context.Context, field graphql.CollectedField, obj *models.Quote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quote_editor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Editor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quote_editor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quote_channel(ctx context.Context, field graphql.CollectedField, obj *models.Quote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quote_channel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Quote().Channel(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Channel)
	fc.Result = res
	return ec.marshalNChannel2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐChannel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quote_channel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quote",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Channel_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Channel_updatedAt(ctx, field)
			case "twitchID":
				return ec.fieldContext_Channel_twitchID(ctx, field)
			case "name":
				return ec.fieldContext_Channel_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Channel_displayName(ctx, field)
			case "botName":
				return ec.fieldContext_Channel_botName(ctx, field)
			case "active":
				return ec.fieldContext_Channel_active(ctx, field)
			case "prefix":
				return ec.fieldContext_Channel_prefix(ctx, field)
			case "bullet":
				return ec.fieldContext_Channel_bullet(ctx, field)
			case "messageCount":
				return ec.fieldContext_Channel_messageCount(ctx, field)
			case "mode":
				return ec.fieldContext_Channel_mode(ctx, field)
			case "ignored":
				return ec.fieldContext_Channel_ignored(ctx, field)
			case "customOwners":
				return ec.fieldContext_Channel_customOwners(ctx, field)
			case "customMods":
				return ec.fieldContext_Channel_customMods(ctx, field)
			case "customRegulars":
				return ec.fieldContext_Channel_customRegulars(ctx, field)
			case "cooldown":
				return ec.fieldContext_Channel_cooldown(ctx, field)
			case "lastFM":
				return ec.fieldContext_Channel_lastFM(ctx, field)
			case "parseYouTube":
				return ec.fieldContext_Channel_parseYouTube(ctx, field)
			case "extraLifeID":
				return ec.fieldContext_Channel_extraLifeID(ctx, field)
			case "raffleEnabled":
				return ec.fieldContext_Channel_raffleEnabled(ctx, field)
			case "steamID":
				return ec.fieldContext_Channel_steamID(ctx, field)
			case "urbanEnabled":
				return ec.fieldContext_Channel_urbanEnabled(ctx, field)
			case "tweet":
				return ec.fieldContext_Channel_tweet(ctx, field)
			case "rollLevel":
				return ec.fieldContext_Channel_rollLevel(ctx, field)
			case "rollCooldown":
				return ec.fieldContext_Channel_rollCooldown(ctx, field)
			case "rollDefault":
				return ec.fieldContext_Channel_rollDefault(ctx, field)
			case "shouldModerate":
				return ec.fieldContext_Channel_shouldModerate(ctx, field)
			case "displayWarnings":
				return ec.fieldContext_Channel_displayWarnings(ctx, field)
			case "enableWarnings":
				return ec.fieldContext_Channel_enableWarnings(ctx, field)
			case "timeoutDuration":
				return ec.fieldContext_Channel_timeoutDuration(ctx, field)
			case "enableFilters":
				return ec.fieldContext_Channel_enableFilters(ctx, field)
			case "filterLinks":
				return ec.fieldContext_Channel_filterLinks(ctx, field)
			case "permittedLinks":
				return ec.fieldContext_Channel_permittedLinks(ctx, field)
			case "subsMayLink":
				return ec.fieldContext_Channel_subsMayLink(ctx, field)
			case "filterCaps":
				return ec.fieldContext_Channel_filterCaps(ctx, field)
			case "filterCapsMinChars":
				return ec.fieldContext_Channel_filterCapsMinChars(ctx, field)
			case "filterCapsPercentage":
				return ec.fieldContext_Channel_filterCapsPercentage(ctx, field)
			case "filterCapsMinCaps":
				return ec.fieldContext_Channel_filterCapsMinCaps(ctx, field)
			case "filterEmotes":
				return ec.fieldContext_Channel_filterEmotes(ctx, field)
			case "filterEmotesMax":
				return ec.fieldContext_Channel_filterEmotesMax(ctx, field)
			case "filterEmotesSingle":
				return ec.fieldContext_Channel_filterEmotesSingle(ctx, field)
			case "filterSymbols":
				return ec.fieldContext_Channel_filterSymbols(ctx, field)
			case "filterSymbolsPercentage":
				return ec.fieldContext_Channel_filterSymbolsPercentage(ctx, field)
			case "filterSymbolsMinSymbols":
				return ec.fieldContext_Channel_filterSymbolsMinSymbols(ctx, field)
			case "filterMe":
				return ec.fieldContext_Channel_filterMe(ctx, field)
			case "filterMaxLength":
				return ec.fieldContext_Channel_filterMaxLength(ctx, field)
			case "filterBannedPhrases":
				return ec.fieldContext_Channel_filterBannedPhrases(ctx, field)
			case "filterBannedPhrasesPatterns":
				return ec.fieldContext_Channel_filterBannedPhrasesPatterns(ctx, field)
			case "subMessage":
				return ec.fieldContext_Channel_subMessage(ctx, field)
			case "subMessageEnabled":
				return ec.fieldContext_Channel_subMessageEnabled(ctx, field)
			case "resubMessage":
				return ec.fieldContext_Channel_resubMessage(ctx, field)
			case "resubMessageEnabled":
				return ec.fieldContext_Channel_resubMessageEnabled(ctx, field)
			case "lastSeen":
				return ec.fieldContext_Channel_lastSeen(ctx, field)
			case "autoreplies":
				return ec.fieldContext_Channel_autoreplies(ctx, field)
			case "commandInfos":
				return ec.fieldContext_Channel_commandInfos(ctx, field)
			case "commandLists":
				return ec.fieldContext_Channel_commandLists(ctx, field)
			case "customCommands":
				return ec.fieldContext_Channel_customCommands(ctx, field)
			case "highlights":
				return ec.fieldContext_Channel_highlights(ctx, field)
			case "quotes":
				return ec.fieldContext_Channel_quotes(ctx, field)
			case "repeatedCommands":
				return ec.fieldContext_Channel_repeatedCommands(ctx, field)
			case "scheduledCommands":
				return ec.fieldContext_Channel_scheduledCommands(ctx, field)
			case "variables":
				return ec.fieldContext_Channel_variables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Channel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RepeatedCommand_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.RepeatedCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RepeatedCommand_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RepeatedCommand_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RepeatedCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RepeatedCommand_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.RepeatedCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RepeatedCommand_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RepeatedCommand_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RepeatedCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RepeatedCommand_enabled(ctx context.Context, field graphql.CollectedField, obj *models.RepeatedCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RepeatedCommand_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RepeatedCommand_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RepeatedCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RepeatedCommand_delay(ctx context.Context, field graphql.CollectedField, obj *models.RepeatedCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RepeatedCommand_delay(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Delay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RepeatedCommand_delay(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RepeatedCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RepeatedCommand_messageDiff(ctx context.Context, field graphql.CollectedField, obj *models.RepeatedCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RepeatedCommand_messageDiff(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageDiff, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RepeatedCommand_messageDiff(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RepeatedCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RepeatedCommand_lastCount(ctx context.Context, field graphql.CollectedField, obj *models.RepeatedCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RepeatedCommand_lastCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.RepeatedCommand().LastCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNInt642string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RepeatedCommand_lastCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RepeatedCommand",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RepeatedCommand_initTimestamp(ctx context.Context, field graphql.CollectedField, obj *models.RepeatedCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RepeatedCommand_initTimestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.RepeatedCommand().InitTimestamp(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RepeatedCommand_initTimestamp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RepeatedCommand",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RepeatedCommand_creator(ctx context.Context, field graphql.CollectedField, obj *models.RepeatedCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RepeatedCommand_creator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RepeatedCommand_creator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RepeatedCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RepeatedCommand_editor(ctx context.Context, field graphql.CollectedField, obj *models.RepeatedCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RepeatedCommand_editor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Editor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RepeatedCommand_editor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RepeatedCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RepeatedCommand_channel(ctx context.Context, field graphql.CollectedField, obj *models.RepeatedCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RepeatedCommand_channel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.RepeatedCommand().Channel(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Channel)
	fc.Result = res
	return ec.marshalNChannel2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐChannel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RepeatedCommand_channel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RepeatedCommand",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Channel_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Channel_updatedAt(ctx, field)
			case "twitchID":
				return ec.fieldContext_Channel_twitchID(ctx, field)
			case "name":
				return ec.fieldContext_Channel_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Channel_displayName(ctx, field)
			case "botName":
				return ec.fieldContext_Channel_botName(ctx, field)
			case "active":
				return ec.fieldContext_Channel_active(ctx, field)
			case "prefix":
				return ec.fieldContext_Channel_prefix(ctx, field)
			case "bullet":
				return ec.fieldContext_Channel_bullet(ctx, field)
			case "messageCount":
				return ec.fieldContext_Channel_messageCount(ctx, field)
			case "mode":
				return ec.fieldContext_Channel_mode(ctx, field)
			case "ignored":
				return ec.fieldContext_Channel_ignored(ctx, field)
			case "customOwners":
				return ec.fieldContext_Channel_customOwners(ctx, field)
			case "customMods":
				return ec.fieldContext_Channel_customMods(ctx, field)
			case "customRegulars":
				return ec.fieldContext_Channel_customRegulars(ctx, field)
			case "cooldown":
				return ec.fieldContext_Channel_cooldown(ctx, field)
			case "lastFM":
				return ec.fieldContext_Channel_lastFM(ctx, field)
			case "parseYouTube":
				return ec.fieldContext_Channel_parseYouTube(ctx, field)
			case "extraLifeID":
				return ec.fieldContext_Channel_extraLifeID(ctx, field)
			case "raffleEnabled":
				return ec.fieldContext_Channel_raffleEnabled(ctx, field)
			case "steamID":
				return ec.fieldContext_Channel_steamID(ctx, field)
			case "urbanEnabled":
				return ec.fieldContext_Channel_urbanEnabled(ctx, field)
			case "tweet":
				return ec.fieldContext_Channel_tweet(ctx, field)
			case "rollLevel":
				return ec.fieldContext_Channel_rollLevel(ctx, field)
			case "rollCooldown":
				return ec.fieldContext_Channel_rollCooldown(ctx, field)
			case "rollDefault":
				return ec.fieldContext_Channel_rollDefault(ctx, field)
			case "shouldModerate":
				return ec.fieldContext_Channel_shouldModerate(ctx, field)
			case "displayWarnings":
				return ec.fieldContext_Channel_displayWarnings(ctx, field)
			case "enableWarnings":
				return ec.fieldContext_Channel_enableWarnings(ctx, field)
			case "timeoutDuration":
				return ec.fieldContext_Channel_timeoutDuration(ctx, field)
			case "enableFilters":
				return ec.fieldContext_Channel_enableFilters(ctx, field)
			case "filterLinks":
				return ec.fieldContext_Channel_filterLinks(ctx, field)
			case "permittedLinks":
				return ec.fieldContext_Channel_permittedLinks(ctx, field)
			case "subsMayLink":
				return ec.fieldContext_Channel_subsMayLink(ctx, field)
			case "filterCaps":
				return ec.fieldContext_Channel_filterCaps(ctx, field)
			case "filterCapsMinChars":
				return ec.fieldContext_Channel_filterCapsMinChars(ctx, field)
			case "filterCapsPercentage":
				return ec.fieldContext_Channel_filterCapsPercentage(ctx, field)
			case "filterCapsMinCaps":
				return ec.fieldContext_Channel_filterCapsMinCaps(ctx, field)
			case "filterEmotes":
				return ec.fieldContext_Channel_filterEmotes(ctx, field)
			case "filterEmotesMax":
				return ec.fieldContext_Channel_filterEmotesMax(ctx, field)
			case "filterEmotesSingle":
				return ec.fieldContext_Channel_filterEmotesSingle(ctx, field)
			case "filterSymbols":
				return ec.fieldContext_Channel_filterSymbols(ctx, field)
			case "filterSymbolsPercentage":
				return ec.fieldContext_Channel_filterSymbolsPercentage(ctx, field)
			case "filterSymbolsMinSymbols":
				return ec.fieldContext_Channel_filterSymbolsMinSymbols(ctx, field)
			case "filterMe":
				return ec.fieldContext_Channel_filterMe(ctx, field)
			case "filterMaxLength":
				return ec.fieldContext_Channel_filterMaxLength(ctx, field)
			case "filterBannedPhrases":
				return ec.fieldContext_Channel_filterBannedPhrases(ctx, field)
			case "filterBannedPhrasesPatterns":
				return ec.fieldContext_Channel_filterBannedPhrasesPatterns(ctx, field)
			case "subMessage":
				return ec.fieldContext_Channel_subMessage(ctx, field)
			case "subMessageEnabled":
				return ec.fieldContext_Channel_subMessageEnabled(ctx, field)
			case "resubMessage":
				return ec.fieldContext_Channel_resubMessage(ctx, field)
			case "resubMessageEnabled":
				return ec.fieldContext_Channel_resubMessageEnabled(ctx, field)
			case "lastSeen":
				return ec.fieldContext_Channel_lastSeen(ctx, field)
			case "autoreplies":
				return ec.fieldContext_Channel_autoreplies(ctx, field)
			case "commandInfos":
				return ec.fieldContext_Channel_commandInfos(ctx, field)
			case "commandLists":
				return ec.fieldContext_Channel_commandLists(ctx, field)
			case "customCommands":
				return ec.fieldContext_Channel_customCommands(ctx, field)
			case "highlights":
				return ec.fieldContext_Channel_highlights(ctx, field)
			case "quotes":
				return ec.fieldContext_Channel_quotes(ctx, field)
			case "repeatedCommands":
				return ec.fieldContext_Channel_repeatedCommands(ctx, field)
			case "scheduledCommands":
				return ec.fieldContext_Channel_scheduledCommands(ctx, field)
			case "variables":
				return ec.fieldContext_Channel_variables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Channel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RepeatedCommand_commandInfo(ctx context.Context, field graphql.CollectedField, obj *models.RepeatedCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RepeatedCommand_commandInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.RepeatedCommand().CommandInfo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CommandInfo)
	fc.Result = res
	return ec.marshalNCommandInfo2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐCommandInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RepeatedCommand_commandInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RepeatedCommand",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_CommandInfo_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CommandInfo_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_CommandInfo_name(ctx, field)
			case "accessLevel":
				return ec.fieldContext_CommandInfo_accessLevel(ctx, field)
			case "count":
				return ec.fieldContext_CommandInfo_count(ctx, field)
			case "creator":
				return ec.fieldContext_CommandInfo_creator(ctx, field)
			case "editor":
				return ec.fieldContext_CommandInfo_editor(ctx, field)
			case "lastUsed":
				return ec.fieldContext_CommandInfo_lastUsed(ctx, field)
			case "channel":
				return ec.fieldContext_CommandInfo_channel(ctx, field)
			case "commandList":
				return ec.fieldContext_CommandInfo_commandList(ctx, field)
			case "customCommand":
				return ec.fieldContext_CommandInfo_customCommand(ctx, field)
			case "repeatedCommand":
				return ec.fieldContext_CommandInfo_repeatedCommand(ctx, field)
			case "scheduledCommand":
				return ec.fieldContext_CommandInfo_scheduledCommand(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommandInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScheduledCommand_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.ScheduledCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScheduledCommand_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScheduledCommand_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScheduledCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScheduledCommand_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.ScheduledCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScheduledCommand_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScheduledCommand_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScheduledCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScheduledCommand_enabled(ctx context.Context, field graphql.CollectedField, obj *models.ScheduledCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScheduledCommand_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScheduledCommand_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScheduledCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScheduledCommand_cronExpression(ctx context.Context, field graphql.CollectedField, obj *models.ScheduledCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScheduledCommand_cronExpression(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CronExpression, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScheduledCommand_cronExpression(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScheduledCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScheduledCommand_messageDiff(ctx context.Context, field graphql.CollectedField, obj *models.ScheduledCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScheduledCommand_messageDiff(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageDiff, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScheduledCommand_messageDiff(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScheduledCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScheduledCommand_lastCount(ctx context.Context, field graphql.CollectedField, obj *models.ScheduledCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScheduledCommand_lastCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ScheduledCommand().LastCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNInt642string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScheduledCommand_lastCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScheduledCommand",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScheduledCommand_creator(ctx context.Context, field graphql.CollectedField, obj *models.ScheduledCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScheduledCommand_creator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScheduledCommand_creator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScheduledCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScheduledCommand_editor(ctx context.Context, field graphql.CollectedField, obj *models.ScheduledCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScheduledCommand_editor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Editor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScheduledCommand_editor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScheduledCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScheduledCommand_channel(ctx context.Context, field graphql.CollectedField, obj *models.ScheduledCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScheduledCommand_channel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ScheduledCommand().Channel(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Channel)
	fc.Result = res
	return ec.marshalNChannel2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐChannel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScheduledCommand_channel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScheduledCommand",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Channel_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Channel_updatedAt(ctx, field)
			case "twitchID":
				return ec.fieldContext_Channel_twitchID(ctx, field)
			case "name":
				return ec.fieldContext_Channel_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Channel_displayName(ctx, field)
			case "botName":
				return ec.fieldContext_Channel_botName(ctx, field)
			case "active":
				return ec.fieldContext_Channel_active(ctx, field)
			case "prefix":
				return ec.fieldContext_Channel_prefix(ctx, field)
			case "bullet":
				return ec.fieldContext_Channel_bullet(ctx, field)
			case "messageCount":
				return ec.fieldContext_Channel_messageCount(ctx, field)
			case "mode":
				return ec.fieldContext_Channel_mode(ctx, field)
			case "ignored":
				return ec.fieldContext_Channel_ignored(ctx, field)
			case "customOwners":
				return ec.fieldContext_Channel_customOwners(ctx, field)
			case "customMods":
				return ec.fieldContext_Channel_customMods(ctx, field)
			case "customRegulars":
				return ec.fieldContext_Channel_customRegulars(ctx, field)
			case "cooldown":
				return ec.fieldContext_Channel_cooldown(ctx, field)
			case "lastFM":
				return ec.fieldContext_Channel_lastFM(ctx, field)
			case "parseYouTube":
				return ec.fieldContext_Channel_parseYouTube(ctx, field)
			case "extraLifeID":
				return ec.fieldContext_Channel_extraLifeID(ctx, field)
			case "raffleEnabled":
				return ec.fieldContext_Channel_raffleEnabled(ctx, field)
			case "steamID":
				return ec.fieldContext_Channel_steamID(ctx, field)
			case "urbanEnabled":
				return ec.fieldContext_Channel_urbanEnabled(ctx, field)
			case "tweet":
				return ec.fieldContext_Channel_tweet(ctx, field)
			case "rollLevel":
				return ec.fieldContext_Channel_rollLevel(ctx, field)
			case "rollCooldown":
				return ec.fieldContext_Channel_rollCooldown(ctx, field)
			case "rollDefault":
				return ec.fieldContext_Channel_rollDefault(ctx, field)
			case "shouldModerate":
				return ec.fieldContext_Channel_shouldModerate(ctx, field)
			case "displayWarnings":
				return ec.fieldContext_Channel_displayWarnings(ctx, field)
			case "enableWarnings":
				return ec.fieldContext_Channel_enableWarnings(ctx, field)
			case "timeoutDuration":
				return ec.fieldContext_Channel_timeoutDuration(ctx, field)
			case "enableFilters":
				return ec.fieldContext_Channel_enableFilters(ctx, field)
			case "filterLinks":
				return ec.fieldContext_Channel_filterLinks(ctx, field)
			case "permittedLinks":
				return ec.fieldContext_Channel_permittedLinks(ctx, field)
			case "subsMayLink":
				return ec.fieldContext_Channel_subsMayLink(ctx, field)
			case "filterCaps":
				return ec.fieldContext_Channel_filterCaps(ctx, field)
			case "filterCapsMinChars":
				return ec.fieldContext_Channel_filterCapsMinChars(ctx, field)
			case "filterCapsPercentage":
				return ec.fieldContext_Channel_filterCapsPercentage(ctx, field)
			case "filterCapsMinCaps":
				return ec.fieldContext_Channel_filterCapsMinCaps(ctx, field)
			case "filterEmotes":
				return ec.fieldContext_Channel_filterEmotes(ctx, field)
			case "filterEmotesMax":
				return ec.fieldContext_Channel_filterEmotesMax(ctx, field)
			case "filterEmotesSingle":
				return ec.fieldContext_Channel_filterEmotesSingle(ctx, field)
			case "filterSymbols":
				return ec.fieldContext_Channel_filterSymbols(ctx, field)
			case "filterSymbolsPercentage":
				return ec.fieldContext_Channel_filterSymbolsPercentage(ctx, field)
			case "filterSymbolsMinSymbols":
				return ec.fieldContext_Channel_filterSymbolsMinSymbols(ctx, field)
			case "filterMe":
				return ec.fieldContext_Channel_filterMe(ctx, field)
			case "filterMaxLength":
				return ec.fieldContext_Channel_filterMaxLength(ctx, field)
			case "filterBannedPhrases":
				return ec.fieldContext_Channel_filterBannedPhrases(ctx, field)
			case "filterBannedPhrasesPatterns":
				return ec.fieldContext_Channel_filterBannedPhrasesPatterns(ctx, field)
			case "subMessage":
				return ec.fieldContext_Channel_subMessage(ctx, field)
			case "subMessageEnabled":
				return ec.fieldContext_Channel_subMessageEnabled(ctx, field)
			case "resubMessage":
				return ec.fieldContext_Channel_resubMessage(ctx, field)
			case "resubMessageEnabled":
				return ec.fieldContext_Channel_resubMessageEnabled(ctx, field)
			case "lastSeen":
				return ec.fieldContext_Channel_lastSeen(ctx, field)
			case "autoreplies":
				return ec.fieldContext_Channel_autoreplies(ctx, field)
			case "commandInfos":
				return ec.fieldContext_Channel_commandInfos(ctx, field)
			case "commandLists":
				return ec.fieldContext_Channel_commandLists(ctx, field)
			case "customCommands":
				return ec.fieldContext_Channel_customCommands(ctx, field)
			case "highlights":
				return ec.fieldContext_Channel_highlights(ctx, field)
			case "quotes":
				return ec.fieldContext_Channel_quotes(ctx, field)
			case "repeatedCommands":
				return ec.fieldContext_Channel_repeatedCommands(ctx, field)
			case "scheduledCommands":
				return ec.fieldContext_Channel_scheduledCommands(ctx, field)
			case "variables":
				return ec.fieldContext_Channel_variables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Channel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScheduledCommand_commandInfo(ctx context.Context, field graphql.CollectedField, obj *models.ScheduledCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScheduledCommand_commandInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ScheduledCommand().CommandInfo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CommandInfo)
	fc.Result = res
	return ec.marshalNCommandInfo2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐCommandInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScheduledCommand_commandInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScheduledCommand",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_CommandInfo_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CommandInfo_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_CommandInfo_name(ctx, field)
			case "accessLevel":
				return ec.fieldContext_CommandInfo_accessLevel(ctx, field)
			case "count":
				return ec.fieldContext_CommandInfo_count(ctx, field)
			case "creator":
				return ec.fieldContext_CommandInfo_creator(ctx, field)
			case "editor":
				return ec.fieldContext_CommandInfo_editor(ctx, field)
			case "lastUsed":
				return ec.fieldContext_CommandInfo_lastUsed(ctx, field)
			case "channel":
				return ec.fieldContext_CommandInfo_channel(ctx, field)
			case "commandList":
				return ec.fieldContext_CommandInfo_commandList(ctx, field)
			case "customCommand":
				return ec.fieldContext_CommandInfo_customCommand(ctx, field)
			case "repeatedCommand":
				return ec.fieldContext_CommandInfo_repeatedCommand(ctx, field)
			case "scheduledCommand":
				return ec.fieldContext_CommandInfo_scheduledCommand(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommandInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Variable_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Variable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Variable_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Variable_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Variable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Variable_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.Variable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Variable_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Variable_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Variable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Variable_name(ctx context.Context, field graphql.CollectedField, obj *models.Variable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Variable_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Variable_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Variable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Variable_value(ctx context.Context, field graphql.CollectedField, obj *models.Variable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Variable_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Variable_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Variable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Variable_channel(ctx context.Context, field graphql.CollectedField, obj *models.Variable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Variable_channel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Variable().Channel(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Channel)
	fc.Result = res
	return ec.marshalNChannel2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐChannel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Variable_channel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Variable",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createdAt":
				return ec.fieldContext_Channel_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Channel_updatedAt(ctx, field)
			case "twitchID":
				return ec.fieldContext_Channel_twitchID(ctx, field)
			case "name":
				return ec.fieldContext_Channel_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Channel_displayName(ctx, field)
			case "botName":
				return ec.fieldContext_Channel_botName(ctx, field)
			case "active":
				return ec.fieldContext_Channel_active(ctx, field)
			case "prefix":
				return ec.fieldContext_Channel_prefix(ctx, field)
			case "bullet":
				return ec.fieldContext_Channel_bullet(ctx, field)
			case "messageCount":
				return ec.fieldContext_Channel_messageCount(ctx, field)
			case "mode":
				return ec.fieldContext_Channel_mode(ctx, field)
			case "ignored":
				return ec.fieldContext_Channel_ignored(ctx, field)
			case "customOwners":
				return ec.fieldContext_Channel_customOwners(ctx, field)
			case "customMods":
				return ec.fieldContext_Channel_customMods(ctx, field)
			case "customRegulars":
				return ec.fieldContext_Channel_customRegulars(ctx, field)
			case "cooldown":
				return ec.fieldContext_Channel_cooldown(ctx, field)
			case "lastFM":
				return ec.fieldContext_Channel_lastFM(ctx, field)
			case "parseYouTube":
				return ec.fieldContext_Channel_parseYouTube(ctx, field)
			case "extraLifeID":
				return ec.fieldContext_Channel_extraLifeID(ctx, field)
			case "raffleEnabled":
				return ec.fieldContext_Channel_raffleEnabled(ctx, field)
			case "steamID":
				return ec.fieldContext_Channel_steamID(ctx, field)
			case "urbanEnabled":
				return ec.fieldContext_Channel_urbanEnabled(ctx, field)
			case "tweet":
				return ec.fieldContext_Channel_tweet(ctx, field)
			case "rollLevel":
				return ec.fieldContext_Channel_rollLevel(ctx, field)
			case "rollCooldown":
				return ec.fieldContext_Channel_rollCooldown(ctx, field)
			case "rollDefault":
				return ec.fieldContext_Channel_rollDefault(ctx, field)
			case "shouldModerate":
				return ec.fieldContext_Channel_shouldModerate(ctx, field)
			case "displayWarnings":
				return ec.fieldContext_Channel_displayWarnings(ctx, field)
			case "enableWarnings":
				return ec.fieldContext_Channel_enableWarnings(ctx, field)
			case "timeoutDuration":
				return ec.fieldContext_Channel_timeoutDuration(ctx, field)
			case "enableFilters":
				return ec.fieldContext_Channel_enableFilters(ctx, field)
			case "filterLinks":
				return ec.fieldContext_Channel_filterLinks(ctx, field)
			case "permittedLinks":
				return ec.fieldContext_Channel_permittedLinks(ctx, field)
			case "subsMayLink":
				return ec.fieldContext_Channel_subsMayLink(ctx, field)
			case "filterCaps":
				return ec.fieldContext_Channel_filterCaps(ctx, field)
			case "filterCapsMinChars":
				return ec.fieldContext_Channel_filterCapsMinChars(ctx, field)
			case "filterCapsPercentage":
				return ec.fieldContext_Channel_filterCapsPercentage(ctx, field)
			case "filterCapsMinCaps":
				return ec.fieldContext_Channel_filterCapsMinCaps(ctx, field)
			case "filterEmotes":
				return ec.fieldContext_Channel_filterEmotes(ctx, field)
			case "filterEmotesMax":
				return ec.fieldContext_Channel_filterEmotesMax(ctx, field)
			case "filterEmotesSingle":
				return ec.fieldContext_Channel_filterEmotesSingle(ctx, field)
			case "filterSymbols":
				return ec.fieldContext_Channel_filterSymbols(ctx, field)
			case "filterSymbolsPercentage":
				return ec.fieldContext_Channel_filterSymbolsPercentage(ctx, field)
			case "filterSymbolsMinSymbols":
				return ec.fieldContext_Channel_filterSymbolsMinSymbols(ctx, field)
			case "filterMe":
				return ec.fieldContext_Channel_filterMe(ctx, field)
			case "filterMaxLength":
				return ec.fieldContext_Channel_filterMaxLength(ctx, field)
			case "filterBannedPhrases":
				return ec.fieldContext_Channel_filterBannedPhrases(ctx, field)
			case "filterBannedPhrasesPatterns":
				return ec.fieldContext_Channel_filterBannedPhrasesPatterns(ctx, field)
			case "subMessage":
				return ec.fieldContext_Channel_subMessage(ctx, field)
			case "subMessageEnabled":
				return ec.fieldContext_Channel_subMessageEnabled(ctx, field)
			case "resubMessage":
				return ec.fieldContext_Channel_resubMessage(ctx, field)
			case "resubMessageEnabled":
				return ec.fieldContext_Channel_resubMessageEnabled(ctx, field)
			case "lastSeen":
				return ec.fieldContext_Channel_lastSeen(ctx, field)
			case "autoreplies":
				return ec.fieldContext_Channel_autoreplies(ctx, field)
			case "commandInfos":
				return ec.fieldContext_Channel_commandInfos(ctx, field)
			case "commandLists":
				return ec.fieldContext_Channel_commandLists(ctx, field)
			case "customCommands":
				return ec.fieldContext_Channel_customCommands(ctx, field)
			case "highlights":
				return ec.fieldContext_Channel_highlights(ctx, field)
			case "quotes":
				return ec.fieldContext_Channel_quotes(ctx, field)
			case "repeatedCommands":
				return ec.fieldContext_Channel_repeatedCommands(ctx, field)
			case "scheduledCommands":
				return ec.fieldContext_Channel_scheduledCommands(ctx, field)
			case "variables":
				return ec.fieldContext_Channel_variables(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Channel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var autoreplyImplementors = []string{"Autoreply"}

func (ec *executionContext) _Autoreply(ctx context.Context, sel ast.SelectionSet, obj *models.Autoreply) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, autoreplyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Autoreply")
		case "createdAt":
			out.Values[i] = ec._Autoreply_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Autoreply_updatedAt(ctx, field, obj)
		case "channel":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Autoreply_channel(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "num":
			out.Values[i] = ec._Autoreply_num(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "trigger":
			out.Values[i] = ec._Autoreply_trigger(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "origPattern":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Autoreply_origPattern(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "response":
			out.Values[i] = ec._Autoreply_response(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "count":
			out.Values[i] = ec._Autoreply_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "creator":
			out.Values[i] = ec._Autoreply_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "editor":
			out.Values[i] = ec._Autoreply_editor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var channelImplementors = []string{"Channel"}

func (ec *executionContext) _Channel(ctx context.Context, sel ast.SelectionSet, obj *models.Channel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, channelImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Channel")
		case "createdAt":
			out.Values[i] = ec._Channel_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Channel_updatedAt(ctx, field, obj)
		case "twitchID":
			out.Values[i] = ec._Channel_twitchID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Channel_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "displayName":
			out.Values[i] = ec._Channel_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "botName":
			out.Values[i] = ec._Channel_botName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "active":
			out.Values[i] = ec._Channel_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "prefix":
			out.Values[i] = ec._Channel_prefix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "bullet":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channel_bullet(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "messageCount":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channel_messageCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "mode":
			out.Values[i] = ec._Channel_mode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "ignored":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channel_ignored(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "customOwners":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channel_customOwners(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "customMods":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channel_customMods(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "customRegulars":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channel_customRegulars(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "cooldown":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channel_cooldown(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "lastFM":
			out.Values[i] = ec._Channel_lastFM(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "parseYouTube":
			out.Values[i] = ec._Channel_parseYouTube(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "extraLifeID":
			out.Values[i] = ec._Channel_extraLifeID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "raffleEnabled":
			out.Values[i] = ec._Channel_raffleEnabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "steamID":
			out.Values[i] = ec._Channel_steamID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "urbanEnabled":
			out.Values[i] = ec._Channel_urbanEnabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "tweet":
			out.Values[i] = ec._Channel_tweet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "rollLevel":
			out.Values[i] = ec._Channel_rollLevel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "rollCooldown":
			out.Values[i] = ec._Channel_rollCooldown(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "rollDefault":
			out.Values[i] = ec._Channel_rollDefault(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "shouldModerate":
			out.Values[i] = ec._Channel_shouldModerate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "displayWarnings":
			out.Values[i] = ec._Channel_displayWarnings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "enableWarnings":
			out.Values[i] = ec._Channel_enableWarnings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "timeoutDuration":
			out.Values[i] = ec._Channel_timeoutDuration(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "enableFilters":
			out.Values[i] = ec._Channel_enableFilters(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "filterLinks":
			out.Values[i] = ec._Channel_filterLinks(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "permittedLinks":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channel_permittedLinks(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "subsMayLink":
			out.Values[i] = ec._Channel_subsMayLink(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "filterCaps":
			out.Values[i] = ec._Channel_filterCaps(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "filterCapsMinChars":
			out.Values[i] = ec._Channel_filterCapsMinChars(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "filterCapsPercentage":
			out.Values[i] = ec._Channel_filterCapsPercentage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "filterCapsMinCaps":
			out.Values[i] = ec._Channel_filterCapsMinCaps(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "filterEmotes":
			out.Values[i] = ec._Channel_filterEmotes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "filterEmotesMax":
			out.Values[i] = ec._Channel_filterEmotesMax(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "filterEmotesSingle":
			out.Values[i] = ec._Channel_filterEmotesSingle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "filterSymbols":
			out.Values[i] = ec._Channel_filterSymbols(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "filterSymbolsPercentage":
			out.Values[i] = ec._Channel_filterSymbolsPercentage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "filterSymbolsMinSymbols":
			out.Values[i] = ec._Channel_filterSymbolsMinSymbols(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "filterMe":
			out.Values[i] = ec._Channel_filterMe(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "filterMaxLength":
			out.Values[i] = ec._Channel_filterMaxLength(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "filterBannedPhrases":
			out.Values[i] = ec._Channel_filterBannedPhrases(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "filterBannedPhrasesPatterns":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channel_filterBannedPhrasesPatterns(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "subMessage":
			out.Values[i] = ec._Channel_subMessage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "subMessageEnabled":
			out.Values[i] = ec._Channel_subMessageEnabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "resubMessage":
			out.Values[i] = ec._Channel_resubMessage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "resubMessageEnabled":
			out.Values[i] = ec._Channel_resubMessageEnabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastSeen":
			out.Values[i] = ec._Channel_lastSeen(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "autoreplies":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channel_autoreplies(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "commandInfos":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channel_commandInfos(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "commandLists":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channel_commandLists(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "customCommands":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channel_customCommands(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "highlights":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channel_highlights(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "quotes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channel_quotes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "repeatedCommands":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channel_repeatedCommands(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "scheduledCommands":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channel_scheduledCommands(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "variables":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channel_variables(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commandInfoImplementors = []string{"CommandInfo"}

func (ec *executionContext) _CommandInfo(ctx context.Context, sel ast.SelectionSet, obj *models.CommandInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commandInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommandInfo")
		case "createdAt":
			out.Values[i] = ec._CommandInfo_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._CommandInfo_updatedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._CommandInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "accessLevel":
			out.Values[i] = ec._CommandInfo_accessLevel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "count":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CommandInfo_count(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "creator":
			out.Values[i] = ec._CommandInfo_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "editor":
			out.Values[i] = ec._CommandInfo_editor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUsed":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CommandInfo_lastUsed(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "channel":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CommandInfo_channel(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "commandList":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CommandInfo_commandList(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "customCommand":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CommandInfo_customCommand(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "repeatedCommand":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CommandInfo_repeatedCommand(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "scheduledCommand":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CommandInfo_scheduledCommand(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commandListImplementors = []string{"CommandList"}

func (ec *executionContext) _CommandList(ctx context.Context, sel ast.SelectionSet, obj *models.CommandList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commandListImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommandList")
		case "createdAt":
			out.Values[i] = ec._CommandList_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._CommandList_updatedAt(ctx, field, obj)
		case "items":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CommandList_items(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "channel":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CommandList_channel(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "commandInfo":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CommandList_commandInfo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customCommandImplementors = []string{"CustomCommand"}

func (ec *executionContext) _CustomCommand(ctx context.Context, sel ast.SelectionSet, obj *models.CustomCommand) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customCommandImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomCommand")
		case "createdAt":
			out.Values[i] = ec._CustomCommand_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._CustomCommand_updatedAt(ctx, field, obj)
		case "message":
			out.Values[i] = ec._CustomCommand_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "channel":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CustomCommand_channel(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "commandInfo":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CustomCommand_commandInfo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var highlightImplementors = []string{"Highlight"}

func (ec *executionContext) _Highlight(ctx context.Context, sel ast.SelectionSet, obj *models.Highlight) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, highlightImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Highlight")
		case "createdAt":
			out.Values[i] = ec._Highlight_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "highlightedAt":
			out.Values[i] = ec._Highlight_highlightedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "startedAt":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Highlight_startedAt(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "status":
			out.Values[i] = ec._Highlight_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "game":
			out.Values[i] = ec._Highlight_game(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "channel":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Highlight_channel(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "channelByName":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_channelByName(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "channelByTwitchID":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_channelByTwitchID(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var quoteImplementors = []string{"Quote"}

func (ec *executionContext) _Quote(ctx context.Context, sel ast.SelectionSet, obj *models.Quote) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, quoteImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Quote")
		case "createdAt":
			out.Values[i] = ec._Quote_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Quote_updatedAt(ctx, field, obj)
		case "num":
			out.Values[i] = ec._Quote_num(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "quote":
			out.Values[i] = ec._Quote_quote(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "creator":
			out.Values[i] = ec._Quote_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "editor":
			out.Values[i] = ec._Quote_editor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "channel":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Quote_channel(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var repeatedCommandImplementors = []string{"RepeatedCommand"}

func (ec *executionContext) _RepeatedCommand(ctx context.Context, sel ast.SelectionSet, obj *models.RepeatedCommand) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, repeatedCommandImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RepeatedCommand")
		case "createdAt":
			out.Values[i] = ec._RepeatedCommand_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._RepeatedCommand_updatedAt(ctx, field, obj)
		case "enabled":
			out.Values[i] = ec._RepeatedCommand_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "delay":
			out.Values[i] = ec._RepeatedCommand_delay(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "messageDiff":
			out.Values[i] = ec._RepeatedCommand_messageDiff(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastCount":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RepeatedCommand_lastCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "initTimestamp":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RepeatedCommand_initTimestamp(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "creator":
			out.Values[i] = ec._RepeatedCommand_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "editor":
			out.Values[i] = ec._RepeatedCommand_editor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "channel":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RepeatedCommand_channel(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "commandInfo":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RepeatedCommand_commandInfo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var scheduledCommandImplementors = []string{"ScheduledCommand"}

func (ec *executionContext) _ScheduledCommand(ctx context.Context, sel ast.SelectionSet, obj *models.ScheduledCommand) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scheduledCommandImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScheduledCommand")
		case "createdAt":
			out.Values[i] = ec._ScheduledCommand_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._ScheduledCommand_updatedAt(ctx, field, obj)
		case "enabled":
			out.Values[i] = ec._ScheduledCommand_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "cronExpression":
			out.Values[i] = ec._ScheduledCommand_cronExpression(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "messageDiff":
			out.Values[i] = ec._ScheduledCommand_messageDiff(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastCount":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ScheduledCommand_lastCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "creator":
			out.Values[i] = ec._ScheduledCommand_creator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "editor":
			out.Values[i] = ec._ScheduledCommand_editor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "channel":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ScheduledCommand_channel(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "commandInfo":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ScheduledCommand_commandInfo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var variableImplementors = []string{"Variable"}

func (ec *executionContext) _Variable(ctx context.Context, sel ast.SelectionSet, obj *models.Variable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, variableImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Variable")
		case "createdAt":
			out.Values[i] = ec._Variable_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Variable_updatedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Variable_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "value":
			out.Values[i] = ec._Variable_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "channel":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Variable_channel(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAutoreply2ᚕᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐAutoreplyᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Autoreply) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAutoreply2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐAutoreply(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAutoreply2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐAutoreply(ctx context.Context, sel ast.SelectionSet, v *models.Autoreply) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Autoreply(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNChannel2githubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐChannel(ctx context.Context, sel ast.SelectionSet, v models.Channel) graphql.Marshaler {
	return ec._Channel(ctx, sel, &v)
}

func (ec *executionContext) marshalNChannel2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐChannel(ctx context.Context, sel ast.SelectionSet, v *models.Channel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Channel(ctx, sel, v)
}

func (ec *executionContext) marshalNCommandInfo2githubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐCommandInfo(ctx context.Context, sel ast.SelectionSet, v models.CommandInfo) graphql.Marshaler {
	return ec._CommandInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommandInfo2ᚕᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐCommandInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CommandInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommandInfo2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐCommandInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCommandInfo2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐCommandInfo(ctx context.Context, sel ast.SelectionSet, v *models.CommandInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CommandInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNCommandList2ᚕᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐCommandListᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CommandList) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommandList2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐCommandList(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCommandList2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐCommandList(ctx context.Context, sel ast.SelectionSet, v *models.CommandList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CommandList(ctx, sel, v)
}

func (ec *executionContext) marshalNCustomCommand2ᚕᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐCustomCommandᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CustomCommand) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCustomCommand2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐCustomCommand(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCustomCommand2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐCustomCommand(ctx context.Context, sel ast.SelectionSet, v *models.CustomCommand) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CustomCommand(ctx, sel, v)
}

func (ec *executionContext) marshalNHighlight2ᚕᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐHighlightᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Highlight) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHighlight2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐHighlight(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNHighlight2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐHighlight(ctx context.Context, sel ast.SelectionSet, v *models.Highlight) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Highlight(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt642string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt642string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNQuote2ᚕᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐQuoteᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Quote) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNQuote2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐQuote(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNQuote2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐQuote(ctx context.Context, sel ast.SelectionSet, v *models.Quote) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Quote(ctx, sel, v)
}

func (ec *executionContext) marshalNRepeatedCommand2ᚕᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐRepeatedCommandᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.RepeatedCommand) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRepeatedCommand2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐRepeatedCommand(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRepeatedCommand2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐRepeatedCommand(ctx context.Context, sel ast.SelectionSet, v *models.RepeatedCommand) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RepeatedCommand(ctx, sel, v)
}

func (ec *executionContext) marshalNScheduledCommand2ᚕᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐScheduledCommandᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ScheduledCommand) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScheduledCommand2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐScheduledCommand(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNScheduledCommand2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐScheduledCommand(ctx context.Context, sel ast.SelectionSet, v *models.ScheduledCommand) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ScheduledCommand(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNVariable2ᚕᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐVariableᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Variable) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVariable2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐVariable(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNVariable2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐVariable(ctx context.Context, sel ast.SelectionSet, v *models.Variable) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Variable(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOChannel2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐChannel(ctx context.Context, sel ast.SelectionSet, v *models.Channel) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Channel(ctx, sel, v)
}

func (ec *executionContext) marshalOCommandList2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐCommandList(ctx context.Context, sel ast.SelectionSet, v *models.CommandList) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommandList(ctx, sel, v)
}

func (ec *executionContext) marshalOCustomCommand2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐCustomCommand(ctx context.Context, sel ast.SelectionSet, v *models.CustomCommand) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomCommand(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalORepeatedCommand2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐRepeatedCommand(ctx context.Context, sel ast.SelectionSet, v *models.RepeatedCommand) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RepeatedCommand(ctx, sel, v)
}

func (ec *executionContext) marshalOScheduledCommand2ᚖgithubᚗcomᚋhortbotᚋhortbotᚋinternalᚋdbᚋmodelsᚐScheduledCommand(ctx context.Context, sel ast.SelectionSet, v *models.ScheduledCommand) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ScheduledCommand(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	return res
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
