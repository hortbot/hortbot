// Code generated by SQLBoiler v4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CommandInfo is an object representing the database table.
type CommandInfo struct {
	ID              int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt       time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ChannelID       int64      `boil:"channel_id" json:"channel_id" toml:"channel_id" yaml:"channel_id"`
	Name            string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	AccessLevel     string     `boil:"access_level" json:"access_level" toml:"access_level" yaml:"access_level"`
	Count           int64      `boil:"count" json:"count" toml:"count" yaml:"count"`
	Creator         string     `boil:"creator" json:"creator" toml:"creator" yaml:"creator"`
	Editor          string     `boil:"editor" json:"editor" toml:"editor" yaml:"editor"`
	LastUsed        null.Time  `boil:"last_used" json:"last_used,omitempty" toml:"last_used" yaml:"last_used,omitempty"`
	CustomCommandID null.Int64 `boil:"custom_command_id" json:"custom_command_id,omitempty" toml:"custom_command_id" yaml:"custom_command_id,omitempty"`
	CommandListID   null.Int64 `boil:"command_list_id" json:"command_list_id,omitempty" toml:"command_list_id" yaml:"command_list_id,omitempty"`

	R *commandInfoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L commandInfoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CommandInfoColumns = struct {
	ID              string
	CreatedAt       string
	UpdatedAt       string
	ChannelID       string
	Name            string
	AccessLevel     string
	Count           string
	Creator         string
	Editor          string
	LastUsed        string
	CustomCommandID string
	CommandListID   string
}{
	ID:              "id",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	ChannelID:       "channel_id",
	Name:            "name",
	AccessLevel:     "access_level",
	Count:           "count",
	Creator:         "creator",
	Editor:          "editor",
	LastUsed:        "last_used",
	CustomCommandID: "custom_command_id",
	CommandListID:   "command_list_id",
}

var CommandInfoTableColumns = struct {
	ID              string
	CreatedAt       string
	UpdatedAt       string
	ChannelID       string
	Name            string
	AccessLevel     string
	Count           string
	Creator         string
	Editor          string
	LastUsed        string
	CustomCommandID string
	CommandListID   string
}{
	ID:              "command_infos.id",
	CreatedAt:       "command_infos.created_at",
	UpdatedAt:       "command_infos.updated_at",
	ChannelID:       "command_infos.channel_id",
	Name:            "command_infos.name",
	AccessLevel:     "command_infos.access_level",
	Count:           "command_infos.count",
	Creator:         "command_infos.creator",
	Editor:          "command_infos.editor",
	LastUsed:        "command_infos.last_used",
	CustomCommandID: "command_infos.custom_command_id",
	CommandListID:   "command_infos.command_list_id",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CommandInfoWhere = struct {
	ID              whereHelperint64
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
	ChannelID       whereHelperint64
	Name            whereHelperstring
	AccessLevel     whereHelperstring
	Count           whereHelperint64
	Creator         whereHelperstring
	Editor          whereHelperstring
	LastUsed        whereHelpernull_Time
	CustomCommandID whereHelpernull_Int64
	CommandListID   whereHelpernull_Int64
}{
	ID:              whereHelperint64{field: "\"command_infos\".\"id\""},
	CreatedAt:       whereHelpertime_Time{field: "\"command_infos\".\"created_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"command_infos\".\"updated_at\""},
	ChannelID:       whereHelperint64{field: "\"command_infos\".\"channel_id\""},
	Name:            whereHelperstring{field: "\"command_infos\".\"name\""},
	AccessLevel:     whereHelperstring{field: "\"command_infos\".\"access_level\""},
	Count:           whereHelperint64{field: "\"command_infos\".\"count\""},
	Creator:         whereHelperstring{field: "\"command_infos\".\"creator\""},
	Editor:          whereHelperstring{field: "\"command_infos\".\"editor\""},
	LastUsed:        whereHelpernull_Time{field: "\"command_infos\".\"last_used\""},
	CustomCommandID: whereHelpernull_Int64{field: "\"command_infos\".\"custom_command_id\""},
	CommandListID:   whereHelpernull_Int64{field: "\"command_infos\".\"command_list_id\""},
}

// CommandInfoRels is where relationship names are stored.
var CommandInfoRels = struct {
	Channel          string
	CommandList      string
	CustomCommand    string
	RepeatedCommand  string
	ScheduledCommand string
}{
	Channel:          "Channel",
	CommandList:      "CommandList",
	CustomCommand:    "CustomCommand",
	RepeatedCommand:  "RepeatedCommand",
	ScheduledCommand: "ScheduledCommand",
}

// commandInfoR is where relationships are stored.
type commandInfoR struct {
	Channel          *Channel          `boil:"Channel" json:"Channel" toml:"Channel" yaml:"Channel"`
	CommandList      *CommandList      `boil:"CommandList" json:"CommandList" toml:"CommandList" yaml:"CommandList"`
	CustomCommand    *CustomCommand    `boil:"CustomCommand" json:"CustomCommand" toml:"CustomCommand" yaml:"CustomCommand"`
	RepeatedCommand  *RepeatedCommand  `boil:"RepeatedCommand" json:"RepeatedCommand" toml:"RepeatedCommand" yaml:"RepeatedCommand"`
	ScheduledCommand *ScheduledCommand `boil:"ScheduledCommand" json:"ScheduledCommand" toml:"ScheduledCommand" yaml:"ScheduledCommand"`
}

// NewStruct creates a new relationship struct
func (*commandInfoR) NewStruct() *commandInfoR {
	return &commandInfoR{}
}

func (r *commandInfoR) GetChannel() *Channel {
	if r == nil {
		return nil
	}
	return r.Channel
}

func (r *commandInfoR) GetCommandList() *CommandList {
	if r == nil {
		return nil
	}
	return r.CommandList
}

func (r *commandInfoR) GetCustomCommand() *CustomCommand {
	if r == nil {
		return nil
	}
	return r.CustomCommand
}

func (r *commandInfoR) GetRepeatedCommand() *RepeatedCommand {
	if r == nil {
		return nil
	}
	return r.RepeatedCommand
}

func (r *commandInfoR) GetScheduledCommand() *ScheduledCommand {
	if r == nil {
		return nil
	}
	return r.ScheduledCommand
}

// commandInfoL is where Load methods for each relationship are stored.
type commandInfoL struct{}

var (
	commandInfoAllColumns            = []string{"id", "created_at", "updated_at", "channel_id", "name", "access_level", "count", "creator", "editor", "last_used", "custom_command_id", "command_list_id"}
	commandInfoColumnsWithoutDefault = []string{"channel_id", "name", "access_level", "count", "creator", "editor"}
	commandInfoColumnsWithDefault    = []string{"id", "created_at", "updated_at", "last_used", "custom_command_id", "command_list_id"}
	commandInfoPrimaryKeyColumns     = []string{"id"}
	commandInfoGeneratedColumns      = []string{}
)

type (
	// CommandInfoSlice is an alias for a slice of pointers to CommandInfo.
	// This should almost always be used instead of []CommandInfo.
	CommandInfoSlice []*CommandInfo

	commandInfoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	commandInfoType                 = reflect.TypeOf(&CommandInfo{})
	commandInfoMapping              = queries.MakeStructMapping(commandInfoType)
	commandInfoPrimaryKeyMapping, _ = queries.BindMapping(commandInfoType, commandInfoMapping, commandInfoPrimaryKeyColumns)
	commandInfoInsertCacheMut       sync.RWMutex
	commandInfoInsertCache          = make(map[string]insertCache)
	commandInfoUpdateCacheMut       sync.RWMutex
	commandInfoUpdateCache          = make(map[string]updateCache)
	commandInfoUpsertCacheMut       sync.RWMutex
	commandInfoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single commandInfo record from the query.
func (q commandInfoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CommandInfo, error) {
	o := &CommandInfo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for command_infos")
	}

	return o, nil
}

// All returns all CommandInfo records from the query.
func (q commandInfoQuery) All(ctx context.Context, exec boil.ContextExecutor) (CommandInfoSlice, error) {
	var o []*CommandInfo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CommandInfo slice")
	}

	return o, nil
}

// Count returns the count of all CommandInfo records in the query.
func (q commandInfoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count command_infos rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q commandInfoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if command_infos exists")
	}

	return count > 0, nil
}

// Channel pointed to by the foreign key.
func (o *CommandInfo) Channel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChannelID),
	}

	queryMods = append(queryMods, mods...)

	return Channels(queryMods...)
}

// CommandList pointed to by the foreign key.
func (o *CommandInfo) CommandList(mods ...qm.QueryMod) commandListQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CommandListID),
	}

	queryMods = append(queryMods, mods...)

	return CommandLists(queryMods...)
}

// CustomCommand pointed to by the foreign key.
func (o *CommandInfo) CustomCommand(mods ...qm.QueryMod) customCommandQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CustomCommandID),
	}

	queryMods = append(queryMods, mods...)

	return CustomCommands(queryMods...)
}

// RepeatedCommand pointed to by the foreign key.
func (o *CommandInfo) RepeatedCommand(mods ...qm.QueryMod) repeatedCommandQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"command_info_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return RepeatedCommands(queryMods...)
}

// ScheduledCommand pointed to by the foreign key.
func (o *CommandInfo) ScheduledCommand(mods ...qm.QueryMod) scheduledCommandQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"command_info_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return ScheduledCommands(queryMods...)
}

// LoadChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (commandInfoL) LoadChannel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommandInfo interface{}, mods queries.Applicator) error {
	var slice []*CommandInfo
	var object *CommandInfo

	if singular {
		var ok bool
		object, ok = maybeCommandInfo.(*CommandInfo)
		if !ok {
			object = new(CommandInfo)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCommandInfo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCommandInfo))
			}
		}
	} else {
		s, ok := maybeCommandInfo.(*[]*CommandInfo)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCommandInfo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCommandInfo))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &commandInfoR{}
		}
		args[object.ChannelID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commandInfoR{}
			}

			args[obj.ChannelID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`channels`),
		qm.WhereIn(`channels.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channels")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Channel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.CommandInfos = append(foreign.R.CommandInfos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChannelID == foreign.ID {
				local.R.Channel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.CommandInfos = append(foreign.R.CommandInfos, local)
				break
			}
		}
	}

	return nil
}

// LoadCommandList allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (commandInfoL) LoadCommandList(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommandInfo interface{}, mods queries.Applicator) error {
	var slice []*CommandInfo
	var object *CommandInfo

	if singular {
		var ok bool
		object, ok = maybeCommandInfo.(*CommandInfo)
		if !ok {
			object = new(CommandInfo)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCommandInfo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCommandInfo))
			}
		}
	} else {
		s, ok := maybeCommandInfo.(*[]*CommandInfo)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCommandInfo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCommandInfo))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &commandInfoR{}
		}
		if !queries.IsNil(object.CommandListID) {
			args[object.CommandListID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commandInfoR{}
			}

			if !queries.IsNil(obj.CommandListID) {
				args[obj.CommandListID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`command_lists`),
		qm.WhereIn(`command_lists.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CommandList")
	}

	var resultSlice []*CommandList
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CommandList")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for command_lists")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for command_lists")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CommandList = foreign
		if foreign.R == nil {
			foreign.R = &commandListR{}
		}
		foreign.R.CommandInfo = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CommandListID, foreign.ID) {
				local.R.CommandList = foreign
				if foreign.R == nil {
					foreign.R = &commandListR{}
				}
				foreign.R.CommandInfo = local
				break
			}
		}
	}

	return nil
}

// LoadCustomCommand allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (commandInfoL) LoadCustomCommand(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommandInfo interface{}, mods queries.Applicator) error {
	var slice []*CommandInfo
	var object *CommandInfo

	if singular {
		var ok bool
		object, ok = maybeCommandInfo.(*CommandInfo)
		if !ok {
			object = new(CommandInfo)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCommandInfo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCommandInfo))
			}
		}
	} else {
		s, ok := maybeCommandInfo.(*[]*CommandInfo)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCommandInfo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCommandInfo))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &commandInfoR{}
		}
		if !queries.IsNil(object.CustomCommandID) {
			args[object.CustomCommandID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commandInfoR{}
			}

			if !queries.IsNil(obj.CustomCommandID) {
				args[obj.CustomCommandID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`custom_commands`),
		qm.WhereIn(`custom_commands.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CustomCommand")
	}

	var resultSlice []*CustomCommand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CustomCommand")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for custom_commands")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for custom_commands")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CustomCommand = foreign
		if foreign.R == nil {
			foreign.R = &customCommandR{}
		}
		foreign.R.CommandInfo = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CustomCommandID, foreign.ID) {
				local.R.CustomCommand = foreign
				if foreign.R == nil {
					foreign.R = &customCommandR{}
				}
				foreign.R.CommandInfo = local
				break
			}
		}
	}

	return nil
}

// LoadRepeatedCommand allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (commandInfoL) LoadRepeatedCommand(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommandInfo interface{}, mods queries.Applicator) error {
	var slice []*CommandInfo
	var object *CommandInfo

	if singular {
		var ok bool
		object, ok = maybeCommandInfo.(*CommandInfo)
		if !ok {
			object = new(CommandInfo)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCommandInfo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCommandInfo))
			}
		}
	} else {
		s, ok := maybeCommandInfo.(*[]*CommandInfo)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCommandInfo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCommandInfo))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &commandInfoR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commandInfoR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`repeated_commands`),
		qm.WhereIn(`repeated_commands.command_info_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RepeatedCommand")
	}

	var resultSlice []*RepeatedCommand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RepeatedCommand")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for repeated_commands")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for repeated_commands")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RepeatedCommand = foreign
		if foreign.R == nil {
			foreign.R = &repeatedCommandR{}
		}
		foreign.R.CommandInfo = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.CommandInfoID {
				local.R.RepeatedCommand = foreign
				if foreign.R == nil {
					foreign.R = &repeatedCommandR{}
				}
				foreign.R.CommandInfo = local
				break
			}
		}
	}

	return nil
}

// LoadScheduledCommand allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (commandInfoL) LoadScheduledCommand(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommandInfo interface{}, mods queries.Applicator) error {
	var slice []*CommandInfo
	var object *CommandInfo

	if singular {
		var ok bool
		object, ok = maybeCommandInfo.(*CommandInfo)
		if !ok {
			object = new(CommandInfo)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCommandInfo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCommandInfo))
			}
		}
	} else {
		s, ok := maybeCommandInfo.(*[]*CommandInfo)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCommandInfo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCommandInfo))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &commandInfoR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commandInfoR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`scheduled_commands`),
		qm.WhereIn(`scheduled_commands.command_info_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ScheduledCommand")
	}

	var resultSlice []*ScheduledCommand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ScheduledCommand")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for scheduled_commands")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for scheduled_commands")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ScheduledCommand = foreign
		if foreign.R == nil {
			foreign.R = &scheduledCommandR{}
		}
		foreign.R.CommandInfo = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.CommandInfoID {
				local.R.ScheduledCommand = foreign
				if foreign.R == nil {
					foreign.R = &scheduledCommandR{}
				}
				foreign.R.CommandInfo = local
				break
			}
		}
	}

	return nil
}

// SetChannel of the commandInfo to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.CommandInfos.
func (o *CommandInfo) SetChannel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"command_infos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"channel_id"}),
		strmangle.WhereClause("\"", "\"", 2, commandInfoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChannelID = related.ID
	if o.R == nil {
		o.R = &commandInfoR{
			Channel: related,
		}
	} else {
		o.R.Channel = related
	}

	if related.R == nil {
		related.R = &channelR{
			CommandInfos: CommandInfoSlice{o},
		}
	} else {
		related.R.CommandInfos = append(related.R.CommandInfos, o)
	}

	return nil
}

// SetCommandList of the commandInfo to the related item.
// Sets o.R.CommandList to related.
// Adds o to related.R.CommandInfo.
func (o *CommandInfo) SetCommandList(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CommandList) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"command_infos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"command_list_id"}),
		strmangle.WhereClause("\"", "\"", 2, commandInfoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CommandListID, related.ID)
	if o.R == nil {
		o.R = &commandInfoR{
			CommandList: related,
		}
	} else {
		o.R.CommandList = related
	}

	if related.R == nil {
		related.R = &commandListR{
			CommandInfo: o,
		}
	} else {
		related.R.CommandInfo = o
	}

	return nil
}

// RemoveCommandList relationship.
// Sets o.R.CommandList to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CommandInfo) RemoveCommandList(ctx context.Context, exec boil.ContextExecutor, related *CommandList) error {
	var err error

	queries.SetScanner(&o.CommandListID, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("command_list_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CommandList = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.CommandInfo = nil
	return nil
}

// SetCustomCommand of the commandInfo to the related item.
// Sets o.R.CustomCommand to related.
// Adds o to related.R.CommandInfo.
func (o *CommandInfo) SetCustomCommand(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CustomCommand) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"command_infos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"custom_command_id"}),
		strmangle.WhereClause("\"", "\"", 2, commandInfoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CustomCommandID, related.ID)
	if o.R == nil {
		o.R = &commandInfoR{
			CustomCommand: related,
		}
	} else {
		o.R.CustomCommand = related
	}

	if related.R == nil {
		related.R = &customCommandR{
			CommandInfo: o,
		}
	} else {
		related.R.CommandInfo = o
	}

	return nil
}

// RemoveCustomCommand relationship.
// Sets o.R.CustomCommand to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CommandInfo) RemoveCustomCommand(ctx context.Context, exec boil.ContextExecutor, related *CustomCommand) error {
	var err error

	queries.SetScanner(&o.CustomCommandID, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("custom_command_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CustomCommand = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.CommandInfo = nil
	return nil
}

// SetRepeatedCommand of the commandInfo to the related item.
// Sets o.R.RepeatedCommand to related.
// Adds o to related.R.CommandInfo.
func (o *CommandInfo) SetRepeatedCommand(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RepeatedCommand) error {
	var err error

	if insert {
		related.CommandInfoID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"repeated_commands\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"command_info_id"}),
			strmangle.WhereClause("\"", "\"", 2, repeatedCommandPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.CommandInfoID = o.ID
	}

	if o.R == nil {
		o.R = &commandInfoR{
			RepeatedCommand: related,
		}
	} else {
		o.R.RepeatedCommand = related
	}

	if related.R == nil {
		related.R = &repeatedCommandR{
			CommandInfo: o,
		}
	} else {
		related.R.CommandInfo = o
	}
	return nil
}

// SetScheduledCommand of the commandInfo to the related item.
// Sets o.R.ScheduledCommand to related.
// Adds o to related.R.CommandInfo.
func (o *CommandInfo) SetScheduledCommand(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ScheduledCommand) error {
	var err error

	if insert {
		related.CommandInfoID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"scheduled_commands\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"command_info_id"}),
			strmangle.WhereClause("\"", "\"", 2, scheduledCommandPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.CommandInfoID = o.ID
	}

	if o.R == nil {
		o.R = &commandInfoR{
			ScheduledCommand: related,
		}
	} else {
		o.R.ScheduledCommand = related
	}

	if related.R == nil {
		related.R = &scheduledCommandR{
			CommandInfo: o,
		}
	} else {
		related.R.CommandInfo = o
	}
	return nil
}

// CommandInfos retrieves all the records using an executor.
func CommandInfos(mods ...qm.QueryMod) commandInfoQuery {
	mods = append(mods, qm.From("\"command_infos\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"command_infos\".*"})
	}

	return commandInfoQuery{q}
}

// FindCommandInfo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCommandInfo(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CommandInfo, error) {
	commandInfoObj := &CommandInfo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"command_infos\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, commandInfoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from command_infos")
	}

	return commandInfoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CommandInfo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no command_infos provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(commandInfoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	commandInfoInsertCacheMut.RLock()
	cache, cached := commandInfoInsertCache[key]
	commandInfoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			commandInfoAllColumns,
			commandInfoColumnsWithDefault,
			commandInfoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(commandInfoType, commandInfoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(commandInfoType, commandInfoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"command_infos\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"command_infos\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into command_infos")
	}

	if !cached {
		commandInfoInsertCacheMut.Lock()
		commandInfoInsertCache[key] = cache
		commandInfoInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the CommandInfo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CommandInfo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	commandInfoUpdateCacheMut.RLock()
	cache, cached := commandInfoUpdateCache[key]
	commandInfoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			commandInfoAllColumns,
			commandInfoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update command_infos, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"command_infos\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, commandInfoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(commandInfoType, commandInfoMapping, append(wl, commandInfoPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update command_infos row")
	}

	if !cached {
		commandInfoUpdateCacheMut.Lock()
		commandInfoUpdateCache[key] = cache
		commandInfoUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q commandInfoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for command_infos")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CommandInfoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commandInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"command_infos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, commandInfoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in commandInfo slice")
	}

	return nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CommandInfo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no command_infos provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(commandInfoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	commandInfoUpsertCacheMut.RLock()
	cache, cached := commandInfoUpsertCache[key]
	commandInfoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			commandInfoAllColumns,
			commandInfoColumnsWithDefault,
			commandInfoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			commandInfoAllColumns,
			commandInfoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert command_infos, could not build update column list")
		}

		ret := strmangle.SetComplement(commandInfoAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(commandInfoPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert command_infos, could not build conflict column list")
			}

			conflict = make([]string, len(commandInfoPrimaryKeyColumns))
			copy(conflict, commandInfoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"command_infos\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(commandInfoType, commandInfoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(commandInfoType, commandInfoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert command_infos")
	}

	if !cached {
		commandInfoUpsertCacheMut.Lock()
		commandInfoUpsertCache[key] = cache
		commandInfoUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single CommandInfo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CommandInfo) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no CommandInfo provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), commandInfoPrimaryKeyMapping)
	sql := "DELETE FROM \"command_infos\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from command_infos")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q commandInfoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no commandInfoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from command_infos")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CommandInfoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commandInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"command_infos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, commandInfoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from commandInfo slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CommandInfo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCommandInfo(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommandInfoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CommandInfoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commandInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"command_infos\".* FROM \"command_infos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, commandInfoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CommandInfoSlice")
	}

	*o = slice

	return nil
}

// CommandInfoExists checks if the CommandInfo row exists.
func CommandInfoExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"command_infos\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if command_infos exists")
	}

	return exists, nil
}

// Exists checks if the CommandInfo row exists.
func (o *CommandInfo) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CommandInfoExists(ctx, exec, o.ID)
}
