// Code generated by SQLBoiler v4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Autoreply is an object representing the database table.
type Autoreply struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ChannelID   int64       `boil:"channel_id" json:"channel_id" toml:"channel_id" yaml:"channel_id"`
	Num         int         `boil:"num" json:"num" toml:"num" yaml:"num"`
	Trigger     string      `boil:"trigger" json:"trigger" toml:"trigger" yaml:"trigger"`
	OrigPattern null.String `boil:"orig_pattern" json:"orig_pattern,omitempty" toml:"orig_pattern" yaml:"orig_pattern,omitempty"`
	Response    string      `boil:"response" json:"response" toml:"response" yaml:"response"`
	Count       int         `boil:"count" json:"count" toml:"count" yaml:"count"`
	Creator     string      `boil:"creator" json:"creator" toml:"creator" yaml:"creator"`
	Editor      string      `boil:"editor" json:"editor" toml:"editor" yaml:"editor"`

	R *autoreplyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L autoreplyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AutoreplyColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	ChannelID   string
	Num         string
	Trigger     string
	OrigPattern string
	Response    string
	Count       string
	Creator     string
	Editor      string
}{
	ID:          "id",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	ChannelID:   "channel_id",
	Num:         "num",
	Trigger:     "trigger",
	OrigPattern: "orig_pattern",
	Response:    "response",
	Count:       "count",
	Creator:     "creator",
	Editor:      "editor",
}

var AutoreplyTableColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	ChannelID   string
	Num         string
	Trigger     string
	OrigPattern string
	Response    string
	Count       string
	Creator     string
	Editor      string
}{
	ID:          "autoreplies.id",
	CreatedAt:   "autoreplies.created_at",
	UpdatedAt:   "autoreplies.updated_at",
	ChannelID:   "autoreplies.channel_id",
	Num:         "autoreplies.num",
	Trigger:     "autoreplies.trigger",
	OrigPattern: "autoreplies.orig_pattern",
	Response:    "autoreplies.response",
	Count:       "autoreplies.count",
	Creator:     "autoreplies.creator",
	Editor:      "autoreplies.editor",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AutoreplyWhere = struct {
	ID          whereHelperint64
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	ChannelID   whereHelperint64
	Num         whereHelperint
	Trigger     whereHelperstring
	OrigPattern whereHelpernull_String
	Response    whereHelperstring
	Count       whereHelperint
	Creator     whereHelperstring
	Editor      whereHelperstring
}{
	ID:          whereHelperint64{field: "\"autoreplies\".\"id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"autoreplies\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"autoreplies\".\"updated_at\""},
	ChannelID:   whereHelperint64{field: "\"autoreplies\".\"channel_id\""},
	Num:         whereHelperint{field: "\"autoreplies\".\"num\""},
	Trigger:     whereHelperstring{field: "\"autoreplies\".\"trigger\""},
	OrigPattern: whereHelpernull_String{field: "\"autoreplies\".\"orig_pattern\""},
	Response:    whereHelperstring{field: "\"autoreplies\".\"response\""},
	Count:       whereHelperint{field: "\"autoreplies\".\"count\""},
	Creator:     whereHelperstring{field: "\"autoreplies\".\"creator\""},
	Editor:      whereHelperstring{field: "\"autoreplies\".\"editor\""},
}

// AutoreplyRels is where relationship names are stored.
var AutoreplyRels = struct {
	Channel string
}{
	Channel: "Channel",
}

// autoreplyR is where relationships are stored.
type autoreplyR struct {
	Channel *Channel `boil:"Channel" json:"Channel" toml:"Channel" yaml:"Channel"`
}

// NewStruct creates a new relationship struct
func (*autoreplyR) NewStruct() *autoreplyR {
	return &autoreplyR{}
}

func (r *autoreplyR) GetChannel() *Channel {
	if r == nil {
		return nil
	}
	return r.Channel
}

// autoreplyL is where Load methods for each relationship are stored.
type autoreplyL struct{}

var (
	autoreplyAllColumns            = []string{"id", "created_at", "updated_at", "channel_id", "num", "trigger", "orig_pattern", "response", "count", "creator", "editor"}
	autoreplyColumnsWithoutDefault = []string{"channel_id", "num", "trigger", "response", "count", "creator", "editor"}
	autoreplyColumnsWithDefault    = []string{"id", "created_at", "updated_at", "orig_pattern"}
	autoreplyPrimaryKeyColumns     = []string{"id"}
	autoreplyGeneratedColumns      = []string{}
)

type (
	// AutoreplySlice is an alias for a slice of pointers to Autoreply.
	// This should almost always be used instead of []Autoreply.
	AutoreplySlice []*Autoreply

	autoreplyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	autoreplyType                 = reflect.TypeOf(&Autoreply{})
	autoreplyMapping              = queries.MakeStructMapping(autoreplyType)
	autoreplyPrimaryKeyMapping, _ = queries.BindMapping(autoreplyType, autoreplyMapping, autoreplyPrimaryKeyColumns)
	autoreplyInsertCacheMut       sync.RWMutex
	autoreplyInsertCache          = make(map[string]insertCache)
	autoreplyUpdateCacheMut       sync.RWMutex
	autoreplyUpdateCache          = make(map[string]updateCache)
	autoreplyUpsertCacheMut       sync.RWMutex
	autoreplyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single autoreply record from the query.
func (q autoreplyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Autoreply, error) {
	o := &Autoreply{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for autoreplies")
	}

	return o, nil
}

// All returns all Autoreply records from the query.
func (q autoreplyQuery) All(ctx context.Context, exec boil.ContextExecutor) (AutoreplySlice, error) {
	var o []*Autoreply

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Autoreply slice")
	}

	return o, nil
}

// Count returns the count of all Autoreply records in the query.
func (q autoreplyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count autoreplies rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q autoreplyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if autoreplies exists")
	}

	return count > 0, nil
}

// Channel pointed to by the foreign key.
func (o *Autoreply) Channel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChannelID),
	}

	queryMods = append(queryMods, mods...)

	return Channels(queryMods...)
}

// LoadChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (autoreplyL) LoadChannel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutoreply interface{}, mods queries.Applicator) error {
	var slice []*Autoreply
	var object *Autoreply

	if singular {
		var ok bool
		object, ok = maybeAutoreply.(*Autoreply)
		if !ok {
			object = new(Autoreply)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAutoreply)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAutoreply))
			}
		}
	} else {
		s, ok := maybeAutoreply.(*[]*Autoreply)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAutoreply)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAutoreply))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &autoreplyR{}
		}
		args = append(args, object.ChannelID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autoreplyR{}
			}

			for _, a := range args {
				if a == obj.ChannelID {
					continue Outer
				}
			}

			args = append(args, obj.ChannelID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`channels`),
		qm.WhereIn(`channels.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channels")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Channel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.Autoreplies = append(foreign.R.Autoreplies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChannelID == foreign.ID {
				local.R.Channel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.Autoreplies = append(foreign.R.Autoreplies, local)
				break
			}
		}
	}

	return nil
}

// SetChannel of the autoreply to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.Autoreplies.
func (o *Autoreply) SetChannel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"autoreplies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"channel_id"}),
		strmangle.WhereClause("\"", "\"", 2, autoreplyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChannelID = related.ID
	if o.R == nil {
		o.R = &autoreplyR{
			Channel: related,
		}
	} else {
		o.R.Channel = related
	}

	if related.R == nil {
		related.R = &channelR{
			Autoreplies: AutoreplySlice{o},
		}
	} else {
		related.R.Autoreplies = append(related.R.Autoreplies, o)
	}

	return nil
}

// Autoreplies retrieves all the records using an executor.
func Autoreplies(mods ...qm.QueryMod) autoreplyQuery {
	mods = append(mods, qm.From("\"autoreplies\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"autoreplies\".*"})
	}

	return autoreplyQuery{q}
}

// FindAutoreply retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAutoreply(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Autoreply, error) {
	autoreplyObj := &Autoreply{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"autoreplies\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, autoreplyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from autoreplies")
	}

	return autoreplyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Autoreply) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no autoreplies provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(autoreplyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	autoreplyInsertCacheMut.RLock()
	cache, cached := autoreplyInsertCache[key]
	autoreplyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			autoreplyAllColumns,
			autoreplyColumnsWithDefault,
			autoreplyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(autoreplyType, autoreplyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(autoreplyType, autoreplyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"autoreplies\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"autoreplies\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into autoreplies")
	}

	if !cached {
		autoreplyInsertCacheMut.Lock()
		autoreplyInsertCache[key] = cache
		autoreplyInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Autoreply.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Autoreply) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	autoreplyUpdateCacheMut.RLock()
	cache, cached := autoreplyUpdateCache[key]
	autoreplyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			autoreplyAllColumns,
			autoreplyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update autoreplies, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"autoreplies\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, autoreplyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(autoreplyType, autoreplyMapping, append(wl, autoreplyPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update autoreplies row")
	}

	if !cached {
		autoreplyUpdateCacheMut.Lock()
		autoreplyUpdateCache[key] = cache
		autoreplyUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q autoreplyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for autoreplies")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AutoreplySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoreplyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"autoreplies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, autoreplyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in autoreply slice")
	}

	return nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Autoreply) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no autoreplies provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(autoreplyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	autoreplyUpsertCacheMut.RLock()
	cache, cached := autoreplyUpsertCache[key]
	autoreplyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			autoreplyAllColumns,
			autoreplyColumnsWithDefault,
			autoreplyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			autoreplyAllColumns,
			autoreplyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert autoreplies, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(autoreplyPrimaryKeyColumns))
			copy(conflict, autoreplyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"autoreplies\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(autoreplyType, autoreplyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(autoreplyType, autoreplyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert autoreplies")
	}

	if !cached {
		autoreplyUpsertCacheMut.Lock()
		autoreplyUpsertCache[key] = cache
		autoreplyUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Autoreply record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Autoreply) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no Autoreply provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), autoreplyPrimaryKeyMapping)
	sql := "DELETE FROM \"autoreplies\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from autoreplies")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q autoreplyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no autoreplyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from autoreplies")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AutoreplySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoreplyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"autoreplies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, autoreplyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from autoreply slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Autoreply) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAutoreply(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AutoreplySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AutoreplySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoreplyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"autoreplies\".* FROM \"autoreplies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, autoreplyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AutoreplySlice")
	}

	*o = slice

	return nil
}

// AutoreplyExists checks if the Autoreply row exists.
func AutoreplyExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"autoreplies\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if autoreplies exists")
	}

	return exists, nil
}
